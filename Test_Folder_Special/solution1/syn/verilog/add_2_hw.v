// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module add_2_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_matrix_address0,
        state_matrix_ce0,
        state_matrix_we0,
        state_matrix_d0,
        state_matrix_q0,
        copy_state_matrix_address0,
        copy_state_matrix_ce0,
        copy_state_matrix_q0,
        index,
        arr1_address0,
        arr1_ce0,
        arr1_we0,
        arr1_d0,
        arr1_q0,
        arr2_address0,
        arr2_ce0,
        arr2_we0,
        arr2_d0,
        arr2_q0,
        arr3_address0,
        arr3_ce0,
        arr3_we0,
        arr3_d0,
        arr3_q0,
        arr3_address1,
        arr3_ce1,
        arr3_we1,
        arr3_d1,
        arr3_q1,
        arr4_address0,
        arr4_ce0,
        arr4_we0,
        arr4_d0,
        arr4_q0,
        arr4_address1,
        arr4_ce1,
        arr4_we1,
        arr4_d1
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_pp0_stage0 = 13'd2;
parameter    ap_ST_fsm_state4 = 13'd4;
parameter    ap_ST_fsm_pp1_stage0 = 13'd8;
parameter    ap_ST_fsm_state7 = 13'd16;
parameter    ap_ST_fsm_state8 = 13'd32;
parameter    ap_ST_fsm_pp2_stage0 = 13'd64;
parameter    ap_ST_fsm_state11 = 13'd128;
parameter    ap_ST_fsm_pp3_stage0 = 13'd256;
parameter    ap_ST_fsm_pp3_stage1 = 13'd512;
parameter    ap_ST_fsm_state16 = 13'd1024;
parameter    ap_ST_fsm_pp4_stage0 = 13'd2048;
parameter    ap_ST_fsm_state19 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] state_matrix_address0;
output   state_matrix_ce0;
output   state_matrix_we0;
output  [7:0] state_matrix_d0;
input  [7:0] state_matrix_q0;
output  [7:0] copy_state_matrix_address0;
output   copy_state_matrix_ce0;
input  [7:0] copy_state_matrix_q0;
input  [4:0] index;
output  [2:0] arr1_address0;
output   arr1_ce0;
output   arr1_we0;
output  [7:0] arr1_d0;
input  [7:0] arr1_q0;
output  [2:0] arr2_address0;
output   arr2_ce0;
output   arr2_we0;
output  [7:0] arr2_d0;
input  [7:0] arr2_q0;
output  [4:0] arr3_address0;
output   arr3_ce0;
output   arr3_we0;
output  [7:0] arr3_d0;
input  [7:0] arr3_q0;
output  [4:0] arr3_address1;
output   arr3_ce1;
output   arr3_we1;
output  [7:0] arr3_d1;
input  [7:0] arr3_q1;
output  [4:0] arr4_address0;
output   arr4_ce0;
output   arr4_we0;
output  [7:0] arr4_d0;
input  [7:0] arr4_q0;
output  [4:0] arr4_address1;
output   arr4_ce1;
output   arr4_we1;
output  [7:0] arr4_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] state_matrix_address0;
reg state_matrix_ce0;
reg state_matrix_we0;
reg copy_state_matrix_ce0;
reg[2:0] arr1_address0;
reg arr1_ce0;
reg arr1_we0;
reg[7:0] arr1_d0;
reg[2:0] arr2_address0;
reg arr2_ce0;
reg arr2_we0;
reg[4:0] arr3_address0;
reg arr3_ce0;
reg arr3_we0;
reg[4:0] arr3_address1;
reg arr3_ce1;
reg arr3_we1;
reg[7:0] arr3_d1;
reg[4:0] arr4_address0;
reg arr4_ce0;
reg arr4_we0;
reg arr4_ce1;
reg arr4_we1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_0_reg_283;
reg   [3:0] i1_0_reg_295;
reg   [5:0] i2_0_reg_307;
reg   [3:0] i_0_i_reg_318;
reg   [3:0] i_0_i_reg_318_pp3_iter1_reg;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state12_pp3_stage0_iter0;
wire    ap_block_state14_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
reg   [3:0] i3_0_reg_330;
wire   [7:0] add_ln303_fu_399_p2;
reg   [7:0] add_ln303_reg_817;
wire   [0:0] icmp_ln301_fu_405_p2;
reg   [0:0] icmp_ln301_reg_824;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_411_p2;
reg   [3:0] i_reg_828;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln306_fu_436_p2;
reg   [0:0] icmp_ln306_reg_838;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] i_33_fu_442_p2;
reg   [3:0] i_33_reg_842;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] tmp_18_fu_467_p3;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state9_pp2_stage0_iter0;
wire    ap_block_state10_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
reg   [4:0] arr3_addr_reg_863;
wire   [5:0] i_35_fu_481_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln114_fu_526_p2;
reg   [0:0] icmp_ln114_reg_882;
reg   [0:0] icmp_ln114_reg_882_pp3_iter1_reg;
wire   [3:0] i_34_fu_532_p2;
reg   [3:0] i_34_reg_886;
reg    ap_enable_reg_pp3_iter0;
wire   [4:0] shl_ln_fu_542_p3;
reg   [4:0] shl_ln_reg_891;
wire   [0:0] grp_fu_367_p2;
reg   [0:0] icmp_ln116_reg_907;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_state13_pp3_stage1_iter0;
wire    ap_block_state15_pp3_stage1_iter1;
wire    ap_block_pp3_stage1_11001;
wire   [0:0] grp_fu_373_p2;
reg   [0:0] icmp_ln117_reg_915;
reg   [0:0] icmp_ln118_reg_933;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] icmp_ln119_reg_940;
wire   [0:0] xor_ln118_fu_628_p2;
reg   [0:0] xor_ln118_reg_949;
wire   [6:0] select_ln118_19_fu_640_p3;
reg   [6:0] select_ln118_19_reg_955;
wire   [0:0] icmp_ln329_fu_787_p2;
reg   [0:0] icmp_ln329_reg_960;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state17_pp4_stage0_iter0;
wire    ap_block_state18_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire   [3:0] i_36_fu_793_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [7:0] add_ln331_fu_808_p2;
reg   [7:0] add_ln331_reg_969;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state8;
wire    grp_convert_hex_to_binar_fu_341_ap_ready;
wire    grp_convert_hex_to_binar_fu_341_ap_done;
wire    grp_convert_hex_to_binar_fu_349_ap_ready;
wire    grp_convert_hex_to_binar_fu_349_ap_done;
reg    ap_block_state8_on_subcall_done;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state9;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state11;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state12;
wire    ap_block_pp3_stage1_subdone;
wire    ap_CS_fsm_state16;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state17;
reg    ap_enable_reg_pp4_iter1;
wire    grp_convert_hex_to_binar_fu_341_ap_start;
wire    grp_convert_hex_to_binar_fu_341_ap_idle;
wire   [2:0] grp_convert_hex_to_binar_fu_341_hex_address0;
wire    grp_convert_hex_to_binar_fu_341_hex_ce0;
wire   [4:0] grp_convert_hex_to_binar_fu_341_bin_address0;
wire    grp_convert_hex_to_binar_fu_341_bin_ce0;
wire    grp_convert_hex_to_binar_fu_341_bin_we0;
wire   [7:0] grp_convert_hex_to_binar_fu_341_bin_d0;
wire   [4:0] grp_convert_hex_to_binar_fu_341_bin_address1;
wire    grp_convert_hex_to_binar_fu_341_bin_ce1;
wire    grp_convert_hex_to_binar_fu_341_bin_we1;
wire   [7:0] grp_convert_hex_to_binar_fu_341_bin_d1;
wire    grp_convert_hex_to_binar_fu_349_ap_start;
wire    grp_convert_hex_to_binar_fu_349_ap_idle;
wire   [2:0] grp_convert_hex_to_binar_fu_349_hex_address0;
wire    grp_convert_hex_to_binar_fu_349_hex_ce0;
wire   [4:0] grp_convert_hex_to_binar_fu_349_bin_address0;
wire    grp_convert_hex_to_binar_fu_349_bin_ce0;
wire    grp_convert_hex_to_binar_fu_349_bin_we0;
wire   [7:0] grp_convert_hex_to_binar_fu_349_bin_d0;
wire   [4:0] grp_convert_hex_to_binar_fu_349_bin_address1;
wire    grp_convert_hex_to_binar_fu_349_bin_ce1;
wire    grp_convert_hex_to_binar_fu_349_bin_we1;
wire   [7:0] grp_convert_hex_to_binar_fu_349_bin_d1;
reg   [3:0] ap_phi_mux_i_0_phi_fu_287_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_i1_0_phi_fu_299_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_i_0_i_phi_fu_322_p4;
wire    ap_block_pp3_stage0;
reg    grp_convert_hex_to_binar_fu_341_ap_start_reg;
wire    ap_CS_fsm_state7;
reg    grp_convert_hex_to_binar_fu_349_ap_start_reg;
wire   [63:0] zext_ln303_4_fu_426_p1;
wire   [63:0] zext_ln303_fu_431_p1;
wire   [63:0] zext_ln308_2_fu_457_p1;
wire   [63:0] zext_ln308_fu_462_p1;
wire   [63:0] zext_ln318_fu_475_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln116_fu_550_p1;
wire   [63:0] zext_ln117_fu_561_p1;
wire   [63:0] zext_ln118_fu_571_p1;
wire    ap_block_pp3_stage1;
wire   [63:0] zext_ln119_fu_581_p1;
wire   [63:0] zext_ln119_4_fu_648_p1;
wire   [63:0] zext_ln331_fu_799_p1;
wire    ap_block_pp4_stage0;
wire   [63:0] zext_ln331_2_fu_813_p1;
reg   [1:0] carry_0_fu_130;
wire   [9:0] sum1_fu_520_p2;
wire   [7:0] zext_ln118_4_fu_782_p1;
wire   [3:0] trunc_ln303_fu_379_p1;
wire   [6:0] tmp_20_fu_387_p3;
wire   [7:0] zext_ln303_2_fu_395_p1;
wire   [7:0] zext_ln303_1_fu_383_p1;
wire   [7:0] zext_ln303_3_fu_417_p1;
wire   [7:0] add_ln303_1_fu_421_p2;
wire   [7:0] zext_ln308_1_fu_448_p1;
wire   [7:0] add_ln308_fu_452_p2;
wire  signed [7:0] sext_ln318_fu_490_p0;
wire   [7:0] or_ln_fu_498_p3;
wire  signed [8:0] sext_ln318_1_fu_494_p1;
wire  signed [8:0] sext_ln318_fu_490_p1;
wire   [8:0] add_ln318_fu_510_p2;
wire  signed [9:0] sext_ln318_2_fu_506_p1;
wire  signed [9:0] sext_ln318_3_fu_516_p1;
wire   [2:0] trunc_ln116_fu_538_p1;
wire   [4:0] or_ln117_fu_555_p2;
wire   [4:0] or_ln118_fu_566_p2;
wire   [4:0] or_ln119_fu_576_p2;
wire   [0:0] and_ln117_fu_610_p2;
wire   [0:0] and_ln118_fu_614_p2;
wire   [6:0] select_ln119_fu_586_p3;
wire   [6:0] select_ln155_fu_602_p3;
wire   [0:0] and_ln118_19_fu_634_p2;
wire   [6:0] select_ln123_fu_594_p3;
wire   [6:0] select_ln118_fu_620_p3;
wire   [0:0] xor_ln117_fu_688_p2;
wire   [0:0] and_ln117_7_fu_693_p2;
wire   [0:0] and_ln118_20_fu_698_p2;
wire   [6:0] select_ln129_fu_653_p3;
wire   [0:0] and_ln118_21_fu_710_p2;
wire   [6:0] select_ln133_fu_660_p3;
wire   [6:0] select_ln118_20_fu_703_p3;
wire   [0:0] xor_ln116_fu_723_p2;
wire   [0:0] and_ln117_8_fu_728_p2;
wire   [0:0] and_ln118_22_fu_733_p2;
wire   [6:0] select_ln141_fu_667_p3;
wire   [6:0] select_ln118_21_fu_715_p3;
wire   [0:0] and_ln118_23_fu_746_p2;
wire   [6:0] select_ln145_fu_674_p3;
wire   [6:0] select_ln118_22_fu_738_p3;
wire   [0:0] or_ln117_4_fu_759_p2;
wire   [0:0] xor_ln117_4_fu_763_p2;
wire   [0:0] and_ln118_24_fu_769_p2;
wire   [6:0] select_ln151_fu_681_p3;
wire   [6:0] select_ln118_23_fu_751_p3;
wire   [6:0] select_ln118_24_fu_774_p3;
wire   [7:0] zext_ln331_1_fu_804_p1;
wire    ap_CS_fsm_state19;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 grp_convert_hex_to_binar_fu_341_ap_start_reg = 1'b0;
#0 grp_convert_hex_to_binar_fu_349_ap_start_reg = 1'b0;
end

convert_hex_to_binar grp_convert_hex_to_binar_fu_341(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convert_hex_to_binar_fu_341_ap_start),
    .ap_done(grp_convert_hex_to_binar_fu_341_ap_done),
    .ap_idle(grp_convert_hex_to_binar_fu_341_ap_idle),
    .ap_ready(grp_convert_hex_to_binar_fu_341_ap_ready),
    .hex_address0(grp_convert_hex_to_binar_fu_341_hex_address0),
    .hex_ce0(grp_convert_hex_to_binar_fu_341_hex_ce0),
    .hex_q0(arr1_q0),
    .bin_address0(grp_convert_hex_to_binar_fu_341_bin_address0),
    .bin_ce0(grp_convert_hex_to_binar_fu_341_bin_ce0),
    .bin_we0(grp_convert_hex_to_binar_fu_341_bin_we0),
    .bin_d0(grp_convert_hex_to_binar_fu_341_bin_d0),
    .bin_address1(grp_convert_hex_to_binar_fu_341_bin_address1),
    .bin_ce1(grp_convert_hex_to_binar_fu_341_bin_ce1),
    .bin_we1(grp_convert_hex_to_binar_fu_341_bin_we1),
    .bin_d1(grp_convert_hex_to_binar_fu_341_bin_d1)
);

convert_hex_to_binar grp_convert_hex_to_binar_fu_349(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convert_hex_to_binar_fu_349_ap_start),
    .ap_done(grp_convert_hex_to_binar_fu_349_ap_done),
    .ap_idle(grp_convert_hex_to_binar_fu_349_ap_idle),
    .ap_ready(grp_convert_hex_to_binar_fu_349_ap_ready),
    .hex_address0(grp_convert_hex_to_binar_fu_349_hex_address0),
    .hex_ce0(grp_convert_hex_to_binar_fu_349_hex_ce0),
    .hex_q0(arr2_q0),
    .bin_address0(grp_convert_hex_to_binar_fu_349_bin_address0),
    .bin_ce0(grp_convert_hex_to_binar_fu_349_bin_ce0),
    .bin_we0(grp_convert_hex_to_binar_fu_349_bin_we0),
    .bin_d0(grp_convert_hex_to_binar_fu_349_bin_d0),
    .bin_address1(grp_convert_hex_to_binar_fu_349_bin_address1),
    .bin_ce1(grp_convert_hex_to_binar_fu_349_bin_ce1),
    .bin_we1(grp_convert_hex_to_binar_fu_349_bin_we1),
    .bin_d1(grp_convert_hex_to_binar_fu_349_bin_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state9))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state9);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state17) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state17))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state17);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_convert_hex_to_binar_fu_341_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_convert_hex_to_binar_fu_341_ap_start_reg <= 1'b1;
        end else if ((grp_convert_hex_to_binar_fu_341_ap_ready == 1'b1)) begin
            grp_convert_hex_to_binar_fu_341_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_convert_hex_to_binar_fu_349_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_convert_hex_to_binar_fu_349_ap_start_reg <= 1'b1;
        end else if ((grp_convert_hex_to_binar_fu_349_ap_ready == 1'b1)) begin
            grp_convert_hex_to_binar_fu_349_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((sum1_fu_520_p2 == 10'd2) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((sum1_fu_520_p2 == 10'd3) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
                carry_0_fu_130[0] <= 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((sum1_fu_520_p2 == 10'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((sum1_fu_520_p2 == 10'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
                carry_0_fu_130[0] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_295 <= 4'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln306_reg_838 == 1'd0))) begin
        i1_0_reg_295 <= i_33_reg_842;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (tmp_18_fu_467_p3 == 1'd0))) begin
        i2_0_reg_307 <= i_35_fu_481_p2;
    end else if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
        i2_0_reg_307 <= 6'd31;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i3_0_reg_330 <= 4'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln329_fu_787_p2 == 1'd0))) begin
        i3_0_reg_330 <= i_36_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_i_reg_318 <= 4'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln114_reg_882 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_0_i_reg_318 <= i_34_reg_886;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln301_reg_824 == 1'd0))) begin
        i_0_reg_283 <= i_reg_828;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_283 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln303_reg_817 <= add_ln303_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln329_fu_787_p2 == 1'd0))) begin
        add_ln331_reg_969 <= add_ln331_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (tmp_18_fu_467_p3 == 1'd0))) begin
        arr3_addr_reg_863 <= zext_ln318_fu_475_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_0_i_reg_318_pp3_iter1_reg <= i_0_i_reg_318;
        icmp_ln114_reg_882 <= icmp_ln114_fu_526_p2;
        icmp_ln114_reg_882_pp3_iter1_reg <= icmp_ln114_reg_882;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_33_reg_842 <= i_33_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_34_reg_886 <= i_34_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_828 <= i_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln114_reg_882 == 1'd0))) begin
        icmp_ln116_reg_907 <= grp_fu_367_p2;
        icmp_ln117_reg_915 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln114_reg_882 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln118_reg_933 <= grp_fu_367_p2;
        icmp_ln119_reg_940 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln301_reg_824 <= icmp_ln301_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln306_reg_838 <= icmp_ln306_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln329_reg_960 <= icmp_ln329_fu_787_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln114_reg_882 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        select_ln118_19_reg_955[2 : 0] <= select_ln118_19_fu_640_p3[2 : 0];
select_ln118_19_reg_955[4] <= select_ln118_19_fu_640_p3[4];
select_ln118_19_reg_955[6] <= select_ln118_19_fu_640_p3[6];
        xor_ln118_reg_949 <= xor_ln118_fu_628_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln114_fu_526_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        shl_ln_reg_891[4 : 2] <= shl_ln_fu_542_p3[4 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln301_fu_405_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln306_fu_436_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_18_fu_467_p3 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln114_fu_526_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln329_fu_787_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln306_reg_838 == 1'd0))) begin
        ap_phi_mux_i1_0_phi_fu_299_p4 = i_33_reg_842;
    end else begin
        ap_phi_mux_i1_0_phi_fu_299_p4 = i1_0_reg_295;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln114_reg_882 == 1'd0))) begin
        ap_phi_mux_i_0_i_phi_fu_322_p4 = i_34_reg_886;
    end else begin
        ap_phi_mux_i_0_i_phi_fu_322_p4 = i_0_i_reg_318;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln301_reg_824 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_287_p4 = i_reg_828;
    end else begin
        ap_phi_mux_i_0_phi_fu_287_p4 = i_0_reg_283;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        arr1_address0 = zext_ln331_fu_799_p1;
    end else if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        arr1_address0 = zext_ln119_4_fu_648_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr1_address0 = zext_ln303_fu_431_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr1_address0 = grp_convert_hex_to_binar_fu_341_hex_address0;
    end else begin
        arr1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        arr1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr1_ce0 = grp_convert_hex_to_binar_fu_341_hex_ce0;
    end else begin
        arr1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        arr1_d0 = zext_ln118_4_fu_782_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr1_d0 = state_matrix_q0;
    end else begin
        arr1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (icmp_ln114_reg_882_pp3_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln301_reg_824 == 1'd0)))) begin
        arr1_we0 = 1'b1;
    end else begin
        arr1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        arr2_address0 = zext_ln308_fu_462_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr2_address0 = grp_convert_hex_to_binar_fu_349_hex_address0;
    end else begin
        arr2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        arr2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr2_ce0 = grp_convert_hex_to_binar_fu_349_hex_ce0;
    end else begin
        arr2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln306_reg_838 == 1'd0))) begin
        arr2_we0 = 1'b1;
    end else begin
        arr2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        arr3_address0 = zext_ln118_fu_571_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        arr3_address0 = zext_ln116_fu_550_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        arr3_address0 = zext_ln318_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_address0 = grp_convert_hex_to_binar_fu_341_bin_address0;
    end else begin
        arr3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        arr3_address1 = zext_ln119_fu_581_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        arr3_address1 = zext_ln117_fu_561_p1;
    end else if ((((sum1_fu_520_p2 == 10'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((sum1_fu_520_p2 == 10'd1) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((sum1_fu_520_p2 == 10'd2) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((sum1_fu_520_p2 == 10'd3) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        arr3_address1 = arr3_addr_reg_863;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_address1 = grp_convert_hex_to_binar_fu_341_bin_address1;
    end else begin
        arr3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        arr3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_ce0 = grp_convert_hex_to_binar_fu_341_bin_ce0;
    end else begin
        arr3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((sum1_fu_520_p2 == 10'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((sum1_fu_520_p2 == 10'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((sum1_fu_520_p2 == 10'd2) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((sum1_fu_520_p2 == 10'd3) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        arr3_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_ce1 = grp_convert_hex_to_binar_fu_341_bin_ce1;
    end else begin
        arr3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((sum1_fu_520_p2 == 10'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((sum1_fu_520_p2 == 10'd2) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        arr3_d1 = 8'd48;
    end else if ((((sum1_fu_520_p2 == 10'd1) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((sum1_fu_520_p2 == 10'd3) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        arr3_d1 = 8'd49;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_d1 = grp_convert_hex_to_binar_fu_341_bin_d1;
    end else begin
        arr3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_we0 = grp_convert_hex_to_binar_fu_341_bin_we0;
    end else begin
        arr3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((sum1_fu_520_p2 == 10'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((sum1_fu_520_p2 == 10'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((sum1_fu_520_p2 == 10'd2) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((sum1_fu_520_p2 == 10'd3) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        arr3_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_we1 = grp_convert_hex_to_binar_fu_341_bin_we1;
    end else begin
        arr3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        arr4_address0 = zext_ln318_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr4_address0 = grp_convert_hex_to_binar_fu_349_bin_address0;
    end else begin
        arr4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        arr4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr4_ce0 = grp_convert_hex_to_binar_fu_349_bin_ce0;
    end else begin
        arr4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr4_ce1 = grp_convert_hex_to_binar_fu_349_bin_ce1;
    end else begin
        arr4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr4_we0 = grp_convert_hex_to_binar_fu_349_bin_we0;
    end else begin
        arr4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr4_we1 = grp_convert_hex_to_binar_fu_349_bin_we1;
    end else begin
        arr4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        copy_state_matrix_ce0 = 1'b1;
    end else begin
        copy_state_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        state_matrix_address0 = zext_ln331_2_fu_813_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_matrix_address0 = zext_ln303_4_fu_426_p1;
    end else begin
        state_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        state_matrix_ce0 = 1'b1;
    end else begin
        state_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln329_reg_960 == 1'd0))) begin
        state_matrix_we0 = 1'b1;
    end else begin
        state_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln301_fu_405_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln301_fu_405_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln306_fu_436_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln306_fu_436_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_18_fu_467_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_18_fu_467_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln114_fu_526_p2 == 1'd1)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln114_fu_526_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((~((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b0)) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln329_fu_787_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln329_fu_787_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln303_1_fu_421_p2 = (add_ln303_reg_817 + zext_ln303_3_fu_417_p1);

assign add_ln303_fu_399_p2 = (zext_ln303_2_fu_395_p1 + zext_ln303_1_fu_383_p1);

assign add_ln308_fu_452_p2 = (add_ln303_reg_817 + zext_ln308_1_fu_448_p1);

assign add_ln318_fu_510_p2 = ($signed(sext_ln318_1_fu_494_p1) + $signed(sext_ln318_fu_490_p1));

assign add_ln331_fu_808_p2 = (add_ln303_reg_817 + zext_ln331_1_fu_804_p1);

assign and_ln117_7_fu_693_p2 = (xor_ln117_fu_688_p2 & icmp_ln116_reg_907);

assign and_ln117_8_fu_728_p2 = (xor_ln116_fu_723_p2 & icmp_ln117_reg_915);

assign and_ln117_fu_610_p2 = (icmp_ln117_reg_915 & icmp_ln116_reg_907);

assign and_ln118_19_fu_634_p2 = (xor_ln118_fu_628_p2 & and_ln117_fu_610_p2);

assign and_ln118_20_fu_698_p2 = (icmp_ln118_reg_933 & and_ln117_7_fu_693_p2);

assign and_ln118_21_fu_710_p2 = (xor_ln118_reg_949 & and_ln117_7_fu_693_p2);

assign and_ln118_22_fu_733_p2 = (icmp_ln118_reg_933 & and_ln117_8_fu_728_p2);

assign and_ln118_23_fu_746_p2 = (xor_ln118_reg_949 & and_ln117_8_fu_728_p2);

assign and_ln118_24_fu_769_p2 = (xor_ln117_4_fu_763_p2 & icmp_ln118_reg_933);

assign and_ln118_fu_614_p2 = (grp_fu_367_p2 & and_ln117_fu_610_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_on_subcall_done = ((grp_convert_hex_to_binar_fu_349_ap_done == 1'b0) | (grp_convert_hex_to_binar_fu_341_ap_done == 1'b0));
end

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign arr2_d0 = copy_state_matrix_q0;

assign arr3_d0 = grp_convert_hex_to_binar_fu_341_bin_d0;

assign arr4_address1 = grp_convert_hex_to_binar_fu_349_bin_address1;

assign arr4_d0 = grp_convert_hex_to_binar_fu_349_bin_d0;

assign arr4_d1 = grp_convert_hex_to_binar_fu_349_bin_d1;

assign copy_state_matrix_address0 = zext_ln308_2_fu_457_p1;

assign grp_convert_hex_to_binar_fu_341_ap_start = grp_convert_hex_to_binar_fu_341_ap_start_reg;

assign grp_convert_hex_to_binar_fu_349_ap_start = grp_convert_hex_to_binar_fu_349_ap_start_reg;

assign grp_fu_367_p2 = ((arr3_q0 == 8'd48) ? 1'b1 : 1'b0);

assign grp_fu_373_p2 = ((arr3_q1 == 8'd48) ? 1'b1 : 1'b0);

assign i_33_fu_442_p2 = (ap_phi_mux_i1_0_phi_fu_299_p4 + 4'd1);

assign i_34_fu_532_p2 = (ap_phi_mux_i_0_i_phi_fu_322_p4 + 4'd1);

assign i_35_fu_481_p2 = ($signed(i2_0_reg_307) + $signed(6'd63));

assign i_36_fu_793_p2 = (i3_0_reg_330 + 4'd1);

assign i_fu_411_p2 = (ap_phi_mux_i_0_phi_fu_287_p4 + 4'd1);

assign icmp_ln114_fu_526_p2 = ((ap_phi_mux_i_0_i_phi_fu_322_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln301_fu_405_p2 = ((ap_phi_mux_i_0_phi_fu_287_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_436_p2 = ((ap_phi_mux_i1_0_phi_fu_299_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln329_fu_787_p2 = ((i3_0_reg_330 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln117_4_fu_759_p2 = (icmp_ln117_reg_915 | icmp_ln116_reg_907);

assign or_ln117_fu_555_p2 = (shl_ln_fu_542_p3 | 5'd1);

assign or_ln118_fu_566_p2 = (shl_ln_reg_891 | 5'd2);

assign or_ln119_fu_576_p2 = (shl_ln_reg_891 | 5'd3);

assign or_ln_fu_498_p3 = {{6'd40}, {carry_0_fu_130}};

assign select_ln118_19_fu_640_p3 = ((and_ln118_19_fu_634_p2[0:0] === 1'b1) ? select_ln123_fu_594_p3 : select_ln118_fu_620_p3);

assign select_ln118_20_fu_703_p3 = ((and_ln118_20_fu_698_p2[0:0] === 1'b1) ? select_ln129_fu_653_p3 : select_ln118_19_reg_955);

assign select_ln118_21_fu_715_p3 = ((and_ln118_21_fu_710_p2[0:0] === 1'b1) ? select_ln133_fu_660_p3 : select_ln118_20_fu_703_p3);

assign select_ln118_22_fu_738_p3 = ((and_ln118_22_fu_733_p2[0:0] === 1'b1) ? select_ln141_fu_667_p3 : select_ln118_21_fu_715_p3);

assign select_ln118_23_fu_751_p3 = ((and_ln118_23_fu_746_p2[0:0] === 1'b1) ? select_ln145_fu_674_p3 : select_ln118_22_fu_738_p3);

assign select_ln118_24_fu_774_p3 = ((and_ln118_24_fu_769_p2[0:0] === 1'b1) ? select_ln151_fu_681_p3 : select_ln118_23_fu_751_p3);

assign select_ln118_fu_620_p3 = ((and_ln118_fu_614_p2[0:0] === 1'b1) ? select_ln119_fu_586_p3 : select_ln155_fu_602_p3);

assign select_ln119_fu_586_p3 = ((grp_fu_373_p2[0:0] === 1'b1) ? 7'd48 : 7'd49);

assign select_ln123_fu_594_p3 = ((grp_fu_373_p2[0:0] === 1'b1) ? 7'd50 : 7'd51);

assign select_ln129_fu_653_p3 = ((icmp_ln119_reg_940[0:0] === 1'b1) ? 7'd52 : 7'd53);

assign select_ln133_fu_660_p3 = ((icmp_ln119_reg_940[0:0] === 1'b1) ? 7'd54 : 7'd55);

assign select_ln141_fu_667_p3 = ((icmp_ln119_reg_940[0:0] === 1'b1) ? 7'd56 : 7'd57);

assign select_ln145_fu_674_p3 = ((icmp_ln119_reg_940[0:0] === 1'b1) ? 7'd97 : 7'd98);

assign select_ln151_fu_681_p3 = ((icmp_ln119_reg_940[0:0] === 1'b1) ? 7'd99 : 7'd100);

assign select_ln155_fu_602_p3 = ((grp_fu_373_p2[0:0] === 1'b1) ? 7'd101 : 7'd102);

assign sext_ln318_1_fu_494_p1 = $signed(arr4_q0);

assign sext_ln318_2_fu_506_p1 = $signed(or_ln_fu_498_p3);

assign sext_ln318_3_fu_516_p1 = $signed(add_ln318_fu_510_p2);

assign sext_ln318_fu_490_p0 = arr3_q0;

assign sext_ln318_fu_490_p1 = sext_ln318_fu_490_p0;

assign shl_ln_fu_542_p3 = {{trunc_ln116_fu_538_p1}, {2'd0}};

assign state_matrix_d0 = arr1_q0;

assign sum1_fu_520_p2 = ($signed(sext_ln318_2_fu_506_p1) + $signed(sext_ln318_3_fu_516_p1));

assign tmp_18_fu_467_p3 = i2_0_reg_307[32'd5];

assign tmp_20_fu_387_p3 = {{trunc_ln303_fu_379_p1}, {3'd0}};

assign trunc_ln116_fu_538_p1 = ap_phi_mux_i_0_i_phi_fu_322_p4[2:0];

assign trunc_ln303_fu_379_p1 = index[3:0];

assign xor_ln116_fu_723_p2 = (icmp_ln116_reg_907 ^ 1'd1);

assign xor_ln117_4_fu_763_p2 = (or_ln117_4_fu_759_p2 ^ 1'd1);

assign xor_ln117_fu_688_p2 = (icmp_ln117_reg_915 ^ 1'd1);

assign xor_ln118_fu_628_p2 = (grp_fu_367_p2 ^ 1'd1);

assign zext_ln116_fu_550_p1 = shl_ln_fu_542_p3;

assign zext_ln117_fu_561_p1 = or_ln117_fu_555_p2;

assign zext_ln118_4_fu_782_p1 = select_ln118_24_fu_774_p3;

assign zext_ln118_fu_571_p1 = or_ln118_fu_566_p2;

assign zext_ln119_4_fu_648_p1 = i_0_i_reg_318_pp3_iter1_reg;

assign zext_ln119_fu_581_p1 = or_ln119_fu_576_p2;

assign zext_ln303_1_fu_383_p1 = trunc_ln303_fu_379_p1;

assign zext_ln303_2_fu_395_p1 = tmp_20_fu_387_p3;

assign zext_ln303_3_fu_417_p1 = ap_phi_mux_i_0_phi_fu_287_p4;

assign zext_ln303_4_fu_426_p1 = add_ln303_1_fu_421_p2;

assign zext_ln303_fu_431_p1 = i_0_reg_283;

assign zext_ln308_1_fu_448_p1 = ap_phi_mux_i1_0_phi_fu_299_p4;

assign zext_ln308_2_fu_457_p1 = add_ln308_fu_452_p2;

assign zext_ln308_fu_462_p1 = i1_0_reg_295;

assign zext_ln318_fu_475_p1 = i2_0_reg_307;

assign zext_ln331_1_fu_804_p1 = i3_0_reg_330;

assign zext_ln331_2_fu_813_p1 = add_ln331_reg_969;

assign zext_ln331_fu_799_p1 = i3_0_reg_330;

always @ (posedge ap_clk) begin
    shl_ln_reg_891[1:0] <= 2'b00;
    select_ln118_19_reg_955[3] <= 1'b0;
    select_ln118_19_reg_955[5] <= 1'b1;
    carry_0_fu_130[1] <= 1'b0;
end

endmodule //add_2_hw

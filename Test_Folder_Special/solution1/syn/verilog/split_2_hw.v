// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module split_2_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_matrix_address0,
        state_matrix_ce0,
        state_matrix_q0,
        state_matrix_address1,
        state_matrix_ce1,
        state_matrix_q1,
        key_stream_address0,
        key_stream_ce0,
        key_stream_we0,
        key_stream_d0,
        key_stream_address1,
        key_stream_ce1,
        key_stream_we1,
        key_stream_d1,
        start,
        mode
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] state_matrix_address0;
output   state_matrix_ce0;
input  [7:0] state_matrix_q0;
output  [7:0] state_matrix_address1;
output   state_matrix_ce1;
input  [7:0] state_matrix_q1;
output  [9:0] key_stream_address0;
output   key_stream_ce0;
output   key_stream_we0;
output  [7:0] key_stream_d0;
output  [9:0] key_stream_address1;
output   key_stream_ce1;
output   key_stream_we1;
output  [7:0] key_stream_d1;
input  [11:0] start;
input  [0:0] mode;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg state_matrix_ce0;
reg state_matrix_ce1;
reg key_stream_ce0;
reg key_stream_we0;
reg key_stream_ce1;
reg key_stream_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] indvar_flatten17_reg_142;
reg   [2:0] i_0_reg_153;
reg   [5:0] indvar_flatten_reg_164;
reg   [2:0] j_0_reg_175;
reg   [10:0] count1_2_reg_186;
reg   [7:0] count2_reg_196;
reg   [3:0] k_0_reg_207;
wire   [10:0] empty_fu_218_p1;
wire   [0:0] icmp_ln54_fu_222_p2;
reg   [0:0] icmp_ln54_reg_457;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln54_reg_457_pp0_iter1_reg;
wire   [6:0] add_ln54_fu_228_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln59_2_fu_262_p3;
reg   [2:0] select_ln59_2_reg_466;
wire  signed [3:0] select_ln59_3_fu_296_p3;
reg  signed [3:0] select_ln59_3_reg_472;
wire   [2:0] select_ln59_4_fu_304_p3;
reg   [2:0] select_ln59_4_reg_478;
wire   [0:0] and_ln62_fu_318_p2;
reg   [0:0] and_ln62_reg_484;
reg   [0:0] and_ln62_reg_484_pp0_iter1_reg;
wire   [3:0] k_fu_323_p2;
wire   [5:0] select_ln55_fu_335_p3;
wire   [7:0] add_ln56_fu_343_p2;
wire   [10:0] count1_fu_441_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_predicate_tran4to5_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [2:0] ap_phi_mux_i_0_phi_fu_157_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_j_0_phi_fu_179_p4;
wire   [63:0] zext_ln59_3_fu_399_p1;
wire   [63:0] zext_ln60_2_fu_420_p1;
wire   [63:0] zext_ln59_4_fu_425_p1;
wire   [63:0] zext_ln60_1_fu_436_p1;
wire   [0:0] icmp_ln55_fu_240_p2;
wire   [2:0] i_fu_234_p2;
wire   [0:0] tmp_1_fu_270_p3;
wire   [0:0] xor_ln56_fu_278_p2;
wire   [2:0] select_ln59_fu_246_p3;
wire   [0:0] or_ln59_fu_284_p2;
wire   [3:0] select_ln59_1_fu_254_p3;
wire   [2:0] j_fu_290_p2;
wire   [0:0] icmp_ln62_fu_312_p2;
wire   [5:0] add_ln55_1_fu_329_p2;
wire   [4:0] tmp_s_fu_349_p3;
wire   [5:0] zext_ln59_1_fu_360_p1;
wire   [5:0] zext_ln59_fu_356_p1;
wire   [5:0] add_ln59_fu_363_p2;
wire   [8:0] p_shl_cast_fu_373_p3;
wire   [8:0] zext_ln59_2_fu_369_p1;
wire  signed [8:0] sext_ln59_fu_390_p1;
wire   [8:0] add_ln59_1_fu_381_p2;
wire   [8:0] add_ln59_2_fu_393_p2;
wire   [2:0] trunc_ln56_fu_387_p1;
wire   [2:0] or_ln60_fu_404_p2;
wire   [8:0] zext_ln60_fu_410_p1;
wire   [8:0] add_ln60_1_fu_414_p2;
wire   [10:0] add_ln60_fu_430_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_predicate_tran4to5_state2 == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln62_reg_484_pp0_iter1_reg) & (icmp_ln54_reg_457_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        count1_2_reg_186 <= count1_fu_441_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        count1_2_reg_186 <= empty_fu_218_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln62_fu_318_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count2_reg_196 <= add_ln56_fu_343_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        count2_reg_196 <= 8'd2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln62_reg_484) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_457 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_153 <= select_ln59_2_reg_466;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_153 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln62_fu_318_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten17_reg_142 <= add_ln54_fu_228_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_142 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln62_fu_318_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_164 <= select_ln55_fu_335_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_164 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln62_reg_484) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_457 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_175 <= select_ln59_4_reg_478;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_175 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln62_fu_318_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_0_reg_207 <= k_fu_323_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_reg_207 <= 4'd6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln62_reg_484 <= and_ln62_fu_318_p2;
        select_ln59_3_reg_472 <= select_ln59_3_fu_296_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln62_reg_484_pp0_iter1_reg <= and_ln62_reg_484;
        icmp_ln54_reg_457 <= icmp_ln54_fu_222_p2;
        icmp_ln54_reg_457_pp0_iter1_reg <= icmp_ln54_reg_457;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln59_2_reg_466 <= select_ln59_2_fu_262_p3;
        select_ln59_4_reg_478 <= select_ln59_4_fu_304_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln62_reg_484) & (icmp_ln54_reg_457 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_157_p4 = select_ln59_2_reg_466;
    end else begin
        ap_phi_mux_i_0_phi_fu_157_p4 = i_0_reg_153;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln62_reg_484) & (icmp_ln54_reg_457 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_179_p4 = select_ln59_4_reg_478;
    end else begin
        ap_phi_mux_j_0_phi_fu_179_p4 = j_0_reg_175;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        key_stream_ce0 = 1'b1;
    end else begin
        key_stream_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        key_stream_ce1 = 1'b1;
    end else begin
        key_stream_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_457_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        key_stream_we0 = 1'b1;
    end else begin
        key_stream_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_457_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        key_stream_we1 = 1'b1;
    end else begin
        key_stream_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        state_matrix_ce0 = 1'b1;
    end else begin
        state_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        state_matrix_ce1 = 1'b1;
    end else begin
        state_matrix_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_228_p2 = (indvar_flatten17_reg_142 + 7'd1);

assign add_ln55_1_fu_329_p2 = (indvar_flatten_reg_164 + 6'd1);

assign add_ln56_fu_343_p2 = (count2_reg_196 + 8'd2);

assign add_ln59_1_fu_381_p2 = (p_shl_cast_fu_373_p3 + zext_ln59_2_fu_369_p1);

assign add_ln59_2_fu_393_p2 = ($signed(sext_ln59_fu_390_p1) + $signed(add_ln59_1_fu_381_p2));

assign add_ln59_fu_363_p2 = (zext_ln59_1_fu_360_p1 + zext_ln59_fu_356_p1);

assign add_ln60_1_fu_414_p2 = (zext_ln60_fu_410_p1 + add_ln59_1_fu_381_p2);

assign add_ln60_fu_430_p2 = (11'd1 + count1_2_reg_186);

assign and_ln62_fu_318_p2 = (mode & icmp_ln62_fu_312_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran4to5_state2 = ((1'd1 == and_ln62_fu_318_p2) | (icmp_ln54_fu_222_p2 == 1'd1));
end

assign count1_fu_441_p2 = (11'd2 + count1_2_reg_186);

assign empty_fu_218_p1 = start[10:0];

assign i_fu_234_p2 = (3'd1 + ap_phi_mux_i_0_phi_fu_157_p4);

assign icmp_ln54_fu_222_p2 = ((indvar_flatten17_reg_142 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_240_p2 = ((indvar_flatten_reg_164 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_312_p2 = ((count2_reg_196 == 8'd110) ? 1'b1 : 1'b0);

assign j_fu_290_p2 = (3'd1 + select_ln59_fu_246_p3);

assign k_fu_323_p2 = ($signed(select_ln59_3_fu_296_p3) + $signed(4'd14));

assign key_stream_address0 = zext_ln59_4_fu_425_p1;

assign key_stream_address1 = zext_ln60_1_fu_436_p1;

assign key_stream_d0 = state_matrix_q0;

assign key_stream_d1 = state_matrix_q1;

assign or_ln59_fu_284_p2 = (xor_ln56_fu_278_p2 | icmp_ln55_fu_240_p2);

assign or_ln60_fu_404_p2 = (trunc_ln56_fu_387_p1 | 3'd1);

assign p_shl_cast_fu_373_p3 = {{add_ln59_fu_363_p2}, {3'd0}};

assign select_ln55_fu_335_p3 = ((icmp_ln55_fu_240_p2[0:0] === 1'b1) ? 6'd1 : add_ln55_1_fu_329_p2);

assign select_ln59_1_fu_254_p3 = ((icmp_ln55_fu_240_p2[0:0] === 1'b1) ? 4'd6 : k_0_reg_207);

assign select_ln59_2_fu_262_p3 = ((icmp_ln55_fu_240_p2[0:0] === 1'b1) ? i_fu_234_p2 : ap_phi_mux_i_0_phi_fu_157_p4);

assign select_ln59_3_fu_296_p3 = ((or_ln59_fu_284_p2[0:0] === 1'b1) ? select_ln59_1_fu_254_p3 : 4'd6);

assign select_ln59_4_fu_304_p3 = ((or_ln59_fu_284_p2[0:0] === 1'b1) ? select_ln59_fu_246_p3 : j_fu_290_p2);

assign select_ln59_fu_246_p3 = ((icmp_ln55_fu_240_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_j_0_phi_fu_179_p4);

assign sext_ln59_fu_390_p1 = select_ln59_3_reg_472;

assign state_matrix_address0 = zext_ln59_3_fu_399_p1;

assign state_matrix_address1 = zext_ln60_2_fu_420_p1;

assign tmp_1_fu_270_p3 = k_0_reg_207[32'd3];

assign tmp_s_fu_349_p3 = {{select_ln59_2_reg_466}, {2'd0}};

assign trunc_ln56_fu_387_p1 = select_ln59_3_reg_472[2:0];

assign xor_ln56_fu_278_p2 = (tmp_1_fu_270_p3 ^ 1'd1);

assign zext_ln59_1_fu_360_p1 = select_ln59_4_reg_478;

assign zext_ln59_2_fu_369_p1 = add_ln59_fu_363_p2;

assign zext_ln59_3_fu_399_p1 = add_ln59_2_fu_393_p2;

assign zext_ln59_4_fu_425_p1 = count1_2_reg_186;

assign zext_ln59_fu_356_p1 = tmp_s_fu_349_p3;

assign zext_ln60_1_fu_436_p1 = add_ln60_fu_430_p2;

assign zext_ln60_2_fu_420_p1 = add_ln60_1_fu_414_p2;

assign zext_ln60_fu_410_p1 = or_ln60_fu_404_p2;

endmodule //split_2_hw

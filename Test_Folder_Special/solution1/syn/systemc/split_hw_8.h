// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _split_hw_8_HH_
#define _split_hw_8_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "split_hw_8_str.h"

namespace ap_rtl {

struct split_hw_8 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > key_address0;
    sc_out< sc_logic > key_ce0;
    sc_in< sc_lv<8> > key_q0;
    sc_out< sc_lv<6> > key_address1;
    sc_out< sc_logic > key_ce1;
    sc_in< sc_lv<8> > key_q1;
    sc_out< sc_lv<6> > new_arr_address0;
    sc_out< sc_logic > new_arr_ce0;
    sc_out< sc_logic > new_arr_we0;
    sc_out< sc_lv<8> > new_arr_d0;


    // Module declarations
    split_hw_8(sc_module_name name);
    SC_HAS_PROCESS(split_hw_8);

    ~split_hw_8();

    sc_trace_file* mVcdFile;

    split_hw_8_str* str_U;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > count3_0_reg_157;
    sc_signal< sc_lv<7> > count2_0_reg_169;
    sc_signal< sc_lv<3> > j_0_reg_178;
    sc_signal< sc_lv<4> > j1_0_reg_189;
    sc_signal< sc_lv<1> > icmp_ln32_fu_200_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > i_fu_206_p2;
    sc_signal< sc_lv<4> > i_reg_342;
    sc_signal< sc_lv<7> > zext_ln34_fu_222_p1;
    sc_signal< sc_lv<1> > icmp_ln35_fu_226_p2;
    sc_signal< sc_lv<1> > icmp_ln35_reg_352;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > j_fu_232_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<7> > count2_1_fu_258_p2;
    sc_signal< sc_lv<4> > count3_fu_284_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<8> > zext_ln42_fu_298_p1;
    sc_signal< sc_lv<8> > zext_ln42_reg_381;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln42_fu_302_p2;
    sc_signal< sc_lv<1> > icmp_ln42_reg_386;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<4> > j_1_fu_308_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<8> > add_ln44_fu_323_p2;
    sc_signal< sc_lv<8> > add_ln44_reg_395;
    sc_signal< sc_lv<7> > count_fu_332_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state6;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<3> > str_address0;
    sc_signal< sc_logic > str_ce0;
    sc_signal< sc_logic > str_we0;
    sc_signal< sc_lv<8> > str_q0;
    sc_signal< sc_lv<3> > str_address1;
    sc_signal< sc_logic > str_ce1;
    sc_signal< sc_logic > str_we1;
    sc_signal< sc_lv<7> > count_0_reg_133;
    sc_signal< sc_lv<4> > i_0_reg_145;
    sc_signal< sc_lv<64> > sext_ln37_fu_242_p1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > sext_ln38_fu_253_p1;
    sc_signal< sc_lv<64> > zext_ln37_fu_268_p1;
    sc_signal< sc_lv<64> > zext_ln38_fu_279_p1;
    sc_signal< sc_lv<64> > zext_ln44_fu_314_p1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<64> > zext_ln44_2_fu_328_p1;
    sc_signal< sc_lv<6> > trunc_ln32_fu_212_p1;
    sc_signal< sc_lv<6> > count2_fu_216_p2;
    sc_signal< sc_lv<8> > sext_ln35_fu_238_p1;
    sc_signal< sc_lv<8> > or_ln38_1_fu_247_p2;
    sc_signal< sc_lv<3> > trunc_ln35_fu_264_p1;
    sc_signal< sc_lv<3> > or_ln38_fu_273_p2;
    sc_signal< sc_lv<7> > tmp_s_fu_290_p3;
    sc_signal< sc_lv<8> > zext_ln44_1_fu_319_p1;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_pp1_stage0;
    static const sc_lv<6> ap_ST_fsm_state8;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<6> ap_const_lv6_6;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<7> ap_const_lv7_7E;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<7> ap_const_lv7_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln44_fu_323_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state6_pp1_stage0_iter0();
    void thread_ap_block_state7_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_condition_pp1_exit_iter0_state6();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_ready();
    void thread_count2_1_fu_258_p2();
    void thread_count2_fu_216_p2();
    void thread_count3_fu_284_p2();
    void thread_count_fu_332_p2();
    void thread_i_fu_206_p2();
    void thread_icmp_ln32_fu_200_p2();
    void thread_icmp_ln35_fu_226_p2();
    void thread_icmp_ln42_fu_302_p2();
    void thread_j_1_fu_308_p2();
    void thread_j_fu_232_p2();
    void thread_key_address0();
    void thread_key_address1();
    void thread_key_ce0();
    void thread_key_ce1();
    void thread_new_arr_address0();
    void thread_new_arr_ce0();
    void thread_new_arr_d0();
    void thread_new_arr_we0();
    void thread_or_ln38_1_fu_247_p2();
    void thread_or_ln38_fu_273_p2();
    void thread_sext_ln35_fu_238_p1();
    void thread_sext_ln37_fu_242_p1();
    void thread_sext_ln38_fu_253_p1();
    void thread_str_address0();
    void thread_str_address1();
    void thread_str_ce0();
    void thread_str_ce1();
    void thread_str_we0();
    void thread_str_we1();
    void thread_tmp_s_fu_290_p3();
    void thread_trunc_ln32_fu_212_p1();
    void thread_trunc_ln35_fu_264_p1();
    void thread_zext_ln34_fu_222_p1();
    void thread_zext_ln37_fu_268_p1();
    void thread_zext_ln38_fu_279_p1();
    void thread_zext_ln42_fu_298_p1();
    void thread_zext_ln44_1_fu_319_p1();
    void thread_zext_ln44_2_fu_328_p1();
    void thread_zext_ln44_fu_314_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

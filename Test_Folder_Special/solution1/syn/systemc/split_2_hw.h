// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _split_2_hw_HH_
#define _split_2_hw_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct split_2_hw : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > state_matrix_address0;
    sc_out< sc_logic > state_matrix_ce0;
    sc_in< sc_lv<8> > state_matrix_q0;
    sc_out< sc_lv<8> > state_matrix_address1;
    sc_out< sc_logic > state_matrix_ce1;
    sc_in< sc_lv<8> > state_matrix_q1;
    sc_out< sc_lv<10> > key_stream_address0;
    sc_out< sc_logic > key_stream_ce0;
    sc_out< sc_logic > key_stream_we0;
    sc_out< sc_lv<8> > key_stream_d0;
    sc_out< sc_lv<10> > key_stream_address1;
    sc_out< sc_logic > key_stream_ce1;
    sc_out< sc_logic > key_stream_we1;
    sc_out< sc_lv<8> > key_stream_d1;
    sc_in< sc_lv<12> > start;
    sc_in< sc_lv<1> > mode;


    // Module declarations
    split_2_hw(sc_module_name name);
    SC_HAS_PROCESS(split_2_hw);

    ~split_2_hw();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > indvar_flatten17_reg_142;
    sc_signal< sc_lv<3> > i_0_reg_153;
    sc_signal< sc_lv<6> > indvar_flatten_reg_164;
    sc_signal< sc_lv<3> > j_0_reg_175;
    sc_signal< sc_lv<11> > count1_2_reg_186;
    sc_signal< sc_lv<8> > count2_reg_196;
    sc_signal< sc_lv<4> > k_0_reg_207;
    sc_signal< sc_lv<11> > empty_fu_218_p1;
    sc_signal< sc_lv<1> > icmp_ln54_fu_222_p2;
    sc_signal< sc_lv<1> > icmp_ln54_reg_457;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln54_reg_457_pp0_iter1_reg;
    sc_signal< sc_lv<7> > add_ln54_fu_228_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<3> > select_ln59_2_fu_262_p3;
    sc_signal< sc_lv<3> > select_ln59_2_reg_466;
    sc_signal< sc_lv<4> > select_ln59_3_fu_296_p3;
    sc_signal< sc_lv<4> > select_ln59_3_reg_472;
    sc_signal< sc_lv<3> > select_ln59_4_fu_304_p3;
    sc_signal< sc_lv<3> > select_ln59_4_reg_478;
    sc_signal< sc_lv<1> > and_ln62_fu_318_p2;
    sc_signal< sc_lv<1> > and_ln62_reg_484;
    sc_signal< sc_lv<1> > and_ln62_reg_484_pp0_iter1_reg;
    sc_signal< sc_lv<4> > k_fu_323_p2;
    sc_signal< sc_lv<6> > select_ln55_fu_335_p3;
    sc_signal< sc_lv<8> > add_ln56_fu_343_p2;
    sc_signal< sc_lv<11> > count1_fu_441_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_predicate_tran4to5_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<3> > ap_phi_mux_i_0_phi_fu_157_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<3> > ap_phi_mux_j_0_phi_fu_179_p4;
    sc_signal< sc_lv<64> > zext_ln59_3_fu_399_p1;
    sc_signal< sc_lv<64> > zext_ln60_2_fu_420_p1;
    sc_signal< sc_lv<64> > zext_ln59_4_fu_425_p1;
    sc_signal< sc_lv<64> > zext_ln60_1_fu_436_p1;
    sc_signal< sc_lv<1> > icmp_ln55_fu_240_p2;
    sc_signal< sc_lv<3> > i_fu_234_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_270_p3;
    sc_signal< sc_lv<1> > xor_ln56_fu_278_p2;
    sc_signal< sc_lv<3> > select_ln59_fu_246_p3;
    sc_signal< sc_lv<1> > or_ln59_fu_284_p2;
    sc_signal< sc_lv<4> > select_ln59_1_fu_254_p3;
    sc_signal< sc_lv<3> > j_fu_290_p2;
    sc_signal< sc_lv<1> > icmp_ln62_fu_312_p2;
    sc_signal< sc_lv<6> > add_ln55_1_fu_329_p2;
    sc_signal< sc_lv<5> > tmp_s_fu_349_p3;
    sc_signal< sc_lv<6> > zext_ln59_1_fu_360_p1;
    sc_signal< sc_lv<6> > zext_ln59_fu_356_p1;
    sc_signal< sc_lv<6> > add_ln59_fu_363_p2;
    sc_signal< sc_lv<9> > p_shl_cast_fu_373_p3;
    sc_signal< sc_lv<9> > zext_ln59_2_fu_369_p1;
    sc_signal< sc_lv<9> > sext_ln59_fu_390_p1;
    sc_signal< sc_lv<9> > add_ln59_1_fu_381_p2;
    sc_signal< sc_lv<9> > add_ln59_2_fu_393_p2;
    sc_signal< sc_lv<3> > trunc_ln56_fu_387_p1;
    sc_signal< sc_lv<3> > or_ln60_fu_404_p2;
    sc_signal< sc_lv<9> > zext_ln60_fu_410_p1;
    sc_signal< sc_lv<9> > add_ln60_1_fu_414_p2;
    sc_signal< sc_lv<11> > add_ln60_fu_430_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<6> ap_const_lv6_10;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_6E;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<11> ap_const_lv11_2;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln54_fu_228_p2();
    void thread_add_ln55_1_fu_329_p2();
    void thread_add_ln56_fu_343_p2();
    void thread_add_ln59_1_fu_381_p2();
    void thread_add_ln59_2_fu_393_p2();
    void thread_add_ln59_fu_363_p2();
    void thread_add_ln60_1_fu_414_p2();
    void thread_add_ln60_fu_430_p2();
    void thread_and_ln62_fu_318_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_157_p4();
    void thread_ap_phi_mux_j_0_phi_fu_179_p4();
    void thread_ap_predicate_tran4to5_state2();
    void thread_ap_ready();
    void thread_count1_fu_441_p2();
    void thread_empty_fu_218_p1();
    void thread_i_fu_234_p2();
    void thread_icmp_ln54_fu_222_p2();
    void thread_icmp_ln55_fu_240_p2();
    void thread_icmp_ln62_fu_312_p2();
    void thread_j_fu_290_p2();
    void thread_k_fu_323_p2();
    void thread_key_stream_address0();
    void thread_key_stream_address1();
    void thread_key_stream_ce0();
    void thread_key_stream_ce1();
    void thread_key_stream_d0();
    void thread_key_stream_d1();
    void thread_key_stream_we0();
    void thread_key_stream_we1();
    void thread_or_ln59_fu_284_p2();
    void thread_or_ln60_fu_404_p2();
    void thread_p_shl_cast_fu_373_p3();
    void thread_select_ln55_fu_335_p3();
    void thread_select_ln59_1_fu_254_p3();
    void thread_select_ln59_2_fu_262_p3();
    void thread_select_ln59_3_fu_296_p3();
    void thread_select_ln59_4_fu_304_p3();
    void thread_select_ln59_fu_246_p3();
    void thread_sext_ln59_fu_390_p1();
    void thread_state_matrix_address0();
    void thread_state_matrix_address1();
    void thread_state_matrix_ce0();
    void thread_state_matrix_ce1();
    void thread_tmp_1_fu_270_p3();
    void thread_tmp_s_fu_349_p3();
    void thread_trunc_ln56_fu_387_p1();
    void thread_xor_ln56_fu_278_p2();
    void thread_zext_ln59_1_fu_360_p1();
    void thread_zext_ln59_2_fu_369_p1();
    void thread_zext_ln59_3_fu_399_p1();
    void thread_zext_ln59_4_fu_425_p1();
    void thread_zext_ln59_fu_356_p1();
    void thread_zext_ln60_1_fu_436_p1();
    void thread_zext_ln60_2_fu_420_p1();
    void thread_zext_ln60_fu_410_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

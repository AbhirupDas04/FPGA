-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity split_2_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_matrix_ce0 : OUT STD_LOGIC;
    state_matrix_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_matrix_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_matrix_ce1 : OUT STD_LOGIC;
    state_matrix_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_stream_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    key_stream_ce0 : OUT STD_LOGIC;
    key_stream_we0 : OUT STD_LOGIC;
    key_stream_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    key_stream_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    key_stream_ce1 : OUT STD_LOGIC;
    key_stream_we1 : OUT STD_LOGIC;
    key_stream_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    start : IN STD_LOGIC_VECTOR (11 downto 0);
    mode : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of split_2_hw is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_6E : STD_LOGIC_VECTOR (7 downto 0) := "01101110";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten17_reg_142 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_164 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_175 : STD_LOGIC_VECTOR (2 downto 0);
    signal count1_2_reg_186 : STD_LOGIC_VECTOR (10 downto 0);
    signal count2_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_0_reg_207 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_218_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln54_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln54_reg_457_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_228_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln59_2_fu_262_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln59_2_reg_466 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln59_3_fu_296_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln59_3_reg_472 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln59_4_fu_304_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln59_4_reg_478 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln62_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln62_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln62_reg_484_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_323_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln55_fu_335_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal count1_fu_441_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran4to5_state2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_157_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_phi_fu_179_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln59_3_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_2_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_4_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_1_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln55_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_234_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_270_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln59_fu_246_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln59_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln59_1_fu_254_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_290_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln62_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_1_fu_329_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_349_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln59_1_fu_360_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln59_fu_356_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln59_fu_363_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_373_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln59_2_fu_369_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln59_fu_390_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln59_1_fu_381_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln59_2_fu_393_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln56_fu_387_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln60_fu_404_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln60_fu_410_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln60_1_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln60_fu_430_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_predicate_tran4to5_state2 = ap_const_boolean_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count1_2_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln62_reg_484_pp0_iter1_reg) and (icmp_ln54_reg_457_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                count1_2_reg_186 <= count1_fu_441_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                count1_2_reg_186 <= empty_fu_218_p1;
            end if; 
        end if;
    end process;

    count2_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln62_fu_318_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                count2_reg_196 <= add_ln56_fu_343_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                count2_reg_196 <= ap_const_lv8_2;
            end if; 
        end if;
    end process;

    i_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln62_reg_484) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_457 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_153 <= select_ln59_2_reg_466;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_153 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln62_fu_318_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten17_reg_142 <= add_ln54_fu_228_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten17_reg_142 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln62_fu_318_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_164 <= select_ln55_fu_335_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_164 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln62_reg_484) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_457 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_175 <= select_ln59_4_reg_478;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_175 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln62_fu_318_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_0_reg_207 <= k_fu_323_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_207 <= ap_const_lv4_6;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln62_reg_484 <= and_ln62_fu_318_p2;
                select_ln59_3_reg_472 <= select_ln59_3_fu_296_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln62_reg_484_pp0_iter1_reg <= and_ln62_reg_484;
                icmp_ln54_reg_457 <= icmp_ln54_fu_222_p2;
                icmp_ln54_reg_457_pp0_iter1_reg <= icmp_ln54_reg_457;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln59_2_reg_466 <= select_ln59_2_fu_262_p3;
                select_ln59_4_reg_478 <= select_ln59_4_fu_304_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln54_fu_228_p2 <= std_logic_vector(unsigned(indvar_flatten17_reg_142) + unsigned(ap_const_lv7_1));
    add_ln55_1_fu_329_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_164) + unsigned(ap_const_lv6_1));
    add_ln56_fu_343_p2 <= std_logic_vector(unsigned(count2_reg_196) + unsigned(ap_const_lv8_2));
    add_ln59_1_fu_381_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_373_p3) + unsigned(zext_ln59_2_fu_369_p1));
    add_ln59_2_fu_393_p2 <= std_logic_vector(signed(sext_ln59_fu_390_p1) + signed(add_ln59_1_fu_381_p2));
    add_ln59_fu_363_p2 <= std_logic_vector(unsigned(zext_ln59_1_fu_360_p1) + unsigned(zext_ln59_fu_356_p1));
    add_ln60_1_fu_414_p2 <= std_logic_vector(unsigned(zext_ln60_fu_410_p1) + unsigned(add_ln59_1_fu_381_p2));
    add_ln60_fu_430_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(count1_2_reg_186));
    and_ln62_fu_318_p2 <= (mode and icmp_ln62_fu_312_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_157_p4_assign_proc : process(i_0_reg_153, icmp_ln54_reg_457, ap_CS_fsm_pp0_stage0, select_ln59_2_reg_466, and_ln62_reg_484, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_0 = and_ln62_reg_484) and (icmp_ln54_reg_457 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_157_p4 <= select_ln59_2_reg_466;
        else 
            ap_phi_mux_i_0_phi_fu_157_p4 <= i_0_reg_153;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_179_p4_assign_proc : process(j_0_reg_175, icmp_ln54_reg_457, ap_CS_fsm_pp0_stage0, select_ln59_4_reg_478, and_ln62_reg_484, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_0 = and_ln62_reg_484) and (icmp_ln54_reg_457 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_179_p4 <= select_ln59_4_reg_478;
        else 
            ap_phi_mux_j_0_phi_fu_179_p4 <= j_0_reg_175;
        end if; 
    end process;


    ap_predicate_tran4to5_state2_assign_proc : process(icmp_ln54_fu_222_p2, and_ln62_fu_318_p2)
    begin
                ap_predicate_tran4to5_state2 <= ((ap_const_lv1_1 = and_ln62_fu_318_p2) or (icmp_ln54_fu_222_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count1_fu_441_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(count1_2_reg_186));
    empty_fu_218_p1 <= start(11 - 1 downto 0);
    i_fu_234_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_i_0_phi_fu_157_p4));
    icmp_ln54_fu_222_p2 <= "1" when (indvar_flatten17_reg_142 = ap_const_lv7_40) else "0";
    icmp_ln55_fu_240_p2 <= "1" when (indvar_flatten_reg_164 = ap_const_lv6_10) else "0";
    icmp_ln62_fu_312_p2 <= "1" when (count2_reg_196 = ap_const_lv8_6E) else "0";
    j_fu_290_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln59_fu_246_p3));
    k_fu_323_p2 <= std_logic_vector(signed(select_ln59_3_fu_296_p3) + signed(ap_const_lv4_E));
    key_stream_address0 <= zext_ln59_4_fu_425_p1(10 - 1 downto 0);
    key_stream_address1 <= zext_ln60_1_fu_436_p1(10 - 1 downto 0);

    key_stream_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            key_stream_ce0 <= ap_const_logic_1;
        else 
            key_stream_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_stream_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            key_stream_ce1 <= ap_const_logic_1;
        else 
            key_stream_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    key_stream_d0 <= state_matrix_q0;
    key_stream_d1 <= state_matrix_q1;

    key_stream_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln54_reg_457_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln54_reg_457_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            key_stream_we0 <= ap_const_logic_1;
        else 
            key_stream_we0 <= ap_const_logic_0;
        end if; 
    end process;


    key_stream_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln54_reg_457_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln54_reg_457_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            key_stream_we1 <= ap_const_logic_1;
        else 
            key_stream_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln59_fu_284_p2 <= (xor_ln56_fu_278_p2 or icmp_ln55_fu_240_p2);
    or_ln60_fu_404_p2 <= (trunc_ln56_fu_387_p1 or ap_const_lv3_1);
    p_shl_cast_fu_373_p3 <= (add_ln59_fu_363_p2 & ap_const_lv3_0);
    select_ln55_fu_335_p3 <= 
        ap_const_lv6_1 when (icmp_ln55_fu_240_p2(0) = '1') else 
        add_ln55_1_fu_329_p2;
    select_ln59_1_fu_254_p3 <= 
        ap_const_lv4_6 when (icmp_ln55_fu_240_p2(0) = '1') else 
        k_0_reg_207;
    select_ln59_2_fu_262_p3 <= 
        i_fu_234_p2 when (icmp_ln55_fu_240_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_157_p4;
    select_ln59_3_fu_296_p3 <= 
        select_ln59_1_fu_254_p3 when (or_ln59_fu_284_p2(0) = '1') else 
        ap_const_lv4_6;
    select_ln59_4_fu_304_p3 <= 
        select_ln59_fu_246_p3 when (or_ln59_fu_284_p2(0) = '1') else 
        j_fu_290_p2;
    select_ln59_fu_246_p3 <= 
        ap_const_lv3_0 when (icmp_ln55_fu_240_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_179_p4;
        sext_ln59_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln59_3_reg_472),9));

    state_matrix_address0 <= zext_ln59_3_fu_399_p1(8 - 1 downto 0);
    state_matrix_address1 <= zext_ln60_2_fu_420_p1(8 - 1 downto 0);

    state_matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            state_matrix_ce0 <= ap_const_logic_1;
        else 
            state_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_matrix_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            state_matrix_ce1 <= ap_const_logic_1;
        else 
            state_matrix_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_270_p3 <= k_0_reg_207(3 downto 3);
    tmp_s_fu_349_p3 <= (select_ln59_2_reg_466 & ap_const_lv2_0);
    trunc_ln56_fu_387_p1 <= select_ln59_3_reg_472(3 - 1 downto 0);
    xor_ln56_fu_278_p2 <= (tmp_1_fu_270_p3 xor ap_const_lv1_1);
    zext_ln59_1_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln59_4_reg_478),6));
    zext_ln59_2_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln59_fu_363_p2),9));
    zext_ln59_3_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln59_2_fu_393_p2),64));
    zext_ln59_4_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count1_2_reg_186),64));
    zext_ln59_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_349_p3),6));
    zext_ln60_1_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_fu_430_p2),64));
    zext_ln60_2_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_1_fu_414_p2),64));
    zext_ln60_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln60_fu_404_p2),9));
end behav;

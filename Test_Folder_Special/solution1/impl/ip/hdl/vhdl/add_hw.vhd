-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_matrix_ce0 : OUT STD_LOGIC;
    state_matrix_we0 : OUT STD_LOGIC;
    state_matrix_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_matrix_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    index1 : IN STD_LOGIC_VECTOR (5 downto 0);
    index2 : IN STD_LOGIC_VECTOR (4 downto 0);
    arr1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    arr1_ce0 : OUT STD_LOGIC;
    arr1_we0 : OUT STD_LOGIC;
    arr1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arr1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    arr2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    arr2_ce0 : OUT STD_LOGIC;
    arr2_we0 : OUT STD_LOGIC;
    arr2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arr2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    arr3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    arr3_ce0 : OUT STD_LOGIC;
    arr3_we0 : OUT STD_LOGIC;
    arr3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arr3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    arr3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    arr3_ce1 : OUT STD_LOGIC;
    arr3_we1 : OUT STD_LOGIC;
    arr3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arr3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    arr4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    arr4_ce0 : OUT STD_LOGIC;
    arr4_we0 : OUT STD_LOGIC;
    arr4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arr4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    arr4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    arr4_ce1 : OUT STD_LOGIC;
    arr4_we1 : OUT STD_LOGIC;
    arr4_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of add_hw is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_31 : STD_LOGIC_VECTOR (7 downto 0) := "00110001";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv7_31 : STD_LOGIC_VECTOR (6 downto 0) := "0110001";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv7_33 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_const_lv7_65 : STD_LOGIC_VECTOR (6 downto 0) := "1100101";
    constant ap_const_lv7_66 : STD_LOGIC_VECTOR (6 downto 0) := "1100110";
    constant ap_const_lv7_34 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_const_lv7_35 : STD_LOGIC_VECTOR (6 downto 0) := "0110101";
    constant ap_const_lv7_36 : STD_LOGIC_VECTOR (6 downto 0) := "0110110";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv7_38 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_const_lv7_39 : STD_LOGIC_VECTOR (6 downto 0) := "0111001";
    constant ap_const_lv7_61 : STD_LOGIC_VECTOR (6 downto 0) := "1100001";
    constant ap_const_lv7_62 : STD_LOGIC_VECTOR (6 downto 0) := "1100010";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_286 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_0_reg_298 : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_0_reg_310 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_i_reg_321 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i_reg_321_pp3_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state12_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal i3_0_reg_333 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln264_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln264_reg_850 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln262_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln262_reg_856 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_414_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_860 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln269_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln269_reg_870 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln267_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_29_fu_470_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_29_reg_879 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_17_fu_495_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal arr3_addr_reg_900 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_31_fu_509_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln114_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_919_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_30_fu_560_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_30_reg_923 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal shl_ln_fu_570_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_928 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_block_state13_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal grp_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_970 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal icmp_ln119_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln118_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln118_reg_986 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln118_13_fu_668_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln118_13_reg_992 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln290_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln290_reg_997 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state17_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal i_32_fu_821_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal add_ln292_fu_836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln292_reg_1006 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_convert_hex_to_binar_fu_344_ap_ready : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_344_ap_done : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_352_ap_ready : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_352_ap_done : STD_LOGIC;
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state12 : STD_LOGIC;
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state17 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal grp_convert_hex_to_binar_fu_344_ap_start : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_344_ap_idle : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_344_hex_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convert_hex_to_binar_fu_344_hex_ce0 : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_344_bin_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convert_hex_to_binar_fu_344_bin_ce0 : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_344_bin_we0 : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_344_bin_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convert_hex_to_binar_fu_344_bin_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convert_hex_to_binar_fu_344_bin_ce1 : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_344_bin_we1 : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_344_bin_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convert_hex_to_binar_fu_352_ap_start : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_352_ap_idle : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_352_hex_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convert_hex_to_binar_fu_352_hex_ce0 : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_352_bin_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convert_hex_to_binar_fu_352_bin_ce0 : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_352_bin_we0 : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_352_bin_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convert_hex_to_binar_fu_352_bin_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convert_hex_to_binar_fu_352_bin_ce1 : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_352_bin_we1 : STD_LOGIC;
    signal grp_convert_hex_to_binar_fu_352_bin_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_0_phi_fu_290_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i1_0_phi_fu_302_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_i_phi_fu_325_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal grp_convert_hex_to_binar_fu_344_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_convert_hex_to_binar_fu_352_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln264_4_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln264_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_4_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln279_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln116_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln117_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal zext_ln119_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_3_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln292_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal zext_ln292_2_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_0_fu_132 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum1_fu_548_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln118_3_fu_810_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln264_fu_382_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_390_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln264_2_fu_398_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln264_1_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln264_3_fu_420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln264_1_fu_424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln269_fu_439_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_fu_446_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln269_2_fu_454_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln269_1_fu_442_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln269_3_fu_476_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln269_1_fu_480_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln279_fu_518_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_526_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln279_1_fu_522_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln279_fu_518_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln279_fu_538_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln279_2_fu_534_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln279_3_fu_544_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln116_fu_566_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln117_fu_583_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln118_fu_594_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln119_fu_604_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln117_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln118_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln119_fu_614_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln155_fu_630_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln118_13_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln123_fu_622_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln118_fu_648_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln117_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_5_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln118_14_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln129_fu_681_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln118_15_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln133_fu_688_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln118_14_fu_731_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln116_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_6_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln118_16_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln141_fu_695_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln118_15_fu_743_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln118_17_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln145_fu_702_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln118_16_fu_766_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln117_3_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln117_3_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln118_18_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln151_fu_709_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln118_17_fu_779_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln118_18_fu_802_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln292_1_fu_832_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component convert_hex_to_binar IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        hex_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        hex_ce0 : OUT STD_LOGIC;
        hex_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bin_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bin_ce0 : OUT STD_LOGIC;
        bin_we0 : OUT STD_LOGIC;
        bin_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bin_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bin_ce1 : OUT STD_LOGIC;
        bin_we1 : OUT STD_LOGIC;
        bin_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_convert_hex_to_binar_fu_344 : component convert_hex_to_binar
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convert_hex_to_binar_fu_344_ap_start,
        ap_done => grp_convert_hex_to_binar_fu_344_ap_done,
        ap_idle => grp_convert_hex_to_binar_fu_344_ap_idle,
        ap_ready => grp_convert_hex_to_binar_fu_344_ap_ready,
        hex_address0 => grp_convert_hex_to_binar_fu_344_hex_address0,
        hex_ce0 => grp_convert_hex_to_binar_fu_344_hex_ce0,
        hex_q0 => arr1_q0,
        bin_address0 => grp_convert_hex_to_binar_fu_344_bin_address0,
        bin_ce0 => grp_convert_hex_to_binar_fu_344_bin_ce0,
        bin_we0 => grp_convert_hex_to_binar_fu_344_bin_we0,
        bin_d0 => grp_convert_hex_to_binar_fu_344_bin_d0,
        bin_address1 => grp_convert_hex_to_binar_fu_344_bin_address1,
        bin_ce1 => grp_convert_hex_to_binar_fu_344_bin_ce1,
        bin_we1 => grp_convert_hex_to_binar_fu_344_bin_we1,
        bin_d1 => grp_convert_hex_to_binar_fu_344_bin_d1);

    grp_convert_hex_to_binar_fu_352 : component convert_hex_to_binar
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convert_hex_to_binar_fu_352_ap_start,
        ap_done => grp_convert_hex_to_binar_fu_352_ap_done,
        ap_idle => grp_convert_hex_to_binar_fu_352_ap_idle,
        ap_ready => grp_convert_hex_to_binar_fu_352_ap_ready,
        hex_address0 => grp_convert_hex_to_binar_fu_352_hex_address0,
        hex_ce0 => grp_convert_hex_to_binar_fu_352_hex_ce0,
        hex_q0 => arr2_q0,
        bin_address0 => grp_convert_hex_to_binar_fu_352_bin_address0,
        bin_ce0 => grp_convert_hex_to_binar_fu_352_bin_ce0,
        bin_we0 => grp_convert_hex_to_binar_fu_352_bin_we0,
        bin_d0 => grp_convert_hex_to_binar_fu_352_bin_d0,
        bin_address1 => grp_convert_hex_to_binar_fu_352_bin_address1,
        bin_ce1 => grp_convert_hex_to_binar_fu_352_bin_ce1,
        bin_we1 => grp_convert_hex_to_binar_fu_352_bin_we1,
        bin_d1 => grp_convert_hex_to_binar_fu_352_bin_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state12))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state17))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state17);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convert_hex_to_binar_fu_344_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convert_hex_to_binar_fu_344_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_convert_hex_to_binar_fu_344_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convert_hex_to_binar_fu_344_ap_ready = ap_const_logic_1)) then 
                    grp_convert_hex_to_binar_fu_344_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convert_hex_to_binar_fu_352_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convert_hex_to_binar_fu_352_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_convert_hex_to_binar_fu_352_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convert_hex_to_binar_fu_352_ap_ready = ap_const_logic_1)) then 
                    grp_convert_hex_to_binar_fu_352_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    carry_0_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((sum1_fu_548_p2 = ap_const_lv10_2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((sum1_fu_548_p2 = ap_const_lv10_3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
                carry_0_fu_132(0) <= '1';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((sum1_fu_548_p2 = ap_const_lv10_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((sum1_fu_548_p2 = ap_const_lv10_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
                carry_0_fu_132(0) <= '0';
            end if; 
        end if;
    end process;

    i1_0_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_reg_298 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln267_reg_875 = ap_const_lv1_0))) then 
                i1_0_reg_298 <= i_29_reg_879;
            end if; 
        end if;
    end process;

    i2_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_17_fu_495_p3 = ap_const_lv1_0))) then 
                i2_0_reg_310 <= i_31_fu_509_p2;
            elsif (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i2_0_reg_310 <= ap_const_lv6_1F;
            end if; 
        end if;
    end process;

    i3_0_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i3_0_reg_333 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln290_fu_815_p2 = ap_const_lv1_0))) then 
                i3_0_reg_333 <= i_32_fu_821_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_i_reg_321 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln114_reg_919 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_0_i_reg_321 <= i_30_reg_923;
            end if; 
        end if;
    end process;

    i_0_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln262_reg_856 = ap_const_lv1_0))) then 
                i_0_reg_286 <= i_reg_860;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_286 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln264_reg_850 <= add_ln264_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln269_reg_870 <= add_ln269_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln290_fu_815_p2 = ap_const_lv1_0))) then
                add_ln292_reg_1006 <= add_ln292_fu_836_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_17_fu_495_p3 = ap_const_lv1_0))) then
                arr3_addr_reg_900 <= zext_ln279_fu_503_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                i_0_i_reg_321_pp3_iter1_reg <= i_0_i_reg_321;
                icmp_ln114_reg_919 <= icmp_ln114_fu_554_p2;
                icmp_ln114_reg_919_pp3_iter1_reg <= icmp_ln114_reg_919;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_29_reg_879 <= i_29_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                i_30_reg_923 <= i_30_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_860 <= i_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln114_reg_919 = ap_const_lv1_0))) then
                icmp_ln116_reg_944 <= grp_fu_370_p2;
                icmp_ln117_reg_952 <= grp_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln114_reg_919 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln118_reg_970 <= grp_fu_370_p2;
                icmp_ln119_reg_977 <= grp_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln262_reg_856 <= icmp_ln262_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln267_reg_875 <= icmp_ln267_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln290_reg_997 <= icmp_ln290_fu_815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_reg_919 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    select_ln118_13_reg_992(2 downto 0) <= select_ln118_13_fu_668_p3(2 downto 0);    select_ln118_13_reg_992(4) <= select_ln118_13_fu_668_p3(4);    select_ln118_13_reg_992(6) <= select_ln118_13_fu_668_p3(6);
                xor_ln118_reg_986 <= xor_ln118_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln114_fu_554_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    shl_ln_reg_928(4 downto 2) <= shl_ln_fu_570_p3(4 downto 2);
            end if;
        end if;
    end process;
    shl_ln_reg_928(1 downto 0) <= "00";
    select_ln118_13_reg_992(3) <= '0';
    select_ln118_13_reg_992(5) <= '1';
    carry_0_fu_132(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln262_fu_408_p2, ap_enable_reg_pp0_iter0, icmp_ln267_fu_464_p2, ap_enable_reg_pp1_iter0, tmp_17_fu_495_p3, ap_enable_reg_pp2_iter0, icmp_ln114_fu_554_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter1, icmp_ln290_fu_815_p2, ap_enable_reg_pp4_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_CS_fsm_state8, ap_block_state8_on_subcall_done, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp3_stage1_subdone, ap_block_pp4_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln262_fu_408_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln262_fu_408_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln267_fu_464_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln267_fu_464_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_17_fu_495_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_17_fu_495_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln114_fu_554_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln114_fu_554_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln290_fu_815_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln290_fu_815_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln264_1_fu_424_p2 <= std_logic_vector(unsigned(add_ln264_reg_850) + unsigned(zext_ln264_3_fu_420_p1));
    add_ln264_fu_402_p2 <= std_logic_vector(unsigned(zext_ln264_2_fu_398_p1) + unsigned(zext_ln264_1_fu_386_p1));
    add_ln269_1_fu_480_p2 <= std_logic_vector(unsigned(add_ln269_reg_870) + unsigned(zext_ln269_3_fu_476_p1));
    add_ln269_fu_458_p2 <= std_logic_vector(unsigned(zext_ln269_2_fu_454_p1) + unsigned(zext_ln269_1_fu_442_p1));
    add_ln279_fu_538_p2 <= std_logic_vector(signed(sext_ln279_1_fu_522_p1) + signed(sext_ln279_fu_518_p1));
    add_ln292_fu_836_p2 <= std_logic_vector(unsigned(add_ln264_reg_850) + unsigned(zext_ln292_1_fu_832_p1));
    and_ln117_5_fu_721_p2 <= (xor_ln117_fu_716_p2 and icmp_ln116_reg_944);
    and_ln117_6_fu_756_p2 <= (xor_ln116_fu_751_p2 and icmp_ln117_reg_952);
    and_ln117_fu_638_p2 <= (icmp_ln117_reg_952 and icmp_ln116_reg_944);
    and_ln118_13_fu_662_p2 <= (xor_ln118_fu_656_p2 and and_ln117_fu_638_p2);
    and_ln118_14_fu_726_p2 <= (icmp_ln118_reg_970 and and_ln117_5_fu_721_p2);
    and_ln118_15_fu_738_p2 <= (xor_ln118_reg_986 and and_ln117_5_fu_721_p2);
    and_ln118_16_fu_761_p2 <= (icmp_ln118_reg_970 and and_ln117_6_fu_756_p2);
    and_ln118_17_fu_774_p2 <= (xor_ln118_reg_986 and and_ln117_6_fu_756_p2);
    and_ln118_18_fu_797_p2 <= (xor_ln117_3_fu_791_p2 and icmp_ln118_reg_970);
    and_ln118_fu_642_p2 <= (grp_fu_370_p2 and and_ln117_fu_638_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state16 <= ap_CS_fsm(10);
    ap_CS_fsm_state19 <= ap_CS_fsm(12);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_on_subcall_done_assign_proc : process(grp_convert_hex_to_binar_fu_344_ap_done, grp_convert_hex_to_binar_fu_352_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_convert_hex_to_binar_fu_352_ap_done = ap_const_logic_0) or (grp_convert_hex_to_binar_fu_344_ap_done = ap_const_logic_0));
    end process;

        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln262_fu_408_p2)
    begin
        if ((icmp_ln262_fu_408_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln267_fu_464_p2)
    begin
        if ((icmp_ln267_fu_464_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state9_assign_proc : process(tmp_17_fu_495_p3)
    begin
        if ((tmp_17_fu_495_p3 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state12_assign_proc : process(icmp_ln114_fu_554_p2)
    begin
        if ((icmp_ln114_fu_554_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state17_assign_proc : process(icmp_ln290_fu_815_p2)
    begin
        if ((icmp_ln290_fu_815_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_0_phi_fu_302_p4_assign_proc : process(i1_0_reg_298, icmp_ln267_reg_875, ap_CS_fsm_pp1_stage0, i_29_reg_879, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln267_reg_875 = ap_const_lv1_0))) then 
            ap_phi_mux_i1_0_phi_fu_302_p4 <= i_29_reg_879;
        else 
            ap_phi_mux_i1_0_phi_fu_302_p4 <= i1_0_reg_298;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_325_p4_assign_proc : process(i_0_i_reg_321, ap_CS_fsm_pp3_stage0, icmp_ln114_reg_919, i_30_reg_923, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln114_reg_919 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i_phi_fu_325_p4 <= i_30_reg_923;
        else 
            ap_phi_mux_i_0_i_phi_fu_325_p4 <= i_0_i_reg_321;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_290_p4_assign_proc : process(i_0_reg_286, icmp_ln262_reg_856, ap_CS_fsm_pp0_stage0, i_reg_860, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln262_reg_856 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_290_p4 <= i_reg_860;
        else 
            ap_phi_mux_i_0_phi_fu_290_p4 <= i_0_reg_286;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    arr1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_344_hex_address0, ap_block_pp0_stage0, zext_ln264_fu_434_p1, ap_block_pp3_stage1, zext_ln119_3_fu_676_p1, zext_ln292_fu_827_p1, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            arr1_address0 <= zext_ln292_fu_827_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
            arr1_address0 <= zext_ln119_3_fu_676_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr1_address0 <= zext_ln264_fu_434_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr1_address0 <= grp_convert_hex_to_binar_fu_344_hex_address0;
        else 
            arr1_address0 <= "XXX";
        end if; 
    end process;


    arr1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_344_hex_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            arr1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr1_ce0 <= grp_convert_hex_to_binar_fu_344_hex_ce0;
        else 
            arr1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr1_d0_assign_proc : process(state_matrix_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp3_stage1, zext_ln118_3_fu_810_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
            arr1_d0 <= zext_ln118_3_fu_810_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr1_d0 <= state_matrix_q0;
        else 
            arr1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    arr1_we0_assign_proc : process(icmp_ln262_reg_856, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln114_reg_919_pp3_iter1_reg, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_enable_reg_pp3_iter1, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (icmp_ln114_reg_919_pp3_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln262_reg_856 = ap_const_lv1_0)))) then 
            arr1_we0 <= ap_const_logic_1;
        else 
            arr1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arr2_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_352_hex_address0, ap_block_pp1_stage0, zext_ln269_fu_490_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            arr2_address0 <= zext_ln269_fu_490_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr2_address0 <= grp_convert_hex_to_binar_fu_352_hex_address0;
        else 
            arr2_address0 <= "XXX";
        end if; 
    end process;


    arr2_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_352_hex_ce0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            arr2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr2_ce0 <= grp_convert_hex_to_binar_fu_352_hex_ce0;
        else 
            arr2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr2_d0 <= state_matrix_q0;

    arr2_we0_assign_proc : process(icmp_ln267_reg_875, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln267_reg_875 = ap_const_lv1_0))) then 
            arr2_we0 <= ap_const_logic_1;
        else 
            arr2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arr3_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage1, ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_344_bin_address0, ap_block_pp3_stage0, zext_ln279_fu_503_p1, ap_block_pp2_stage0, zext_ln116_fu_578_p1, zext_ln118_fu_599_p1, ap_block_pp3_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            arr3_address0 <= zext_ln118_fu_599_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            arr3_address0 <= zext_ln116_fu_578_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            arr3_address0 <= zext_ln279_fu_503_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr3_address0 <= grp_convert_hex_to_binar_fu_344_bin_address0;
        else 
            arr3_address0 <= "XXXXX";
        end if; 
    end process;


    arr3_address1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp2_stage0, arr3_addr_reg_900, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage1, ap_CS_fsm_state8, ap_enable_reg_pp2_iter1, grp_convert_hex_to_binar_fu_344_bin_address1, ap_block_pp3_stage0, ap_block_pp2_stage0, zext_ln117_fu_589_p1, ap_block_pp3_stage1, zext_ln119_fu_609_p1, sum1_fu_548_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            arr3_address1 <= zext_ln119_fu_609_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            arr3_address1 <= zext_ln117_fu_589_p1(5 - 1 downto 0);
        elsif ((((sum1_fu_548_p2 = ap_const_lv10_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((sum1_fu_548_p2 = ap_const_lv10_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((sum1_fu_548_p2 = ap_const_lv10_2) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((sum1_fu_548_p2 = ap_const_lv10_3) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            arr3_address1 <= arr3_addr_reg_900;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr3_address1 <= grp_convert_hex_to_binar_fu_344_bin_address1;
        else 
            arr3_address1 <= "XXXXX";
        end if; 
    end process;


    arr3_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_344_bin_ce0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            arr3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr3_ce0 <= grp_convert_hex_to_binar_fu_344_bin_ce0;
        else 
            arr3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr3_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_state8, ap_enable_reg_pp2_iter1, grp_convert_hex_to_binar_fu_344_bin_ce1, sum1_fu_548_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((sum1_fu_548_p2 = ap_const_lv10_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((sum1_fu_548_p2 = ap_const_lv10_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((sum1_fu_548_p2 = ap_const_lv10_2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((sum1_fu_548_p2 = ap_const_lv10_3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            arr3_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr3_ce1 <= grp_convert_hex_to_binar_fu_344_bin_ce1;
        else 
            arr3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr3_d0 <= grp_convert_hex_to_binar_fu_344_bin_d0;

    arr3_d1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state8, ap_enable_reg_pp2_iter1, grp_convert_hex_to_binar_fu_344_bin_d1, ap_block_pp2_stage0, sum1_fu_548_p2)
    begin
        if ((((sum1_fu_548_p2 = ap_const_lv10_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((sum1_fu_548_p2 = ap_const_lv10_2) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            arr3_d1 <= ap_const_lv8_30;
        elsif ((((sum1_fu_548_p2 = ap_const_lv10_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((sum1_fu_548_p2 = ap_const_lv10_3) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            arr3_d1 <= ap_const_lv8_31;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr3_d1 <= grp_convert_hex_to_binar_fu_344_bin_d1;
        else 
            arr3_d1 <= "XXXXXXXX";
        end if; 
    end process;


    arr3_we0_assign_proc : process(ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_344_bin_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr3_we0 <= grp_convert_hex_to_binar_fu_344_bin_we0;
        else 
            arr3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arr3_we1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state8, ap_enable_reg_pp2_iter1, grp_convert_hex_to_binar_fu_344_bin_we1, sum1_fu_548_p2)
    begin
        if ((((sum1_fu_548_p2 = ap_const_lv10_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((sum1_fu_548_p2 = ap_const_lv10_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((sum1_fu_548_p2 = ap_const_lv10_2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((sum1_fu_548_p2 = ap_const_lv10_3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            arr3_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr3_we1 <= grp_convert_hex_to_binar_fu_344_bin_we1;
        else 
            arr3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    arr4_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_352_bin_address0, zext_ln279_fu_503_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            arr4_address0 <= zext_ln279_fu_503_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr4_address0 <= grp_convert_hex_to_binar_fu_352_bin_address0;
        else 
            arr4_address0 <= "XXXXX";
        end if; 
    end process;

    arr4_address1 <= grp_convert_hex_to_binar_fu_352_bin_address1;

    arr4_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_352_bin_ce0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            arr4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr4_ce0 <= grp_convert_hex_to_binar_fu_352_bin_ce0;
        else 
            arr4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr4_ce1_assign_proc : process(ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_352_bin_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr4_ce1 <= grp_convert_hex_to_binar_fu_352_bin_ce1;
        else 
            arr4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr4_d0 <= grp_convert_hex_to_binar_fu_352_bin_d0;
    arr4_d1 <= grp_convert_hex_to_binar_fu_352_bin_d1;

    arr4_we0_assign_proc : process(ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_352_bin_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr4_we0 <= grp_convert_hex_to_binar_fu_352_bin_we0;
        else 
            arr4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arr4_we1_assign_proc : process(ap_CS_fsm_state8, grp_convert_hex_to_binar_fu_352_bin_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr4_we1 <= grp_convert_hex_to_binar_fu_352_bin_we1;
        else 
            arr4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_convert_hex_to_binar_fu_344_ap_start <= grp_convert_hex_to_binar_fu_344_ap_start_reg;
    grp_convert_hex_to_binar_fu_352_ap_start <= grp_convert_hex_to_binar_fu_352_ap_start_reg;
    grp_fu_370_p2 <= "1" when (arr3_q0 = ap_const_lv8_30) else "0";
    grp_fu_376_p2 <= "1" when (arr3_q1 = ap_const_lv8_30) else "0";
    i_29_fu_470_p2 <= std_logic_vector(unsigned(ap_phi_mux_i1_0_phi_fu_302_p4) + unsigned(ap_const_lv4_1));
    i_30_fu_560_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_325_p4) + unsigned(ap_const_lv4_1));
    i_31_fu_509_p2 <= std_logic_vector(unsigned(i2_0_reg_310) + unsigned(ap_const_lv6_3F));
    i_32_fu_821_p2 <= std_logic_vector(unsigned(i3_0_reg_333) + unsigned(ap_const_lv4_1));
    i_fu_414_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_290_p4) + unsigned(ap_const_lv4_1));
    icmp_ln114_fu_554_p2 <= "1" when (ap_phi_mux_i_0_i_phi_fu_325_p4 = ap_const_lv4_8) else "0";
    icmp_ln262_fu_408_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_290_p4 = ap_const_lv4_8) else "0";
    icmp_ln267_fu_464_p2 <= "1" when (ap_phi_mux_i1_0_phi_fu_302_p4 = ap_const_lv4_8) else "0";
    icmp_ln290_fu_815_p2 <= "1" when (i3_0_reg_333 = ap_const_lv4_8) else "0";
    or_ln117_3_fu_787_p2 <= (icmp_ln117_reg_952 or icmp_ln116_reg_944);
    or_ln117_fu_583_p2 <= (shl_ln_fu_570_p3 or ap_const_lv5_1);
    or_ln118_fu_594_p2 <= (shl_ln_reg_928 or ap_const_lv5_2);
    or_ln119_fu_604_p2 <= (shl_ln_reg_928 or ap_const_lv5_3);
    or_ln_fu_526_p3 <= (ap_const_lv6_28 & carry_0_fu_132);
    select_ln118_13_fu_668_p3 <= 
        select_ln123_fu_622_p3 when (and_ln118_13_fu_662_p2(0) = '1') else 
        select_ln118_fu_648_p3;
    select_ln118_14_fu_731_p3 <= 
        select_ln129_fu_681_p3 when (and_ln118_14_fu_726_p2(0) = '1') else 
        select_ln118_13_reg_992;
    select_ln118_15_fu_743_p3 <= 
        select_ln133_fu_688_p3 when (and_ln118_15_fu_738_p2(0) = '1') else 
        select_ln118_14_fu_731_p3;
    select_ln118_16_fu_766_p3 <= 
        select_ln141_fu_695_p3 when (and_ln118_16_fu_761_p2(0) = '1') else 
        select_ln118_15_fu_743_p3;
    select_ln118_17_fu_779_p3 <= 
        select_ln145_fu_702_p3 when (and_ln118_17_fu_774_p2(0) = '1') else 
        select_ln118_16_fu_766_p3;
    select_ln118_18_fu_802_p3 <= 
        select_ln151_fu_709_p3 when (and_ln118_18_fu_797_p2(0) = '1') else 
        select_ln118_17_fu_779_p3;
    select_ln118_fu_648_p3 <= 
        select_ln119_fu_614_p3 when (and_ln118_fu_642_p2(0) = '1') else 
        select_ln155_fu_630_p3;
    select_ln119_fu_614_p3 <= 
        ap_const_lv7_30 when (grp_fu_376_p2(0) = '1') else 
        ap_const_lv7_31;
    select_ln123_fu_622_p3 <= 
        ap_const_lv7_32 when (grp_fu_376_p2(0) = '1') else 
        ap_const_lv7_33;
    select_ln129_fu_681_p3 <= 
        ap_const_lv7_34 when (icmp_ln119_reg_977(0) = '1') else 
        ap_const_lv7_35;
    select_ln133_fu_688_p3 <= 
        ap_const_lv7_36 when (icmp_ln119_reg_977(0) = '1') else 
        ap_const_lv7_37;
    select_ln141_fu_695_p3 <= 
        ap_const_lv7_38 when (icmp_ln119_reg_977(0) = '1') else 
        ap_const_lv7_39;
    select_ln145_fu_702_p3 <= 
        ap_const_lv7_61 when (icmp_ln119_reg_977(0) = '1') else 
        ap_const_lv7_62;
    select_ln151_fu_709_p3 <= 
        ap_const_lv7_63 when (icmp_ln119_reg_977(0) = '1') else 
        ap_const_lv7_64;
    select_ln155_fu_630_p3 <= 
        ap_const_lv7_65 when (grp_fu_376_p2(0) = '1') else 
        ap_const_lv7_66;
        sext_ln279_1_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(arr4_q0),9));

        sext_ln279_2_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln_fu_526_p3),10));

        sext_ln279_3_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln279_fu_538_p2),10));

    sext_ln279_fu_518_p0 <= arr3_q0;
        sext_ln279_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln279_fu_518_p0),9));

    shl_ln_fu_570_p3 <= (trunc_ln116_fu_566_p1 & ap_const_lv2_0);

    state_matrix_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln264_4_fu_429_p1, zext_ln269_4_fu_485_p1, ap_block_pp4_stage0, zext_ln292_2_fu_841_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            state_matrix_address0 <= zext_ln292_2_fu_841_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            state_matrix_address0 <= zext_ln269_4_fu_485_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_matrix_address0 <= zext_ln264_4_fu_429_p1(8 - 1 downto 0);
        else 
            state_matrix_address0 <= "XXXXXXXX";
        end if; 
    end process;


    state_matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            state_matrix_ce0 <= ap_const_logic_1;
        else 
            state_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    state_matrix_d0 <= arr1_q0;

    state_matrix_we0_assign_proc : process(icmp_ln290_reg_997, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln290_reg_997 = ap_const_lv1_0))) then 
            state_matrix_we0 <= ap_const_logic_1;
        else 
            state_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum1_fu_548_p2 <= std_logic_vector(signed(sext_ln279_2_fu_534_p1) + signed(sext_ln279_3_fu_544_p1));
    tmp_17_fu_495_p3 <= i2_0_reg_310(5 downto 5);
    tmp_18_fu_390_p3 <= (trunc_ln264_fu_382_p1 & ap_const_lv3_0);
    tmp_19_fu_446_p3 <= (trunc_ln269_fu_439_p1 & ap_const_lv3_0);
    trunc_ln116_fu_566_p1 <= ap_phi_mux_i_0_i_phi_fu_325_p4(3 - 1 downto 0);
    trunc_ln264_fu_382_p1 <= index1(4 - 1 downto 0);
    trunc_ln269_fu_439_p1 <= index2(4 - 1 downto 0);
    xor_ln116_fu_751_p2 <= (icmp_ln116_reg_944 xor ap_const_lv1_1);
    xor_ln117_3_fu_791_p2 <= (or_ln117_3_fu_787_p2 xor ap_const_lv1_1);
    xor_ln117_fu_716_p2 <= (icmp_ln117_reg_952 xor ap_const_lv1_1);
    xor_ln118_fu_656_p2 <= (grp_fu_370_p2 xor ap_const_lv1_1);
    zext_ln116_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_570_p3),64));
    zext_ln117_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln117_fu_583_p2),64));
    zext_ln118_3_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln118_18_fu_802_p3),8));
    zext_ln118_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln118_fu_594_p2),64));
    zext_ln119_3_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_321_pp3_iter1_reg),64));
    zext_ln119_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln119_fu_604_p2),64));
    zext_ln264_1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln264_fu_382_p1),8));
    zext_ln264_2_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_390_p3),8));
    zext_ln264_3_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_290_p4),8));
    zext_ln264_4_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln264_1_fu_424_p2),64));
    zext_ln264_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_286),64));
    zext_ln269_1_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln269_fu_439_p1),8));
    zext_ln269_2_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_446_p3),8));
    zext_ln269_3_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i1_0_phi_fu_302_p4),8));
    zext_ln269_4_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln269_1_fu_480_p2),64));
    zext_ln269_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_298),64));
    zext_ln279_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_310),64));
    zext_ln292_1_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_333),8));
    zext_ln292_2_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln292_reg_1006),64));
    zext_ln292_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_333),64));
end behav;

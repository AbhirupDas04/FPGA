// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module split_hw_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_address0,
        key_ce0,
        key_q0,
        key_address1,
        key_ce1,
        key_q1,
        new_arr_address0,
        new_arr_ce0,
        new_arr_we0,
        new_arr_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state5 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
output  [4:0] key_address1;
output   key_ce1;
input  [7:0] key_q1;
output  [4:0] new_arr_address0;
output   new_arr_ce0;
output   new_arr_we0;
output  [7:0] new_arr_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg key_ce0;
reg key_ce1;
reg new_arr_ce0;
reg new_arr_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] count3_0_reg_165;
reg  signed [5:0] count2_0_reg_177;
reg   [2:0] j_0_reg_186;
reg   [3:0] j1_0_reg_197;
wire   [0:0] icmp_ln9_fu_208_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] i_fu_214_p2;
reg   [1:0] i_reg_346;
wire   [5:0] zext_ln11_fu_226_p1;
wire   [0:0] icmp_ln12_fu_230_p2;
reg   [0:0] icmp_ln12_reg_356;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] j_fu_236_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] count2_2_fu_262_p2;
wire   [3:0] count3_fu_288_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [5:0] zext_ln19_fu_302_p1;
reg   [5:0] zext_ln19_reg_385;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln19_fu_306_p2;
reg   [0:0] icmp_ln19_reg_390;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] j_2_fu_312_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [5:0] add_ln21_fu_327_p2;
reg   [5:0] add_ln21_reg_399;
wire   [4:0] count_fu_336_p2;
wire    ap_CS_fsm_state8;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
reg   [2:0] str_address0;
reg    str_ce0;
reg    str_we0;
wire   [7:0] str_q0;
wire   [2:0] str_address1;
reg    str_ce1;
reg    str_we1;
reg   [4:0] count_0_reg_141;
reg   [1:0] i_0_reg_153;
wire  signed [63:0] sext_ln14_fu_246_p1;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln15_fu_257_p1;
wire   [63:0] zext_ln14_fu_272_p1;
wire   [63:0] zext_ln15_fu_283_p1;
wire   [63:0] zext_ln21_fu_318_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln21_2_fu_332_p1;
wire   [4:0] count2_fu_220_p2;
wire  signed [6:0] sext_ln12_fu_242_p1;
wire   [6:0] or_ln15_1_fu_251_p2;
wire   [2:0] trunc_ln12_fu_268_p1;
wire   [2:0] or_ln15_fu_277_p2;
wire   [4:0] tmp_s_fu_294_p3;
wire   [5:0] zext_ln21_1_fu_323_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

split_hw_8_str #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
str_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(str_address0),
    .ce0(str_ce0),
    .we0(str_we0),
    .d0(key_q0),
    .q0(str_q0),
    .address1(str_address1),
    .ce1(str_ce1),
    .we1(str_we1),
    .d1(key_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln9_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln9_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_fu_230_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count2_0_reg_177 <= count2_2_fu_262_p2;
    end else if (((icmp_ln9_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        count2_0_reg_177 <= zext_ln11_fu_226_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count3_0_reg_165 <= count3_fu_288_p2;
    end else if (((icmp_ln9_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        count3_0_reg_165 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        count_0_reg_141 <= count_fu_336_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        count_0_reg_141 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_153 <= i_reg_346;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_153 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j1_0_reg_197 <= 4'd0;
    end else if (((icmp_ln19_fu_306_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j1_0_reg_197 <= j_2_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_fu_230_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_186 <= j_fu_236_p2;
    end else if (((icmp_ln9_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_186 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln21_reg_399 <= add_ln21_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_346 <= i_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_reg_356 <= icmp_ln12_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln19_reg_390 <= icmp_ln19_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        zext_ln19_reg_385[4 : 3] <= zext_ln19_fu_302_p1[4 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln12_fu_230_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_306_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln9_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        key_ce1 = 1'b1;
    end else begin
        key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        new_arr_ce0 = 1'b1;
    end else begin
        new_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_390 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        new_arr_we0 = 1'b1;
    end else begin
        new_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        str_address0 = zext_ln21_fu_318_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        str_address0 = zext_ln14_fu_272_p1;
    end else begin
        str_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        str_ce0 = 1'b1;
    end else begin
        str_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        str_ce1 = 1'b1;
    end else begin
        str_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        str_we0 = 1'b1;
    end else begin
        str_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        str_we1 = 1'b1;
    end else begin
        str_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln12_fu_230_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln12_fu_230_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln19_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln19_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_327_p2 = (zext_ln19_reg_385 + zext_ln21_1_fu_323_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign count2_2_fu_262_p2 = ($signed(6'd62) + $signed(count2_0_reg_177));

assign count2_fu_220_p2 = (count_0_reg_141 | 5'd6);

assign count3_fu_288_p2 = (4'd2 + count3_0_reg_165);

assign count_fu_336_p2 = (count_0_reg_141 + 5'd8);

assign i_fu_214_p2 = (i_0_reg_153 + 2'd1);

assign icmp_ln12_fu_230_p2 = ((j_0_reg_186 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_306_p2 = ((j1_0_reg_197 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_208_p2 = ((i_0_reg_153 == 2'd3) ? 1'b1 : 1'b0);

assign j_2_fu_312_p2 = (j1_0_reg_197 + 4'd1);

assign j_fu_236_p2 = (j_0_reg_186 + 3'd1);

assign key_address0 = sext_ln14_fu_246_p1;

assign key_address1 = sext_ln15_fu_257_p1;

assign new_arr_address0 = zext_ln21_2_fu_332_p1;

assign new_arr_d0 = str_q0;

assign or_ln15_1_fu_251_p2 = (sext_ln12_fu_242_p1 | 7'd1);

assign or_ln15_fu_277_p2 = (trunc_ln12_fu_268_p1 | 3'd1);

assign sext_ln12_fu_242_p1 = count2_0_reg_177;

assign sext_ln14_fu_246_p1 = count2_0_reg_177;

assign sext_ln15_fu_257_p1 = $signed(or_ln15_1_fu_251_p2);

assign str_address1 = zext_ln15_fu_283_p1;

assign tmp_s_fu_294_p3 = {{i_0_reg_153}, {3'd0}};

assign trunc_ln12_fu_268_p1 = count3_0_reg_165[2:0];

assign zext_ln11_fu_226_p1 = count2_fu_220_p2;

assign zext_ln14_fu_272_p1 = count3_0_reg_165;

assign zext_ln15_fu_283_p1 = or_ln15_fu_277_p2;

assign zext_ln19_fu_302_p1 = tmp_s_fu_294_p3;

assign zext_ln21_1_fu_323_p1 = j1_0_reg_197;

assign zext_ln21_2_fu_332_p1 = add_ln21_reg_399;

assign zext_ln21_fu_318_p1 = j1_0_reg_197;

always @ (posedge ap_clk) begin
    zext_ln19_reg_385[2:0] <= 3'b000;
    zext_ln19_reg_385[5] <= 1'b0;
end

endmodule //split_hw_3

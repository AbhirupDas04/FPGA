// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xor_1_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_matrix_address0,
        state_matrix_ce0,
        state_matrix_we0,
        state_matrix_d0,
        state_matrix_q0,
        index1,
        index2
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_pp0_stage0 = 13'd2;
parameter    ap_ST_fsm_state4 = 13'd4;
parameter    ap_ST_fsm_pp1_stage0 = 13'd8;
parameter    ap_ST_fsm_state7 = 13'd16;
parameter    ap_ST_fsm_state8 = 13'd32;
parameter    ap_ST_fsm_pp2_stage0 = 13'd64;
parameter    ap_ST_fsm_state11 = 13'd128;
parameter    ap_ST_fsm_pp3_stage0 = 13'd256;
parameter    ap_ST_fsm_pp3_stage1 = 13'd512;
parameter    ap_ST_fsm_state16 = 13'd1024;
parameter    ap_ST_fsm_pp4_stage0 = 13'd2048;
parameter    ap_ST_fsm_state19 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] state_matrix_address0;
output   state_matrix_ce0;
output   state_matrix_we0;
output  [7:0] state_matrix_d0;
input  [7:0] state_matrix_q0;
input  [4:0] index1;
input  [5:0] index2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] state_matrix_address0;
reg state_matrix_ce0;
reg state_matrix_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_0_reg_260;
reg   [3:0] i1_0_reg_272;
reg   [5:0] i2_0_reg_284;
reg   [3:0] i_0_i_reg_295;
reg   [3:0] i_0_i_reg_295_pp3_iter1_reg;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state12_pp3_stage0_iter0;
wire    ap_block_state14_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
reg   [3:0] i3_0_reg_307;
wire   [7:0] add_ln349_fu_362_p2;
reg   [7:0] add_ln349_reg_784;
wire   [0:0] icmp_ln347_fu_368_p2;
reg   [0:0] icmp_ln347_reg_790;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_374_p2;
reg   [3:0] i_reg_794;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] add_ln354_fu_418_p2;
reg   [7:0] add_ln354_reg_804;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln352_fu_424_p2;
reg   [0:0] icmp_ln352_reg_809;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] i_1_fu_430_p2;
reg   [3:0] i_1_reg_813;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln363_fu_455_p2;
reg   [0:0] icmp_ln363_reg_823;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state9_pp2_stage0_iter0;
wire    ap_block_state10_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [5:0] i_2_fu_461_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [4:0] arr3_addr_reg_832;
wire   [0:0] icmp_ln114_fu_488_p2;
reg   [0:0] icmp_ln114_reg_843;
reg   [0:0] icmp_ln114_reg_843_pp3_iter1_reg;
wire   [3:0] i_3_fu_494_p2;
reg   [3:0] i_3_reg_847;
reg    ap_enable_reg_pp3_iter0;
wire   [4:0] shl_ln_fu_504_p3;
reg   [4:0] shl_ln_reg_852;
wire   [0:0] grp_fu_330_p2;
reg   [0:0] icmp_ln116_reg_868;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_state13_pp3_stage1_iter0;
wire    ap_block_state15_pp3_stage1_iter1;
wire    ap_block_pp3_stage1_11001;
wire   [0:0] grp_fu_336_p2;
reg   [0:0] icmp_ln117_reg_876;
reg   [0:0] icmp_ln118_reg_894;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] icmp_ln119_reg_901;
wire   [0:0] xor_ln118_fu_590_p2;
reg   [0:0] xor_ln118_reg_910;
wire   [6:0] select_ln118_1_fu_602_p3;
reg   [6:0] select_ln118_1_reg_916;
wire   [0:0] icmp_ln375_fu_749_p2;
reg   [0:0] icmp_ln375_reg_921;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state17_pp4_stage0_iter0;
wire    ap_block_state18_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire   [3:0] i_4_fu_755_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [7:0] add_ln377_fu_770_p2;
reg   [7:0] add_ln377_reg_930;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state8;
wire    grp_convert_hex_to_binar_fu_318_ap_ready;
wire    grp_convert_hex_to_binar_fu_318_ap_done;
wire    grp_convert_hex_to_binar_fu_324_ap_ready;
wire    grp_convert_hex_to_binar_fu_324_ap_done;
reg    ap_block_state8_on_subcall_done;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state9;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state11;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state12;
wire    ap_block_pp3_stage1_subdone;
wire    ap_CS_fsm_state16;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state17;
reg    ap_enable_reg_pp4_iter1;
reg   [2:0] arr1_address0;
reg    arr1_ce0;
reg    arr1_we0;
reg   [7:0] arr1_d0;
wire   [7:0] arr1_q0;
reg   [2:0] arr2_address0;
reg    arr2_ce0;
reg    arr2_we0;
wire   [7:0] arr2_q0;
reg   [4:0] arr3_address0;
reg    arr3_ce0;
reg    arr3_we0;
wire   [6:0] arr3_q0;
reg   [4:0] arr3_address1;
reg    arr3_ce1;
reg    arr3_we1;
reg   [6:0] arr3_d1;
wire   [6:0] arr3_q1;
reg   [4:0] arr4_address0;
reg    arr4_ce0;
reg    arr4_we0;
wire   [6:0] arr4_q0;
reg    arr4_ce1;
reg    arr4_we1;
wire    grp_convert_hex_to_binar_fu_318_ap_start;
wire    grp_convert_hex_to_binar_fu_318_ap_idle;
wire   [2:0] grp_convert_hex_to_binar_fu_318_hex_address0;
wire    grp_convert_hex_to_binar_fu_318_hex_ce0;
wire   [4:0] grp_convert_hex_to_binar_fu_318_bin_address0;
wire    grp_convert_hex_to_binar_fu_318_bin_ce0;
wire    grp_convert_hex_to_binar_fu_318_bin_we0;
wire   [6:0] grp_convert_hex_to_binar_fu_318_bin_d0;
wire   [4:0] grp_convert_hex_to_binar_fu_318_bin_address1;
wire    grp_convert_hex_to_binar_fu_318_bin_ce1;
wire    grp_convert_hex_to_binar_fu_318_bin_we1;
wire   [6:0] grp_convert_hex_to_binar_fu_318_bin_d1;
wire    grp_convert_hex_to_binar_fu_324_ap_start;
wire    grp_convert_hex_to_binar_fu_324_ap_idle;
wire   [2:0] grp_convert_hex_to_binar_fu_324_hex_address0;
wire    grp_convert_hex_to_binar_fu_324_hex_ce0;
wire   [4:0] grp_convert_hex_to_binar_fu_324_bin_address0;
wire    grp_convert_hex_to_binar_fu_324_bin_ce0;
wire    grp_convert_hex_to_binar_fu_324_bin_we0;
wire   [6:0] grp_convert_hex_to_binar_fu_324_bin_d0;
wire   [4:0] grp_convert_hex_to_binar_fu_324_bin_address1;
wire    grp_convert_hex_to_binar_fu_324_bin_ce1;
wire    grp_convert_hex_to_binar_fu_324_bin_we1;
wire   [6:0] grp_convert_hex_to_binar_fu_324_bin_d1;
reg   [3:0] ap_phi_mux_i_0_phi_fu_264_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_i1_0_phi_fu_276_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_i_0_i_phi_fu_299_p4;
wire    ap_block_pp3_stage0;
reg    grp_convert_hex_to_binar_fu_318_ap_start_reg;
wire    ap_CS_fsm_state7;
reg    grp_convert_hex_to_binar_fu_324_ap_start_reg;
wire   [63:0] zext_ln349_4_fu_389_p1;
wire   [63:0] zext_ln349_fu_394_p1;
wire   [63:0] zext_ln354_4_fu_445_p1;
wire   [63:0] zext_ln354_fu_450_p1;
wire   [63:0] zext_ln365_fu_467_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln116_fu_512_p1;
wire   [63:0] zext_ln117_fu_523_p1;
wire   [63:0] zext_ln118_fu_533_p1;
wire    ap_block_pp3_stage1;
wire   [63:0] zext_ln119_fu_543_p1;
wire   [63:0] zext_ln119_1_fu_610_p1;
wire   [63:0] zext_ln377_fu_761_p1;
wire    ap_block_pp4_stage0;
wire   [63:0] zext_ln377_2_fu_775_p1;
wire   [7:0] zext_ln118_1_fu_744_p1;
wire   [6:0] select_ln366_fu_479_p3;
wire   [3:0] trunc_ln349_fu_342_p1;
wire   [6:0] tmp_6_fu_350_p3;
wire   [7:0] zext_ln349_2_fu_358_p1;
wire   [7:0] zext_ln349_1_fu_346_p1;
wire   [7:0] zext_ln349_3_fu_380_p1;
wire   [7:0] add_ln349_1_fu_384_p2;
wire   [3:0] trunc_ln354_fu_399_p1;
wire   [6:0] tmp_9_fu_406_p3;
wire   [7:0] zext_ln354_2_fu_414_p1;
wire   [7:0] zext_ln354_1_fu_402_p1;
wire   [7:0] zext_ln354_3_fu_436_p1;
wire   [7:0] add_ln354_1_fu_440_p2;
wire   [0:0] icmp_ln365_fu_473_p2;
wire   [2:0] trunc_ln116_fu_500_p1;
wire   [4:0] or_ln117_fu_517_p2;
wire   [4:0] or_ln118_fu_528_p2;
wire   [4:0] or_ln119_fu_538_p2;
wire   [0:0] and_ln117_fu_572_p2;
wire   [0:0] and_ln118_fu_576_p2;
wire   [6:0] select_ln119_fu_548_p3;
wire   [6:0] select_ln155_fu_564_p3;
wire   [0:0] and_ln118_1_fu_596_p2;
wire   [6:0] select_ln123_fu_556_p3;
wire   [6:0] select_ln118_fu_582_p3;
wire   [0:0] xor_ln117_fu_650_p2;
wire   [0:0] and_ln117_1_fu_655_p2;
wire   [0:0] and_ln118_2_fu_660_p2;
wire   [6:0] select_ln129_fu_615_p3;
wire   [0:0] and_ln118_3_fu_672_p2;
wire   [6:0] select_ln133_fu_622_p3;
wire   [6:0] select_ln118_2_fu_665_p3;
wire   [0:0] xor_ln116_fu_685_p2;
wire   [0:0] and_ln117_2_fu_690_p2;
wire   [0:0] and_ln118_4_fu_695_p2;
wire   [6:0] select_ln141_fu_629_p3;
wire   [6:0] select_ln118_3_fu_677_p3;
wire   [0:0] and_ln118_5_fu_708_p2;
wire   [6:0] select_ln145_fu_636_p3;
wire   [6:0] select_ln118_4_fu_700_p3;
wire   [0:0] or_ln117_1_fu_721_p2;
wire   [0:0] xor_ln117_1_fu_725_p2;
wire   [0:0] and_ln118_6_fu_731_p2;
wire   [6:0] select_ln151_fu_643_p3;
wire   [6:0] select_ln118_5_fu_713_p3;
wire   [6:0] select_ln118_6_fu_736_p3;
wire   [7:0] zext_ln377_1_fu_766_p1;
wire    ap_CS_fsm_state19;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 grp_convert_hex_to_binar_fu_318_ap_start_reg = 1'b0;
#0 grp_convert_hex_to_binar_fu_324_ap_start_reg = 1'b0;
end

xor_1_hw_arr1 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
arr1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(arr1_address0),
    .ce0(arr1_ce0),
    .we0(arr1_we0),
    .d0(arr1_d0),
    .q0(arr1_q0)
);

xor_1_hw_arr1 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
arr2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(arr2_address0),
    .ce0(arr2_ce0),
    .we0(arr2_we0),
    .d0(state_matrix_q0),
    .q0(arr2_q0)
);

xor_1_hw_arr3 #(
    .DataWidth( 7 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
arr3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(arr3_address0),
    .ce0(arr3_ce0),
    .we0(arr3_we0),
    .d0(grp_convert_hex_to_binar_fu_318_bin_d0),
    .q0(arr3_q0),
    .address1(arr3_address1),
    .ce1(arr3_ce1),
    .we1(arr3_we1),
    .d1(arr3_d1),
    .q1(arr3_q1)
);

xor_1_hw_arr4 #(
    .DataWidth( 7 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
arr4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(arr4_address0),
    .ce0(arr4_ce0),
    .we0(arr4_we0),
    .d0(grp_convert_hex_to_binar_fu_324_bin_d0),
    .q0(arr4_q0),
    .address1(grp_convert_hex_to_binar_fu_324_bin_address1),
    .ce1(arr4_ce1),
    .we1(arr4_we1),
    .d1(grp_convert_hex_to_binar_fu_324_bin_d1)
);

convert_hex_to_binar grp_convert_hex_to_binar_fu_318(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convert_hex_to_binar_fu_318_ap_start),
    .ap_done(grp_convert_hex_to_binar_fu_318_ap_done),
    .ap_idle(grp_convert_hex_to_binar_fu_318_ap_idle),
    .ap_ready(grp_convert_hex_to_binar_fu_318_ap_ready),
    .hex_address0(grp_convert_hex_to_binar_fu_318_hex_address0),
    .hex_ce0(grp_convert_hex_to_binar_fu_318_hex_ce0),
    .hex_q0(arr1_q0),
    .bin_address0(grp_convert_hex_to_binar_fu_318_bin_address0),
    .bin_ce0(grp_convert_hex_to_binar_fu_318_bin_ce0),
    .bin_we0(grp_convert_hex_to_binar_fu_318_bin_we0),
    .bin_d0(grp_convert_hex_to_binar_fu_318_bin_d0),
    .bin_address1(grp_convert_hex_to_binar_fu_318_bin_address1),
    .bin_ce1(grp_convert_hex_to_binar_fu_318_bin_ce1),
    .bin_we1(grp_convert_hex_to_binar_fu_318_bin_we1),
    .bin_d1(grp_convert_hex_to_binar_fu_318_bin_d1)
);

convert_hex_to_binar grp_convert_hex_to_binar_fu_324(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convert_hex_to_binar_fu_324_ap_start),
    .ap_done(grp_convert_hex_to_binar_fu_324_ap_done),
    .ap_idle(grp_convert_hex_to_binar_fu_324_ap_idle),
    .ap_ready(grp_convert_hex_to_binar_fu_324_ap_ready),
    .hex_address0(grp_convert_hex_to_binar_fu_324_hex_address0),
    .hex_ce0(grp_convert_hex_to_binar_fu_324_hex_ce0),
    .hex_q0(arr2_q0),
    .bin_address0(grp_convert_hex_to_binar_fu_324_bin_address0),
    .bin_ce0(grp_convert_hex_to_binar_fu_324_bin_ce0),
    .bin_we0(grp_convert_hex_to_binar_fu_324_bin_we0),
    .bin_d0(grp_convert_hex_to_binar_fu_324_bin_d0),
    .bin_address1(grp_convert_hex_to_binar_fu_324_bin_address1),
    .bin_ce1(grp_convert_hex_to_binar_fu_324_bin_ce1),
    .bin_we1(grp_convert_hex_to_binar_fu_324_bin_we1),
    .bin_d1(grp_convert_hex_to_binar_fu_324_bin_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state9))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state9);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state12))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state17) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state17))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state17);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_convert_hex_to_binar_fu_318_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_convert_hex_to_binar_fu_318_ap_start_reg <= 1'b1;
        end else if ((grp_convert_hex_to_binar_fu_318_ap_ready == 1'b1)) begin
            grp_convert_hex_to_binar_fu_318_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_convert_hex_to_binar_fu_324_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_convert_hex_to_binar_fu_324_ap_start_reg <= 1'b1;
        end else if ((grp_convert_hex_to_binar_fu_324_ap_ready == 1'b1)) begin
            grp_convert_hex_to_binar_fu_324_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_272 <= 4'd0;
    end else if (((icmp_ln352_reg_809 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i1_0_reg_272 <= i_1_reg_813;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_fu_455_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i2_0_reg_284 <= i_2_fu_461_p2;
    end else if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
        i2_0_reg_284 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i3_0_reg_307 <= 4'd0;
    end else if (((icmp_ln375_fu_749_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i3_0_reg_307 <= i_4_fu_755_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_i_reg_295 <= 4'd0;
    end else if (((icmp_ln114_reg_843 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        i_0_i_reg_295 <= i_3_reg_847;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln347_reg_790 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_260 <= i_reg_794;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_260 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln349_reg_784 <= add_ln349_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln354_reg_804 <= add_ln354_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln375_fu_749_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        add_ln377_reg_930 <= add_ln377_fu_770_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        arr3_addr_reg_832 <= zext_ln365_fu_467_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_0_i_reg_295_pp3_iter1_reg <= i_0_i_reg_295;
        icmp_ln114_reg_843 <= icmp_ln114_fu_488_p2;
        icmp_ln114_reg_843_pp3_iter1_reg <= icmp_ln114_reg_843;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_813 <= i_1_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        i_3_reg_847 <= i_3_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_794 <= i_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_reg_843 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        icmp_ln116_reg_868 <= grp_fu_330_p2;
        icmp_ln117_reg_876 <= grp_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_reg_843 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        icmp_ln118_reg_894 <= grp_fu_330_p2;
        icmp_ln119_reg_901 <= grp_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln347_reg_790 <= icmp_ln347_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln352_reg_809 <= icmp_ln352_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln363_reg_823 <= icmp_ln363_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln375_reg_921 <= icmp_ln375_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_reg_843 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        select_ln118_1_reg_916[2 : 0] <= select_ln118_1_fu_602_p3[2 : 0];
select_ln118_1_reg_916[4] <= select_ln118_1_fu_602_p3[4];
select_ln118_1_reg_916[6] <= select_ln118_1_fu_602_p3[6];
        xor_ln118_reg_910 <= xor_ln118_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_fu_488_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        shl_ln_reg_852[4 : 2] <= shl_ln_fu_504_p3[4 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln347_fu_368_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln352_fu_424_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln363_fu_455_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln114_fu_488_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln375_fu_749_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln352_reg_809 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i1_0_phi_fu_276_p4 = i_1_reg_813;
    end else begin
        ap_phi_mux_i1_0_phi_fu_276_p4 = i1_0_reg_272;
    end
end

always @ (*) begin
    if (((icmp_ln114_reg_843 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_i_phi_fu_299_p4 = i_3_reg_847;
    end else begin
        ap_phi_mux_i_0_i_phi_fu_299_p4 = i_0_i_reg_295;
    end
end

always @ (*) begin
    if (((icmp_ln347_reg_790 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_264_p4 = i_reg_794;
    end else begin
        ap_phi_mux_i_0_phi_fu_264_p4 = i_0_reg_260;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        arr1_address0 = zext_ln377_fu_761_p1;
    end else if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        arr1_address0 = zext_ln119_1_fu_610_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        arr1_address0 = zext_ln349_fu_394_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr1_address0 = grp_convert_hex_to_binar_fu_318_hex_address0;
    end else begin
        arr1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)))) begin
        arr1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr1_ce0 = grp_convert_hex_to_binar_fu_318_hex_ce0;
    end else begin
        arr1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        arr1_d0 = zext_ln118_1_fu_744_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        arr1_d0 = state_matrix_q0;
    end else begin
        arr1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln347_reg_790 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln114_reg_843_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)))) begin
        arr1_we0 = 1'b1;
    end else begin
        arr1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        arr2_address0 = zext_ln354_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr2_address0 = grp_convert_hex_to_binar_fu_324_hex_address0;
    end else begin
        arr2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        arr2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr2_ce0 = grp_convert_hex_to_binar_fu_324_hex_ce0;
    end else begin
        arr2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln352_reg_809 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        arr2_we0 = 1'b1;
    end else begin
        arr2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        arr3_address0 = zext_ln118_fu_533_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        arr3_address0 = zext_ln116_fu_512_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        arr3_address0 = zext_ln365_fu_467_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_address0 = grp_convert_hex_to_binar_fu_318_bin_address0;
    end else begin
        arr3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        arr3_address1 = zext_ln119_fu_543_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        arr3_address1 = zext_ln117_fu_523_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        arr3_address1 = arr3_addr_reg_832;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_address1 = grp_convert_hex_to_binar_fu_318_bin_address1;
    end else begin
        arr3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        arr3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_ce0 = grp_convert_hex_to_binar_fu_318_bin_ce0;
    end else begin
        arr3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        arr3_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_ce1 = grp_convert_hex_to_binar_fu_318_bin_ce1;
    end else begin
        arr3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        arr3_d1 = select_ln366_fu_479_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_d1 = grp_convert_hex_to_binar_fu_318_bin_d1;
    end else begin
        arr3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_we0 = grp_convert_hex_to_binar_fu_318_bin_we0;
    end else begin
        arr3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln363_reg_823 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        arr3_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr3_we1 = grp_convert_hex_to_binar_fu_318_bin_we1;
    end else begin
        arr3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        arr4_address0 = zext_ln365_fu_467_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr4_address0 = grp_convert_hex_to_binar_fu_324_bin_address0;
    end else begin
        arr4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        arr4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        arr4_ce0 = grp_convert_hex_to_binar_fu_324_bin_ce0;
    end else begin
        arr4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr4_ce1 = grp_convert_hex_to_binar_fu_324_bin_ce1;
    end else begin
        arr4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr4_we0 = grp_convert_hex_to_binar_fu_324_bin_we0;
    end else begin
        arr4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr4_we1 = grp_convert_hex_to_binar_fu_324_bin_we1;
    end else begin
        arr4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        state_matrix_address0 = zext_ln377_2_fu_775_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        state_matrix_address0 = zext_ln354_4_fu_445_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_matrix_address0 = zext_ln349_4_fu_389_p1;
    end else begin
        state_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        state_matrix_ce0 = 1'b1;
    end else begin
        state_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln375_reg_921 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        state_matrix_we0 = 1'b1;
    end else begin
        state_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln347_fu_368_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln347_fu_368_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln352_fu_424_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln352_fu_424_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln363_fu_455_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln363_fu_455_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln114_fu_488_p2 == 1'd1)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln114_fu_488_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((~((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b0)) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln375_fu_749_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln375_fu_749_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln349_1_fu_384_p2 = (add_ln349_reg_784 + zext_ln349_3_fu_380_p1);

assign add_ln349_fu_362_p2 = (zext_ln349_2_fu_358_p1 + zext_ln349_1_fu_346_p1);

assign add_ln354_1_fu_440_p2 = (add_ln354_reg_804 + zext_ln354_3_fu_436_p1);

assign add_ln354_fu_418_p2 = (zext_ln354_2_fu_414_p1 + zext_ln354_1_fu_402_p1);

assign add_ln377_fu_770_p2 = (add_ln349_reg_784 + zext_ln377_1_fu_766_p1);

assign and_ln117_1_fu_655_p2 = (xor_ln117_fu_650_p2 & icmp_ln116_reg_868);

assign and_ln117_2_fu_690_p2 = (xor_ln116_fu_685_p2 & icmp_ln117_reg_876);

assign and_ln117_fu_572_p2 = (icmp_ln117_reg_876 & icmp_ln116_reg_868);

assign and_ln118_1_fu_596_p2 = (xor_ln118_fu_590_p2 & and_ln117_fu_572_p2);

assign and_ln118_2_fu_660_p2 = (icmp_ln118_reg_894 & and_ln117_1_fu_655_p2);

assign and_ln118_3_fu_672_p2 = (xor_ln118_reg_910 & and_ln117_1_fu_655_p2);

assign and_ln118_4_fu_695_p2 = (icmp_ln118_reg_894 & and_ln117_2_fu_690_p2);

assign and_ln118_5_fu_708_p2 = (xor_ln118_reg_910 & and_ln117_2_fu_690_p2);

assign and_ln118_6_fu_731_p2 = (xor_ln117_1_fu_725_p2 & icmp_ln118_reg_894);

assign and_ln118_fu_576_p2 = (grp_fu_330_p2 & and_ln117_fu_572_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_on_subcall_done = ((grp_convert_hex_to_binar_fu_324_ap_done == 1'b0) | (grp_convert_hex_to_binar_fu_318_ap_done == 1'b0));
end

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign grp_convert_hex_to_binar_fu_318_ap_start = grp_convert_hex_to_binar_fu_318_ap_start_reg;

assign grp_convert_hex_to_binar_fu_324_ap_start = grp_convert_hex_to_binar_fu_324_ap_start_reg;

assign grp_fu_330_p2 = ((arr3_q0 == 7'd48) ? 1'b1 : 1'b0);

assign grp_fu_336_p2 = ((arr3_q1 == 7'd48) ? 1'b1 : 1'b0);

assign i_1_fu_430_p2 = (ap_phi_mux_i1_0_phi_fu_276_p4 + 4'd1);

assign i_2_fu_461_p2 = (i2_0_reg_284 + 6'd1);

assign i_3_fu_494_p2 = (ap_phi_mux_i_0_i_phi_fu_299_p4 + 4'd1);

assign i_4_fu_755_p2 = (i3_0_reg_307 + 4'd1);

assign i_fu_374_p2 = (ap_phi_mux_i_0_phi_fu_264_p4 + 4'd1);

assign icmp_ln114_fu_488_p2 = ((ap_phi_mux_i_0_i_phi_fu_299_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln347_fu_368_p2 = ((ap_phi_mux_i_0_phi_fu_264_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln352_fu_424_p2 = ((ap_phi_mux_i1_0_phi_fu_276_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln363_fu_455_p2 = ((i2_0_reg_284 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln365_fu_473_p2 = ((arr3_q0 == arr4_q0) ? 1'b1 : 1'b0);

assign icmp_ln375_fu_749_p2 = ((i3_0_reg_307 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln117_1_fu_721_p2 = (icmp_ln117_reg_876 | icmp_ln116_reg_868);

assign or_ln117_fu_517_p2 = (shl_ln_fu_504_p3 | 5'd1);

assign or_ln118_fu_528_p2 = (shl_ln_reg_852 | 5'd2);

assign or_ln119_fu_538_p2 = (shl_ln_reg_852 | 5'd3);

assign select_ln118_1_fu_602_p3 = ((and_ln118_1_fu_596_p2[0:0] === 1'b1) ? select_ln123_fu_556_p3 : select_ln118_fu_582_p3);

assign select_ln118_2_fu_665_p3 = ((and_ln118_2_fu_660_p2[0:0] === 1'b1) ? select_ln129_fu_615_p3 : select_ln118_1_reg_916);

assign select_ln118_3_fu_677_p3 = ((and_ln118_3_fu_672_p2[0:0] === 1'b1) ? select_ln133_fu_622_p3 : select_ln118_2_fu_665_p3);

assign select_ln118_4_fu_700_p3 = ((and_ln118_4_fu_695_p2[0:0] === 1'b1) ? select_ln141_fu_629_p3 : select_ln118_3_fu_677_p3);

assign select_ln118_5_fu_713_p3 = ((and_ln118_5_fu_708_p2[0:0] === 1'b1) ? select_ln145_fu_636_p3 : select_ln118_4_fu_700_p3);

assign select_ln118_6_fu_736_p3 = ((and_ln118_6_fu_731_p2[0:0] === 1'b1) ? select_ln151_fu_643_p3 : select_ln118_5_fu_713_p3);

assign select_ln118_fu_582_p3 = ((and_ln118_fu_576_p2[0:0] === 1'b1) ? select_ln119_fu_548_p3 : select_ln155_fu_564_p3);

assign select_ln119_fu_548_p3 = ((grp_fu_336_p2[0:0] === 1'b1) ? 7'd48 : 7'd49);

assign select_ln123_fu_556_p3 = ((grp_fu_336_p2[0:0] === 1'b1) ? 7'd50 : 7'd51);

assign select_ln129_fu_615_p3 = ((icmp_ln119_reg_901[0:0] === 1'b1) ? 7'd52 : 7'd53);

assign select_ln133_fu_622_p3 = ((icmp_ln119_reg_901[0:0] === 1'b1) ? 7'd54 : 7'd55);

assign select_ln141_fu_629_p3 = ((icmp_ln119_reg_901[0:0] === 1'b1) ? 7'd56 : 7'd57);

assign select_ln145_fu_636_p3 = ((icmp_ln119_reg_901[0:0] === 1'b1) ? 7'd97 : 7'd98);

assign select_ln151_fu_643_p3 = ((icmp_ln119_reg_901[0:0] === 1'b1) ? 7'd99 : 7'd100);

assign select_ln155_fu_564_p3 = ((grp_fu_336_p2[0:0] === 1'b1) ? 7'd101 : 7'd102);

assign select_ln366_fu_479_p3 = ((icmp_ln365_fu_473_p2[0:0] === 1'b1) ? 7'd48 : 7'd49);

assign shl_ln_fu_504_p3 = {{trunc_ln116_fu_500_p1}, {2'd0}};

assign state_matrix_d0 = arr1_q0;

assign tmp_6_fu_350_p3 = {{trunc_ln349_fu_342_p1}, {3'd0}};

assign tmp_9_fu_406_p3 = {{trunc_ln354_fu_399_p1}, {3'd0}};

assign trunc_ln116_fu_500_p1 = ap_phi_mux_i_0_i_phi_fu_299_p4[2:0];

assign trunc_ln349_fu_342_p1 = index1[3:0];

assign trunc_ln354_fu_399_p1 = index2[3:0];

assign xor_ln116_fu_685_p2 = (icmp_ln116_reg_868 ^ 1'd1);

assign xor_ln117_1_fu_725_p2 = (or_ln117_1_fu_721_p2 ^ 1'd1);

assign xor_ln117_fu_650_p2 = (icmp_ln117_reg_876 ^ 1'd1);

assign xor_ln118_fu_590_p2 = (grp_fu_330_p2 ^ 1'd1);

assign zext_ln116_fu_512_p1 = shl_ln_fu_504_p3;

assign zext_ln117_fu_523_p1 = or_ln117_fu_517_p2;

assign zext_ln118_1_fu_744_p1 = select_ln118_6_fu_736_p3;

assign zext_ln118_fu_533_p1 = or_ln118_fu_528_p2;

assign zext_ln119_1_fu_610_p1 = i_0_i_reg_295_pp3_iter1_reg;

assign zext_ln119_fu_543_p1 = or_ln119_fu_538_p2;

assign zext_ln349_1_fu_346_p1 = trunc_ln349_fu_342_p1;

assign zext_ln349_2_fu_358_p1 = tmp_6_fu_350_p3;

assign zext_ln349_3_fu_380_p1 = ap_phi_mux_i_0_phi_fu_264_p4;

assign zext_ln349_4_fu_389_p1 = add_ln349_1_fu_384_p2;

assign zext_ln349_fu_394_p1 = i_0_reg_260;

assign zext_ln354_1_fu_402_p1 = trunc_ln354_fu_399_p1;

assign zext_ln354_2_fu_414_p1 = tmp_9_fu_406_p3;

assign zext_ln354_3_fu_436_p1 = ap_phi_mux_i1_0_phi_fu_276_p4;

assign zext_ln354_4_fu_445_p1 = add_ln354_1_fu_440_p2;

assign zext_ln354_fu_450_p1 = i1_0_reg_272;

assign zext_ln365_fu_467_p1 = i2_0_reg_284;

assign zext_ln377_1_fu_766_p1 = i3_0_reg_307;

assign zext_ln377_2_fu_775_p1 = add_ln377_reg_930;

assign zext_ln377_fu_761_p1 = i3_0_reg_307;

always @ (posedge ap_clk) begin
    shl_ln_reg_852[1:0] <= 2'b00;
    select_ln118_1_reg_916[3] <= 1'b0;
    select_ln118_1_reg_916[5] <= 1'b1;
end

endmodule //xor_1_hw

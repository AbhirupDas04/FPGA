// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="b_sort_hw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.735000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=670,HLS_SYN_LUT=1711,HLS_VERSION=2019_1}" *)

module b_sort_hw (
        ap_clk,
        ap_rst,
        input_V_data_dout,
        input_V_data_empty_n,
        input_V_data_read,
        input_V_last_V_dout,
        input_V_last_V_empty_n,
        input_V_last_V_read,
        output_V_data_din,
        output_V_data_full_n,
        output_V_data_write,
        output_V_last_V_din,
        output_V_last_V_full_n,
        output_V_last_V_write
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input  [31:0] input_V_data_dout;
input   input_V_data_empty_n;
output   input_V_data_read;
input  [0:0] input_V_last_V_dout;
input   input_V_last_V_empty_n;
output   input_V_last_V_read;
output  [31:0] output_V_data_din;
input   output_V_data_full_n;
output   output_V_data_write;
output  [0:0] output_V_last_V_din;
input   output_V_last_V_full_n;
output   output_V_last_V_write;

reg input_V_data_read;
reg input_V_last_V_read;
reg output_V_data_write;
reg output_V_last_V_write;

reg    input_V_data_blk_n;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln19_fu_249_p2;
reg    input_V_last_V_blk_n;
reg    output_V_data_blk_n;
wire    ap_CS_fsm_state17;
reg    output_V_last_V_blk_n;
wire   [3:0] i_fu_255_p2;
wire    io_acc_block_signal_op36;
reg    ap_block_state2;
wire   [3:0] i_2_fu_277_p2;
reg   [3:0] i_2_reg_567;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln31_fu_283_p1;
reg   [63:0] zext_ln31_reg_572;
wire   [0:0] icmp_ln29_fu_271_p2;
wire   [3:0] j_fu_294_p2;
reg   [3:0] j_reg_585;
wire    ap_CS_fsm_state5;
wire   [3:0] i_4_fu_306_p2;
reg   [3:0] i_4_reg_593;
wire    ap_CS_fsm_state6;
reg   [3:0] result_addr_2_reg_598;
wire   [0:0] icmp_ln35_fu_300_p2;
reg   [3:0] result_addr_3_reg_604;
wire   [3:0] add_ln34_fu_322_p2;
wire   [31:0] result_q0;
reg   [31:0] result_load_reg_615;
wire    ap_CS_fsm_state7;
wire   [31:0] result_q1;
reg   [31:0] result_load_1_reg_621;
wire   [0:0] and_ln38_1_fu_404_p2;
reg   [0:0] and_ln38_1_reg_628;
wire    ap_CS_fsm_state8;
reg   [0:0] p_Result_s_reg_632;
wire   [31:0] p_Val2_5_fu_514_p3;
reg   [31:0] p_Val2_5_reg_637;
wire   [31:0] p_Val2_6_fu_527_p3;
reg   [31:0] p_Val2_6_reg_643;
wire    ap_CS_fsm_state9;
wire   [3:0] i_3_fu_539_p2;
reg   [3:0] i_3_reg_651;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln48_fu_533_p2;
wire   [0:0] tmp_last_V_fu_550_p2;
reg   [0:0] tmp_last_V_reg_661;
reg   [3:0] arr1_address0;
reg    arr1_ce0;
reg    arr1_we0;
wire   [31:0] arr1_q0;
reg   [3:0] result_address0;
reg    result_ce0;
reg    result_we0;
reg   [31:0] result_d0;
reg   [3:0] result_address1;
reg    result_ce1;
reg    result_we1;
reg   [3:0] i_0_reg_172;
wire    ap_CS_fsm_state1;
reg   [3:0] i1_0_reg_183;
wire    ap_CS_fsm_state4;
reg   [3:0] indvars_iv_reg_194;
reg   [3:0] j_0_reg_206;
reg   [3:0] i2_0_reg_217;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln34_fu_288_p2;
reg   [3:0] i_1_reg_228;
wire    io_acc_block_signal_op137;
wire   [63:0] zext_ln23_fu_266_p1;
wire   [63:0] zext_ln38_fu_312_p1;
wire   [63:0] zext_ln38_1_fu_317_p1;
wire   [63:0] zext_ln51_fu_545_p1;
wire   [31:0] grp_fu_239_p1;
wire    ap_CS_fsm_state10;
wire   [31:0] p_Val2_s_fu_328_p1;
wire   [31:0] bitcast_ln38_1_fu_345_p1;
wire   [7:0] tmp_V_fu_331_p4;
wire   [22:0] tmp_V_1_fu_341_p1;
wire   [0:0] icmp_ln38_1_fu_368_p2;
wire   [0:0] icmp_ln38_fu_362_p2;
wire   [7:0] tmp_1_fu_348_p4;
wire   [22:0] trunc_ln38_1_fu_358_p1;
wire   [0:0] icmp_ln38_3_fu_386_p2;
wire   [0:0] icmp_ln38_2_fu_380_p2;
wire   [0:0] or_ln38_fu_374_p2;
wire   [0:0] or_ln38_1_fu_392_p2;
wire   [0:0] and_ln38_fu_398_p2;
wire   [0:0] grp_fu_243_p2;
wire   [24:0] mantissa_V_fu_418_p4;
wire   [8:0] zext_ln339_fu_432_p1;
wire   [8:0] add_ln339_fu_436_p2;
wire   [7:0] sub_ln1311_fu_450_p2;
wire   [0:0] isNeg_fu_442_p3;
wire  signed [8:0] sext_ln1311_fu_456_p1;
wire  signed [8:0] ush_fu_460_p3;
wire  signed [31:0] sext_ln1311_1_fu_468_p1;
wire  signed [24:0] sext_ln1311_2_fu_472_p1;
wire   [78:0] zext_ln682_fu_428_p1;
wire   [78:0] zext_ln1287_fu_476_p1;
wire   [24:0] r_V_fu_480_p2;
wire   [0:0] tmp_fu_492_p3;
wire   [78:0] r_V_1_fu_486_p2;
wire   [31:0] zext_ln662_fu_500_p1;
wire   [31:0] tmp_3_fu_504_p4;
wire   [31:0] result_V_1_fu_522_p2;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

b_sort_hw_arr1 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
arr1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(arr1_address0),
    .ce0(arr1_ce0),
    .we0(arr1_we0),
    .d0(input_V_data_dout),
    .q0(arr1_q0)
);

b_sort_hw_result #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
result_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(result_address0),
    .ce0(result_ce0),
    .we0(result_we0),
    .d0(result_d0),
    .q0(result_q0),
    .address1(result_address1),
    .ce1(result_ce1),
    .we1(result_we1),
    .d1(result_load_1_reg_621),
    .q1(result_q1)
);

b_sort_hw_sitofp_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
b_sort_hw_sitofp_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_Val2_6_reg_643),
    .ce(1'b1),
    .dout(grp_fu_239_p1)
);

b_sort_hw_fcmp_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
b_sort_hw_fcmp_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(result_q0),
    .din1(result_q1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_243_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_249_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln19_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_183 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_183 <= i_2_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_0_reg_217 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i2_0_reg_217 <= i_4_reg_593;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_249_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln19_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_172 <= i_fu_255_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_0_reg_172 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln34_fu_288_p2 == 1'd1))) begin
        i_1_reg_228 <= 4'd0;
    end else if (((io_acc_block_signal_op137 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        i_1_reg_228 <= i_3_reg_651;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv_reg_194 <= 4'd9;
    end else if (((icmp_ln35_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        indvars_iv_reg_194 <= add_ln34_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_206 <= 4'd0;
    end else if (((icmp_ln35_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        j_0_reg_206 <= j_reg_585;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        and_ln38_1_reg_628 <= and_ln38_1_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_567 <= i_2_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_3_reg_651 <= i_3_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_4_reg_593 <= i_4_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_585 <= j_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln38_1_fu_404_p2))) begin
        p_Result_s_reg_632 <= p_Val2_s_fu_328_p1[32'd31];
        p_Val2_5_reg_637 <= p_Val2_5_fu_514_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_6_reg_643 <= p_Val2_6_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        result_addr_2_reg_598 <= zext_ln38_fu_312_p1;
        result_addr_3_reg_604 <= zext_ln38_1_fu_317_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        result_load_1_reg_621 <= result_q1;
        result_load_reg_615 <= result_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_533_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_last_V_reg_661 <= tmp_last_V_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln31_reg_572[3 : 0] <= zext_ln31_fu_283_p1[3 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        arr1_address0 = zext_ln31_fu_283_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        arr1_address0 = zext_ln23_fu_266_p1;
    end else begin
        arr1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((icmp_ln19_fu_249_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        arr1_ce0 = 1'b1;
    end else begin
        arr1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln19_fu_249_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln19_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        arr1_we0 = 1'b1;
    end else begin
        arr1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_data_blk_n = input_V_data_empty_n;
    end else begin
        input_V_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln19_fu_249_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln19_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_data_read = 1'b1;
    end else begin
        input_V_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_last_V_blk_n = input_V_last_V_empty_n;
    end else begin
        input_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln19_fu_249_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln19_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_last_V_read = 1'b1;
    end else begin
        input_V_last_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_V_data_blk_n = output_V_data_full_n;
    end else begin
        output_V_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op137 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        output_V_data_write = 1'b1;
    end else begin
        output_V_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_V_last_V_blk_n = output_V_last_V_full_n;
    end else begin
        output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op137 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        output_V_last_V_write = 1'b1;
    end else begin
        output_V_last_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        result_address0 = result_addr_3_reg_604;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        result_address0 = zext_ln38_fu_312_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        result_address0 = zext_ln31_reg_572;
    end else begin
        result_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        result_address1 = zext_ln51_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        result_address1 = result_addr_2_reg_598;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        result_address1 = zext_ln38_1_fu_317_p1;
    end else begin
        result_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state4))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        result_ce1 = 1'b1;
    end else begin
        result_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        result_d0 = grp_fu_239_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        result_d0 = arr1_q0;
    end else begin
        result_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state15) & (1'd1 == and_ln38_1_reg_628)))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln38_1_fu_404_p2))) begin
        result_we1 = 1'b1;
    end else begin
        result_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln19_fu_249_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln19_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln19_fu_249_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln19_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln29_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln34_fu_288_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln35_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'd0 == and_ln38_1_fu_404_p2) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln48_fu_533_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((io_acc_block_signal_op137 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_fu_436_p2 = ($signed(zext_ln339_fu_432_p1) + $signed(9'd385));

assign add_ln34_fu_322_p2 = ($signed(indvars_iv_reg_194) + $signed(4'd15));

assign and_ln38_1_fu_404_p2 = (grp_fu_243_p2 & and_ln38_fu_398_p2);

assign and_ln38_fu_398_p2 = (or_ln38_fu_374_p2 & or_ln38_1_fu_392_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = ((icmp_ln19_fu_249_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0));
end

assign bitcast_ln38_1_fu_345_p1 = result_load_1_reg_621;

assign i_2_fu_277_p2 = (i1_0_reg_183 + 4'd1);

assign i_3_fu_539_p2 = (i_1_reg_228 + 4'd1);

assign i_4_fu_306_p2 = (i2_0_reg_217 + 4'd1);

assign i_fu_255_p2 = (i_0_reg_172 + 4'd1);

assign icmp_ln19_fu_249_p2 = ((i_0_reg_172 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_271_p2 = ((i1_0_reg_183 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_288_p2 = ((j_0_reg_206 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_300_p2 = ((i2_0_reg_217 == indvars_iv_reg_194) ? 1'b1 : 1'b0);

assign icmp_ln38_1_fu_368_p2 = ((tmp_V_1_fu_341_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln38_2_fu_380_p2 = ((tmp_1_fu_348_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln38_3_fu_386_p2 = ((trunc_ln38_1_fu_358_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_362_p2 = ((tmp_V_fu_331_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_533_p2 = ((i_1_reg_228 == 4'd10) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op137 = (output_V_last_V_full_n & output_V_data_full_n);

assign io_acc_block_signal_op36 = (input_V_last_V_empty_n & input_V_data_empty_n);

assign isNeg_fu_442_p3 = add_ln339_fu_436_p2[32'd8];

assign j_fu_294_p2 = (j_0_reg_206 + 4'd1);

assign mantissa_V_fu_418_p4 = {{{{1'd1}, {tmp_V_1_fu_341_p1}}}, {1'd0}};

assign or_ln38_1_fu_392_p2 = (icmp_ln38_3_fu_386_p2 | icmp_ln38_2_fu_380_p2);

assign or_ln38_fu_374_p2 = (icmp_ln38_fu_362_p2 | icmp_ln38_1_fu_368_p2);

assign output_V_data_din = result_q1;

assign output_V_last_V_din = tmp_last_V_reg_661;

assign p_Val2_5_fu_514_p3 = ((isNeg_fu_442_p3[0:0] === 1'b1) ? zext_ln662_fu_500_p1 : tmp_3_fu_504_p4);

assign p_Val2_6_fu_527_p3 = ((p_Result_s_reg_632[0:0] === 1'b1) ? result_V_1_fu_522_p2 : p_Val2_5_reg_637);

assign p_Val2_s_fu_328_p1 = result_load_reg_615;

assign r_V_1_fu_486_p2 = zext_ln682_fu_428_p1 << zext_ln1287_fu_476_p1;

assign r_V_fu_480_p2 = mantissa_V_fu_418_p4 >> sext_ln1311_2_fu_472_p1;

assign result_V_1_fu_522_p2 = (32'd0 - p_Val2_5_reg_637);

assign sext_ln1311_1_fu_468_p1 = ush_fu_460_p3;

assign sext_ln1311_2_fu_472_p1 = ush_fu_460_p3;

assign sext_ln1311_fu_456_p1 = $signed(sub_ln1311_fu_450_p2);

assign sub_ln1311_fu_450_p2 = (8'd127 - tmp_V_fu_331_p4);

assign tmp_1_fu_348_p4 = {{bitcast_ln38_1_fu_345_p1[30:23]}};

assign tmp_3_fu_504_p4 = {{r_V_1_fu_486_p2[55:24]}};

assign tmp_V_1_fu_341_p1 = p_Val2_s_fu_328_p1[22:0];

assign tmp_V_fu_331_p4 = {{p_Val2_s_fu_328_p1[30:23]}};

assign tmp_fu_492_p3 = r_V_fu_480_p2[32'd24];

assign tmp_last_V_fu_550_p2 = ((i_1_reg_228 == 4'd9) ? 1'b1 : 1'b0);

assign trunc_ln38_1_fu_358_p1 = bitcast_ln38_1_fu_345_p1[22:0];

assign ush_fu_460_p3 = ((isNeg_fu_442_p3[0:0] === 1'b1) ? sext_ln1311_fu_456_p1 : add_ln339_fu_436_p2);

assign zext_ln1287_fu_476_p1 = $unsigned(sext_ln1311_1_fu_468_p1);

assign zext_ln23_fu_266_p1 = i_0_reg_172;

assign zext_ln31_fu_283_p1 = i1_0_reg_183;

assign zext_ln339_fu_432_p1 = tmp_V_fu_331_p4;

assign zext_ln38_1_fu_317_p1 = i_4_fu_306_p2;

assign zext_ln38_fu_312_p1 = i2_0_reg_217;

assign zext_ln51_fu_545_p1 = i_1_reg_228;

assign zext_ln662_fu_500_p1 = tmp_fu_492_p3;

assign zext_ln682_fu_428_p1 = mantissa_V_fu_418_p4;

always @ (posedge ap_clk) begin
    zext_ln31_reg_572[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //b_sort_hw

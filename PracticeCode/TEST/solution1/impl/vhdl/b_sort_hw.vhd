-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity b_sort_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_V_data_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    input_V_data_empty_n : IN STD_LOGIC;
    input_V_data_read : OUT STD_LOGIC;
    input_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_last_V_empty_n : IN STD_LOGIC;
    input_V_last_V_read : OUT STD_LOGIC;
    output_V_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_V_data_full_n : IN STD_LOGIC;
    output_V_data_write : OUT STD_LOGIC;
    output_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_last_V_full_n : IN STD_LOGIC;
    output_V_last_V_write : OUT STD_LOGIC );
end;


architecture behav of b_sort_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "b_sort_hw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.735000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=670,HLS_SYN_LUT=1711,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal input_V_data_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln19_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_V_last_V_blk_n : STD_LOGIC;
    signal output_V_data_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal output_V_last_V_blk_n : STD_LOGIC;
    signal i_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal io_acc_block_signal_op36 : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal i_2_fu_277_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_567 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln31_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_572 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln29_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_294_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_585 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_4_fu_306_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_593 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal result_addr_2_reg_598 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln35_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_addr_3_reg_604 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_322_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal result_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_1_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln38_1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_1_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_Result_s_reg_632 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_527_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_3_fu_539_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_651 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln48_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_661 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr1_ce0 : STD_LOGIC;
    signal arr1_we0 : STD_LOGIC;
    signal arr1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_ce1 : STD_LOGIC;
    signal result_we1 : STD_LOGIC;
    signal i_0_reg_172 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i1_0_reg_183 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal indvars_iv_reg_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_206 : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_0_reg_217 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln34_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_228 : STD_LOGIC_VECTOR (3 downto 0);
    signal io_acc_block_signal_op137 : STD_LOGIC;
    signal zext_ln23_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_1_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_s_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln38_1_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_331_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_341_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln38_1_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_348_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_1_fu_358_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln38_3_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_2_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_1_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mantissa_V_fu_418_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln339_fu_432_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_436_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_450_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_456_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_460_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_472_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_428_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_476_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_480_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_486_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_504_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component b_sort_hw_sitofp_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component b_sort_hw_fcmp_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component b_sort_hw_arr1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component b_sort_hw_result IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    arr1_U : component b_sort_hw_arr1
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arr1_address0,
        ce0 => arr1_ce0,
        we0 => arr1_we0,
        d0 => input_V_data_dout,
        q0 => arr1_q0);

    result_U : component b_sort_hw_result
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => result_d0,
        q0 => result_q0,
        address1 => result_address1,
        ce1 => result_ce1,
        we1 => result_we1,
        d1 => result_load_1_reg_621,
        q1 => result_q1);

    b_sort_hw_sitofp_bkb_U1 : component b_sort_hw_sitofp_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Val2_6_reg_643,
        ce => ap_const_logic_1,
        dout => grp_fu_239_p1);

    b_sort_hw_fcmp_32cud_U2 : component b_sort_hw_fcmp_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => result_q0,
        din1 => result_q1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_243_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (io_acc_block_signal_op36 = ap_const_logic_0))) and (icmp_ln19_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_183 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_reg_183 <= i_2_reg_567;
            end if; 
        end if;
    end process;

    i2_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_288_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_0_reg_217 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i2_0_reg_217 <= i_4_reg_593;
            end if; 
        end if;
    end process;

    i_0_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (io_acc_block_signal_op36 = ap_const_logic_0))) and (icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_172 <= i_fu_255_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_0_reg_172 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_288_p2 = ap_const_lv1_1))) then 
                i_1_reg_228 <= ap_const_lv4_0;
            elsif (((io_acc_block_signal_op137 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_1_reg_228 <= i_3_reg_651;
            end if; 
        end if;
    end process;

    indvars_iv_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv_reg_194 <= ap_const_lv4_9;
            elsif (((icmp_ln35_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                indvars_iv_reg_194 <= add_ln34_fu_322_p2;
            end if; 
        end if;
    end process;

    j_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_206 <= ap_const_lv4_0;
            elsif (((icmp_ln35_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_0_reg_206 <= j_reg_585;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                and_ln38_1_reg_628 <= and_ln38_1_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_2_reg_567 <= i_2_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_3_reg_651 <= i_3_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_4_reg_593 <= i_4_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_585 <= j_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln38_1_fu_404_p2))) then
                p_Result_s_reg_632 <= p_Val2_s_fu_328_p1(31 downto 31);
                p_Val2_5_reg_637 <= p_Val2_5_fu_514_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_6_reg_643 <= p_Val2_6_fu_527_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                result_addr_2_reg_598 <= zext_ln38_fu_312_p1(4 - 1 downto 0);
                result_addr_3_reg_604 <= zext_ln38_1_fu_317_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                result_load_1_reg_621 <= result_q1;
                result_load_reg_615 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_533_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                tmp_last_V_reg_661 <= tmp_last_V_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln31_reg_572(3 downto 0) <= zext_ln31_fu_283_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln31_reg_572(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, icmp_ln19_fu_249_p2, ap_CS_fsm_state17, io_acc_block_signal_op36, ap_CS_fsm_state3, icmp_ln29_fu_271_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln35_fu_300_p2, and_ln38_1_fu_404_p2, ap_CS_fsm_state8, ap_CS_fsm_state16, icmp_ln48_fu_533_p2, icmp_ln34_fu_288_p2, io_acc_block_signal_op137)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (io_acc_block_signal_op36 = ap_const_logic_0))) and (icmp_ln19_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (io_acc_block_signal_op36 = ap_const_logic_0))) and (icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln29_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_288_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln35_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_lv1_0 = and_ln38_1_fu_404_p2) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln48_fu_533_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((io_acc_block_signal_op137 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln339_fu_436_p2 <= std_logic_vector(unsigned(zext_ln339_fu_432_p1) + unsigned(ap_const_lv9_181));
    add_ln34_fu_322_p2 <= std_logic_vector(unsigned(indvars_iv_reg_194) + unsigned(ap_const_lv4_F));
    and_ln38_1_fu_404_p2 <= (grp_fu_243_p2 and and_ln38_fu_398_p2);
    and_ln38_fu_398_p2 <= (or_ln38_fu_374_p2 and or_ln38_1_fu_392_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_assign_proc : process(icmp_ln19_fu_249_p2, io_acc_block_signal_op36)
    begin
                ap_block_state2 <= ((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (io_acc_block_signal_op36 = ap_const_logic_0));
    end process;


    arr1_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln31_fu_283_p1, zext_ln23_fu_266_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            arr1_address0 <= zext_ln31_fu_283_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            arr1_address0 <= zext_ln23_fu_266_p1(4 - 1 downto 0);
        else 
            arr1_address0 <= "XXXX";
        end if; 
    end process;


    arr1_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_249_p2, io_acc_block_signal_op36, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (io_acc_block_signal_op36 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            arr1_ce0 <= ap_const_logic_1;
        else 
            arr1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr1_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_249_p2, io_acc_block_signal_op36)
    begin
        if ((not(((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (io_acc_block_signal_op36 = ap_const_logic_0))) and (icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            arr1_we0 <= ap_const_logic_1;
        else 
            arr1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln38_1_fu_345_p1 <= result_load_1_reg_621;
    i_2_fu_277_p2 <= std_logic_vector(unsigned(i1_0_reg_183) + unsigned(ap_const_lv4_1));
    i_3_fu_539_p2 <= std_logic_vector(unsigned(i_1_reg_228) + unsigned(ap_const_lv4_1));
    i_4_fu_306_p2 <= std_logic_vector(unsigned(i2_0_reg_217) + unsigned(ap_const_lv4_1));
    i_fu_255_p2 <= std_logic_vector(unsigned(i_0_reg_172) + unsigned(ap_const_lv4_1));
    icmp_ln19_fu_249_p2 <= "1" when (i_0_reg_172 = ap_const_lv4_A) else "0";
    icmp_ln29_fu_271_p2 <= "1" when (i1_0_reg_183 = ap_const_lv4_A) else "0";
    icmp_ln34_fu_288_p2 <= "1" when (j_0_reg_206 = ap_const_lv4_9) else "0";
    icmp_ln35_fu_300_p2 <= "1" when (i2_0_reg_217 = indvars_iv_reg_194) else "0";
    icmp_ln38_1_fu_368_p2 <= "1" when (tmp_V_1_fu_341_p1 = ap_const_lv23_0) else "0";
    icmp_ln38_2_fu_380_p2 <= "0" when (tmp_1_fu_348_p4 = ap_const_lv8_FF) else "1";
    icmp_ln38_3_fu_386_p2 <= "1" when (trunc_ln38_1_fu_358_p1 = ap_const_lv23_0) else "0";
    icmp_ln38_fu_362_p2 <= "0" when (tmp_V_fu_331_p4 = ap_const_lv8_FF) else "1";
    icmp_ln48_fu_533_p2 <= "1" when (i_1_reg_228 = ap_const_lv4_A) else "0";

    input_V_data_blk_n_assign_proc : process(input_V_data_empty_n, ap_CS_fsm_state2, icmp_ln19_fu_249_p2)
    begin
        if (((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_V_data_blk_n <= input_V_data_empty_n;
        else 
            input_V_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_V_data_read_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_249_p2, io_acc_block_signal_op36)
    begin
        if ((not(((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (io_acc_block_signal_op36 = ap_const_logic_0))) and (icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_V_data_read <= ap_const_logic_1;
        else 
            input_V_data_read <= ap_const_logic_0;
        end if; 
    end process;


    input_V_last_V_blk_n_assign_proc : process(input_V_last_V_empty_n, ap_CS_fsm_state2, icmp_ln19_fu_249_p2)
    begin
        if (((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_V_last_V_blk_n <= input_V_last_V_empty_n;
        else 
            input_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_V_last_V_read_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_249_p2, io_acc_block_signal_op36)
    begin
        if ((not(((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (io_acc_block_signal_op36 = ap_const_logic_0))) and (icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_V_last_V_read <= ap_const_logic_1;
        else 
            input_V_last_V_read <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op137 <= (output_V_last_V_full_n and output_V_data_full_n);
    io_acc_block_signal_op36 <= (input_V_last_V_empty_n and input_V_data_empty_n);
    isNeg_fu_442_p3 <= add_ln339_fu_436_p2(8 downto 8);
    j_fu_294_p2 <= std_logic_vector(unsigned(j_0_reg_206) + unsigned(ap_const_lv4_1));
    mantissa_V_fu_418_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_341_p1) & ap_const_lv1_0);
    or_ln38_1_fu_392_p2 <= (icmp_ln38_3_fu_386_p2 or icmp_ln38_2_fu_380_p2);
    or_ln38_fu_374_p2 <= (icmp_ln38_fu_362_p2 or icmp_ln38_1_fu_368_p2);

    output_V_data_blk_n_assign_proc : process(output_V_data_full_n, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_V_data_blk_n <= output_V_data_full_n;
        else 
            output_V_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_V_data_din <= result_q1;

    output_V_data_write_assign_proc : process(ap_CS_fsm_state17, io_acc_block_signal_op137)
    begin
        if (((io_acc_block_signal_op137 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output_V_data_write <= ap_const_logic_1;
        else 
            output_V_data_write <= ap_const_logic_0;
        end if; 
    end process;


    output_V_last_V_blk_n_assign_proc : process(output_V_last_V_full_n, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_V_last_V_blk_n <= output_V_last_V_full_n;
        else 
            output_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_V_last_V_din <= tmp_last_V_reg_661;

    output_V_last_V_write_assign_proc : process(ap_CS_fsm_state17, io_acc_block_signal_op137)
    begin
        if (((io_acc_block_signal_op137 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output_V_last_V_write <= ap_const_logic_1;
        else 
            output_V_last_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_5_fu_514_p3 <= 
        zext_ln662_fu_500_p1 when (isNeg_fu_442_p3(0) = '1') else 
        tmp_3_fu_504_p4;
    p_Val2_6_fu_527_p3 <= 
        result_V_1_fu_522_p2 when (p_Result_s_reg_632(0) = '1') else 
        p_Val2_5_reg_637;
    p_Val2_s_fu_328_p1 <= result_load_reg_615;
    r_V_1_fu_486_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_428_p1),to_integer(unsigned('0' & zext_ln1287_fu_476_p1(31-1 downto 0)))));
    r_V_fu_480_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_418_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_472_p1(25-1 downto 0)))));
    result_V_1_fu_522_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_637));

    result_address0_assign_proc : process(zext_ln31_reg_572, ap_CS_fsm_state6, result_addr_3_reg_604, ap_CS_fsm_state4, ap_CS_fsm_state15, zext_ln38_fu_312_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            result_address0 <= result_addr_3_reg_604;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            result_address0 <= zext_ln38_fu_312_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            result_address0 <= zext_ln31_reg_572(4 - 1 downto 0);
        else 
            result_address0 <= "XXXX";
        end if; 
    end process;


    result_address1_assign_proc : process(ap_CS_fsm_state6, result_addr_2_reg_598, ap_CS_fsm_state8, ap_CS_fsm_state16, zext_ln38_1_fu_317_p1, zext_ln51_fu_545_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            result_address1 <= zext_ln51_fu_545_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            result_address1 <= result_addr_2_reg_598;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            result_address1 <= zext_ln38_1_fu_317_p1(4 - 1 downto 0);
        else 
            result_address1 <= "XXXX";
        end if; 
    end process;


    result_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            result_ce1 <= ap_const_logic_1;
        else 
            result_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    result_d0_assign_proc : process(arr1_q0, ap_CS_fsm_state4, ap_CS_fsm_state15, grp_fu_239_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            result_d0 <= grp_fu_239_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            result_d0 <= arr1_q0;
        else 
            result_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_we0_assign_proc : process(and_ln38_1_reg_628, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = and_ln38_1_reg_628)))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we1_assign_proc : process(and_ln38_1_fu_404_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln38_1_fu_404_p2))) then 
            result_we1 <= ap_const_logic_1;
        else 
            result_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1311_1_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_460_p3),32));

        sext_ln1311_2_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_460_p3),25));

        sext_ln1311_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_450_p2),9));

    sub_ln1311_fu_450_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_331_p4));
    tmp_1_fu_348_p4 <= bitcast_ln38_1_fu_345_p1(30 downto 23);
    tmp_3_fu_504_p4 <= r_V_1_fu_486_p2(55 downto 24);
    tmp_V_1_fu_341_p1 <= p_Val2_s_fu_328_p1(23 - 1 downto 0);
    tmp_V_fu_331_p4 <= p_Val2_s_fu_328_p1(30 downto 23);
    tmp_fu_492_p3 <= r_V_fu_480_p2(24 downto 24);
    tmp_last_V_fu_550_p2 <= "1" when (i_1_reg_228 = ap_const_lv4_9) else "0";
    trunc_ln38_1_fu_358_p1 <= bitcast_ln38_1_fu_345_p1(23 - 1 downto 0);
    ush_fu_460_p3 <= 
        sext_ln1311_fu_456_p1 when (isNeg_fu_442_p3(0) = '1') else 
        add_ln339_fu_436_p2;
    zext_ln1287_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_468_p1),79));
    zext_ln23_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_172),64));
    zext_ln31_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_183),64));
    zext_ln339_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_331_p4),9));
    zext_ln38_1_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_306_p2),64));
    zext_ln38_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_217),64));
    zext_ln51_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_228),64));
    zext_ln662_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_492_p3),32));
    zext_ln682_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_418_p4),79));
end behav;

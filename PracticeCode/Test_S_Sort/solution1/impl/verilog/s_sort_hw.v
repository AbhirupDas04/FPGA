// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="s_sort_hw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.735000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1118,HLS_SYN_LUT=1948,HLS_VERSION=2019_1}" *)

module s_sort_hw (
        ap_clk,
        ap_rst_n,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TLAST,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TLAST
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_pp1_stage0 = 17'd32768;
parameter    ap_ST_fsm_state19 = 17'd65536;

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [0:0] input_r_TLAST;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [0:0] output_r_TLAST;

 reg    ap_rst_n_inv;
reg   [31:0] input_V_data_0_data_out;
wire    input_V_data_0_vld_in;
wire    input_V_data_0_vld_out;
wire    input_V_data_0_ack_in;
reg    input_V_data_0_ack_out;
reg   [31:0] input_V_data_0_payload_A;
reg   [31:0] input_V_data_0_payload_B;
reg    input_V_data_0_sel_rd;
reg    input_V_data_0_sel_wr;
wire    input_V_data_0_sel;
wire    input_V_data_0_load_A;
wire    input_V_data_0_load_B;
reg   [1:0] input_V_data_0_state;
wire    input_V_data_0_state_cmp_full;
wire    input_V_last_V_0_vld_in;
reg    input_V_last_V_0_ack_out;
reg   [1:0] input_V_last_V_0_state;
reg   [31:0] output_V_data_1_data_out;
reg    output_V_data_1_vld_in;
wire    output_V_data_1_vld_out;
wire    output_V_data_1_ack_in;
wire    output_V_data_1_ack_out;
reg   [31:0] output_V_data_1_payload_A;
reg   [31:0] output_V_data_1_payload_B;
reg    output_V_data_1_sel_rd;
reg    output_V_data_1_sel_wr;
wire    output_V_data_1_sel;
wire    output_V_data_1_load_A;
wire    output_V_data_1_load_B;
reg   [1:0] output_V_data_1_state;
wire    output_V_data_1_state_cmp_full;
reg   [0:0] output_V_last_V_1_data_out;
reg    output_V_last_V_1_vld_in;
wire    output_V_last_V_1_vld_out;
wire    output_V_last_V_1_ack_in;
wire    output_V_last_V_1_ack_out;
reg   [0:0] output_V_last_V_1_payload_A;
reg   [0:0] output_V_last_V_1_payload_B;
reg    output_V_last_V_1_sel_rd;
reg    output_V_last_V_1_sel_wr;
wire    output_V_last_V_1_sel;
wire    output_V_last_V_1_load_A;
wire    output_V_last_V_1_load_B;
reg   [1:0] output_V_last_V_1_state;
wire    output_V_last_V_1_state_cmp_full;
reg    input_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln19_fu_301_p2;
reg    output_r_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln44_reg_843;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln44_reg_843_pp1_iter1_reg;
reg   [3:0] i_1_reg_249;
wire   [3:0] i_2_fu_307_p2;
reg    ap_block_state2;
wire   [3:0] i_fu_373_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] zext_ln33_fu_411_p1;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln33_fu_415_p2;
wire   [3:0] i_4_fu_421_p2;
reg   [3:0] i_4_reg_785;
reg   [3:0] result_addr_1_reg_790;
wire  signed [31:0] j_fu_432_p2;
reg  signed [31:0] j_reg_796;
wire    ap_CS_fsm_state6;
reg   [3:0] result_addr_2_reg_804;
wire   [0:0] icmp_ln34_fu_438_p2;
wire   [31:0] result_q0;
reg   [31:0] result_load_reg_810;
wire    ap_CS_fsm_state7;
wire   [31:0] result_q1;
reg   [31:0] result_load_1_reg_816;
wire   [0:0] and_ln35_1_fu_525_p2;
reg   [0:0] and_ln35_1_reg_823;
wire    ap_CS_fsm_state8;
reg   [0:0] p_Result_s_reg_827;
wire   [31:0] p_Val2_5_fu_635_p3;
reg   [31:0] p_Val2_5_reg_832;
wire   [31:0] p_Val2_6_fu_648_p3;
reg   [31:0] p_Val2_6_reg_838;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln44_fu_654_p2;
wire    ap_block_state16_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
reg    ap_block_state17_io;
wire    ap_block_state18_pp1_stage0_iter2;
reg    ap_block_state18_io;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] i_5_fu_660_p2;
reg   [3:0] i_5_reg_847;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] tmp_data_2_fu_666_p12;
wire   [0:0] tmp_last_V_fu_693_p2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state16;
reg   [3:0] result_address0;
reg    result_ce0;
reg    result_we0;
reg   [31:0] result_d0;
reg   [3:0] result_address1;
reg    result_ce1;
reg    result_we1;
wire   [3:0] ap_phi_mux_i_0_phi_fu_211_p4;
reg   [3:0] i_0_reg_207;
wire    ap_CS_fsm_state1;
reg   [3:0] i1_0_reg_218;
wire   [0:0] icmp_ln29_fu_367_p2;
wire    ap_CS_fsm_state3;
reg   [3:0] i2_0_reg_229;
reg   [31:0] j_0_in_reg_240;
wire    ap_CS_fsm_state15;
reg   [3:0] ap_phi_mux_i_1_phi_fu_253_p4;
wire   [63:0] zext_ln30_fu_379_p1;
wire   [63:0] zext_ln35_fu_427_p1;
wire  signed [63:0] sext_ln35_fu_444_p1;
reg   [31:0] tmp_data_fu_116;
reg   [31:0] tmp_data_1_fu_120;
reg   [31:0] tmp_data_3_fu_124;
reg   [31:0] tmp_data_4_fu_128;
reg   [31:0] tmp_data_5_fu_132;
reg   [31:0] tmp_data_6_fu_136;
reg   [31:0] tmp_data_7_fu_140;
reg   [31:0] tmp_data_8_fu_144;
reg   [31:0] tmp_data_9_fu_148;
reg   [31:0] tmp_data_10_fu_152;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] tmp_1_fu_384_p12;
wire   [31:0] grp_fu_261_p1;
wire    ap_CS_fsm_state10;
wire   [31:0] p_Val2_s_fu_449_p1;
wire   [31:0] bitcast_ln35_1_fu_466_p1;
wire   [7:0] tmp_V_fu_452_p4;
wire   [22:0] tmp_V_1_fu_462_p1;
wire   [0:0] icmp_ln35_1_fu_489_p2;
wire   [0:0] icmp_ln35_fu_483_p2;
wire   [7:0] tmp_6_fu_469_p4;
wire   [22:0] trunc_ln35_1_fu_479_p1;
wire   [0:0] icmp_ln35_3_fu_507_p2;
wire   [0:0] icmp_ln35_2_fu_501_p2;
wire   [0:0] or_ln35_fu_495_p2;
wire   [0:0] or_ln35_1_fu_513_p2;
wire   [0:0] and_ln35_fu_519_p2;
wire   [0:0] grp_fu_265_p2;
wire   [24:0] mantissa_V_fu_539_p4;
wire   [8:0] zext_ln339_fu_553_p1;
wire   [8:0] add_ln339_fu_557_p2;
wire   [7:0] sub_ln1311_fu_571_p2;
wire   [0:0] isNeg_fu_563_p3;
wire  signed [8:0] sext_ln1311_fu_577_p1;
wire  signed [8:0] ush_fu_581_p3;
wire  signed [31:0] sext_ln1311_1_fu_589_p1;
wire  signed [24:0] sext_ln1311_2_fu_593_p1;
wire   [78:0] zext_ln682_fu_549_p1;
wire   [78:0] zext_ln1287_fu_597_p1;
wire   [24:0] r_V_fu_601_p2;
wire   [0:0] tmp_9_fu_613_p3;
wire   [78:0] r_V_1_fu_607_p2;
wire   [31:0] zext_ln662_fu_621_p1;
wire   [31:0] tmp_5_fu_625_p4;
wire   [31:0] result_V_1_fu_643_p2;
reg   [16:0] ap_NS_fsm;
wire    ap_CS_fsm_state19;
reg    ap_block_state19;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 input_V_data_0_sel_rd = 1'b0;
#0 input_V_data_0_sel_wr = 1'b0;
#0 input_V_data_0_state = 2'd0;
#0 input_V_last_V_0_state = 2'd0;
#0 output_V_data_1_sel_rd = 1'b0;
#0 output_V_data_1_sel_wr = 1'b0;
#0 output_V_data_1_state = 2'd0;
#0 output_V_last_V_1_sel_rd = 1'b0;
#0 output_V_last_V_1_sel_wr = 1'b0;
#0 output_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

s_sort_hw_result #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
result_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_address0),
    .ce0(result_ce0),
    .we0(result_we0),
    .d0(result_d0),
    .q0(result_q0),
    .address1(result_address1),
    .ce1(result_ce1),
    .we1(result_we1),
    .d1(result_load_1_reg_816),
    .q1(result_q1)
);

s_sort_hw_sitofp_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
s_sort_hw_sitofp_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_6_reg_838),
    .ce(1'b1),
    .dout(grp_fu_261_p1)
);

s_sort_hw_fcmp_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
s_sort_hw_fcmp_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(result_q0),
    .din1(result_q1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_265_p2)
);

s_sort_hw_mux_104dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
s_sort_hw_mux_104dEe_U3(
    .din0(tmp_data_fu_116),
    .din1(tmp_data_1_fu_120),
    .din2(tmp_data_3_fu_124),
    .din3(tmp_data_4_fu_128),
    .din4(tmp_data_5_fu_132),
    .din5(tmp_data_6_fu_136),
    .din6(tmp_data_7_fu_140),
    .din7(tmp_data_8_fu_144),
    .din8(tmp_data_9_fu_148),
    .din9(tmp_data_10_fu_152),
    .din10(i1_0_reg_218),
    .dout(tmp_1_fu_384_p12)
);

s_sort_hw_mux_104dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
s_sort_hw_mux_104dEe_U4(
    .din0(tmp_data_fu_116),
    .din1(tmp_data_1_fu_120),
    .din2(tmp_data_3_fu_124),
    .din3(tmp_data_4_fu_128),
    .din4(tmp_data_5_fu_132),
    .din5(tmp_data_6_fu_136),
    .din6(tmp_data_7_fu_140),
    .din7(tmp_data_8_fu_144),
    .din8(tmp_data_9_fu_148),
    .din9(tmp_data_10_fu_152),
    .din10(i_1_reg_249),
    .dout(tmp_data_2_fu_666_p12)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln33_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state16)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((icmp_ln33_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((input_V_data_0_ack_out == 1'b1) & (input_V_data_0_vld_out == 1'b1))) begin
            input_V_data_0_sel_rd <= ~input_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((input_V_data_0_ack_in == 1'b1) & (input_V_data_0_vld_in == 1'b1))) begin
            input_V_data_0_sel_wr <= ~input_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_data_0_state <= 2'd0;
    end else begin
        if ((((input_V_data_0_state == 2'd2) & (input_V_data_0_vld_in == 1'b0)) | ((input_V_data_0_state == 2'd3) & (input_V_data_0_vld_in == 1'b0) & (input_V_data_0_ack_out == 1'b1)))) begin
            input_V_data_0_state <= 2'd2;
        end else if ((((input_V_data_0_state == 2'd1) & (input_V_data_0_ack_out == 1'b0)) | ((input_V_data_0_state == 2'd3) & (input_V_data_0_ack_out == 1'b0) & (input_V_data_0_vld_in == 1'b1)))) begin
            input_V_data_0_state <= 2'd1;
        end else if (((~((input_V_data_0_vld_in == 1'b0) & (input_V_data_0_ack_out == 1'b1)) & ~((input_V_data_0_ack_out == 1'b0) & (input_V_data_0_vld_in == 1'b1)) & (input_V_data_0_state == 2'd3)) | ((input_V_data_0_state == 2'd1) & (input_V_data_0_ack_out == 1'b1)) | ((input_V_data_0_state == 2'd2) & (input_V_data_0_vld_in == 1'b1)))) begin
            input_V_data_0_state <= 2'd3;
        end else begin
            input_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((input_V_last_V_0_state == 2'd2) & (input_V_last_V_0_vld_in == 1'b0)) | ((input_V_last_V_0_state == 2'd3) & (input_V_last_V_0_vld_in == 1'b0) & (input_V_last_V_0_ack_out == 1'b1)))) begin
            input_V_last_V_0_state <= 2'd2;
        end else if ((((input_V_last_V_0_state == 2'd1) & (input_V_last_V_0_ack_out == 1'b0)) | ((input_V_last_V_0_state == 2'd3) & (input_V_last_V_0_ack_out == 1'b0) & (input_V_last_V_0_vld_in == 1'b1)))) begin
            input_V_last_V_0_state <= 2'd1;
        end else if (((~((input_V_last_V_0_vld_in == 1'b0) & (input_V_last_V_0_ack_out == 1'b1)) & ~((input_V_last_V_0_ack_out == 1'b0) & (input_V_last_V_0_vld_in == 1'b1)) & (input_V_last_V_0_state == 2'd3)) | ((input_V_last_V_0_state == 2'd1) & (input_V_last_V_0_ack_out == 1'b1)) | ((input_V_last_V_0_state == 2'd2) & (input_V_last_V_0_vld_in == 1'b1)))) begin
            input_V_last_V_0_state <= 2'd3;
        end else begin
            input_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_data_1_ack_out == 1'b1) & (output_V_data_1_vld_out == 1'b1))) begin
            output_V_data_1_sel_rd <= ~output_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((output_V_data_1_ack_in == 1'b1) & (output_V_data_1_vld_in == 1'b1))) begin
            output_V_data_1_sel_wr <= ~output_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_data_1_state <= 2'd0;
    end else begin
        if ((((output_V_data_1_state == 2'd2) & (output_V_data_1_vld_in == 1'b0)) | ((output_V_data_1_state == 2'd3) & (output_V_data_1_vld_in == 1'b0) & (output_V_data_1_ack_out == 1'b1)))) begin
            output_V_data_1_state <= 2'd2;
        end else if ((((output_V_data_1_state == 2'd1) & (output_r_TREADY == 1'b0)) | ((output_V_data_1_state == 2'd3) & (output_r_TREADY == 1'b0) & (output_V_data_1_vld_in == 1'b1)))) begin
            output_V_data_1_state <= 2'd1;
        end else if (((~((output_V_data_1_vld_in == 1'b0) & (output_V_data_1_ack_out == 1'b1)) & ~((output_r_TREADY == 1'b0) & (output_V_data_1_vld_in == 1'b1)) & (output_V_data_1_state == 2'd3)) | ((output_V_data_1_state == 2'd1) & (output_V_data_1_ack_out == 1'b1)) | ((output_V_data_1_state == 2'd2) & (output_V_data_1_vld_in == 1'b1)))) begin
            output_V_data_1_state <= 2'd3;
        end else begin
            output_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_last_V_1_ack_out == 1'b1) & (output_V_last_V_1_vld_out == 1'b1))) begin
            output_V_last_V_1_sel_rd <= ~output_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_V_last_V_1_ack_in == 1'b1) & (output_V_last_V_1_vld_in == 1'b1))) begin
            output_V_last_V_1_sel_wr <= ~output_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((output_V_last_V_1_state == 2'd2) & (output_V_last_V_1_vld_in == 1'b0)) | ((output_V_last_V_1_state == 2'd3) & (output_V_last_V_1_vld_in == 1'b0) & (output_V_last_V_1_ack_out == 1'b1)))) begin
            output_V_last_V_1_state <= 2'd2;
        end else if ((((output_V_last_V_1_state == 2'd1) & (output_r_TREADY == 1'b0)) | ((output_V_last_V_1_state == 2'd3) & (output_r_TREADY == 1'b0) & (output_V_last_V_1_vld_in == 1'b1)))) begin
            output_V_last_V_1_state <= 2'd1;
        end else if (((~((output_V_last_V_1_vld_in == 1'b0) & (output_V_last_V_1_ack_out == 1'b1)) & ~((output_r_TREADY == 1'b0) & (output_V_last_V_1_vld_in == 1'b1)) & (output_V_last_V_1_state == 2'd3)) | ((output_V_last_V_1_state == 2'd1) & (output_V_last_V_1_ack_out == 1'b1)) | ((output_V_last_V_1_state == 2'd2) & (output_V_last_V_1_vld_in == 1'b1)))) begin
            output_V_last_V_1_state <= 2'd3;
        end else begin
            output_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_0_reg_218 <= 4'd0;
    end else if (((icmp_ln29_fu_367_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i1_0_reg_218 <= i_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i2_0_reg_229 <= 4'd0;
    end else if (((icmp_ln34_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i2_0_reg_229 <= i_4_reg_785;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_207 <= i_2_fu_307_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_0_reg_207 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_249 <= 4'd0;
    end else if (((icmp_ln44_reg_843 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_249 <= i_5_reg_847;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_in_reg_240 <= zext_ln33_fu_411_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_in_reg_240 <= j_reg_796;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        and_ln35_1_reg_823 <= and_ln35_1_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_4_reg_785 <= i_4_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_5_reg_847 <= i_5_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln44_reg_843 <= icmp_ln44_fu_654_p2;
        icmp_ln44_reg_843_pp1_iter1_reg <= icmp_ln44_reg_843;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_data_0_load_A == 1'b1)) begin
        input_V_data_0_payload_A <= input_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_data_0_load_B == 1'b1)) begin
        input_V_data_0_payload_B <= input_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_796 <= j_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_data_1_load_A == 1'b1)) begin
        output_V_data_1_payload_A <= tmp_data_2_fu_666_p12;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_data_1_load_B == 1'b1)) begin
        output_V_data_1_payload_B <= tmp_data_2_fu_666_p12;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_last_V_1_load_A == 1'b1)) begin
        output_V_last_V_1_payload_A <= tmp_last_V_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_last_V_1_load_B == 1'b1)) begin
        output_V_last_V_1_payload_B <= tmp_last_V_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln35_1_fu_525_p2) & (1'b1 == ap_CS_fsm_state8))) begin
        p_Result_s_reg_827 <= p_Val2_s_fu_449_p1[32'd31];
        p_Val2_5_reg_832 <= p_Val2_5_fu_635_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_6_reg_838 <= p_Val2_6_fu_648_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        result_addr_1_reg_790 <= zext_ln35_fu_427_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        result_addr_2_reg_804 <= sext_ln35_fu_444_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        result_load_1_reg_816 <= result_q1;
        result_load_reg_810 <= result_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_i_0_phi_fu_211_p4 == 4'd8) & ~(ap_phi_mux_i_0_phi_fu_211_p4 == 4'd7) & ~(ap_phi_mux_i_0_phi_fu_211_p4 == 4'd6) & ~(ap_phi_mux_i_0_phi_fu_211_p4 == 4'd5) & ~(ap_phi_mux_i_0_phi_fu_211_p4 == 4'd4) & ~(ap_phi_mux_i_0_phi_fu_211_p4 == 4'd3) & ~(ap_phi_mux_i_0_phi_fu_211_p4 == 4'd2) & ~(ap_phi_mux_i_0_phi_fu_211_p4 == 4'd1) & ~(ap_phi_mux_i_0_phi_fu_211_p4 == 4'd0) & ~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_10_fu_152 <= input_V_data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_211_p4 == 4'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_1_fu_120 <= input_V_data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_211_p4 == 4'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_3_fu_124 <= input_V_data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_211_p4 == 4'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_4_fu_128 <= input_V_data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_211_p4 == 4'd4) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_5_fu_132 <= input_V_data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_211_p4 == 4'd5) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_6_fu_136 <= input_V_data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_211_p4 == 4'd6) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_7_fu_140 <= input_V_data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_211_p4 == 4'd7) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_8_fu_144 <= input_V_data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_211_p4 == 4'd8) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_9_fu_148 <= input_V_data_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_211_p4 == 4'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_fu_116 <= input_V_data_0_data_out;
    end
end

always @ (*) begin
    if ((icmp_ln44_fu_654_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_843 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_253_p4 = i_5_reg_847;
    end else begin
        ap_phi_mux_i_1_phi_fu_253_p4 = i_1_reg_249;
    end
end

always @ (*) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_data_0_ack_out = 1'b1;
    end else begin
        input_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_V_data_0_sel == 1'b1)) begin
        input_V_data_0_data_out = input_V_data_0_payload_B;
    end else begin
        input_V_data_0_data_out = input_V_data_0_payload_A;
    end
end

always @ (*) begin
    if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_last_V_0_ack_out = 1'b1;
    end else begin
        input_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_r_TDATA_blk_n = input_V_data_0_state[1'd0];
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((output_V_data_1_sel == 1'b1)) begin
        output_V_data_1_data_out = output_V_data_1_payload_B;
    end else begin
        output_V_data_1_data_out = output_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_843 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_V_data_1_vld_in = 1'b1;
    end else begin
        output_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_V_last_V_1_sel == 1'b1)) begin
        output_V_last_V_1_data_out = output_V_last_V_1_payload_B;
    end else begin
        output_V_last_V_1_data_out = output_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_843 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_V_last_V_1_vld_in = 1'b1;
    end else begin
        output_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln44_reg_843_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln44_reg_843 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        output_r_TDATA_blk_n = output_V_data_1_state[1'd1];
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        result_address0 = result_addr_2_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        result_address0 = result_addr_1_reg_790;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        result_address0 = zext_ln30_fu_379_p1;
    end else begin
        result_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        result_address1 = result_addr_1_reg_790;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        result_address1 = sext_ln35_fu_444_p1;
    end else begin
        result_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        result_ce1 = 1'b1;
    end else begin
        result_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        result_d0 = grp_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        result_d0 = tmp_1_fu_384_p12;
    end else begin
        result_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln35_1_reg_823) & (1'b1 == ap_CS_fsm_state15)) | ((icmp_ln29_fu_367_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln35_1_fu_525_p2) & (1'b1 == ap_CS_fsm_state8))) begin
        result_we1 = 1'b1;
    end else begin
        result_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0)) & (icmp_ln19_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln29_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln33_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln34_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'd0 == and_ln35_1_fu_525_p2) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln44_fu_654_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln44_fu_654_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            if ((~((output_V_last_V_1_state == 2'd1) | (output_V_data_1_state == 2'd1) | ((output_V_last_V_1_state == 2'd3) & (output_r_TREADY == 1'b0)) | ((output_V_data_1_state == 2'd3) & (output_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_fu_557_p2 = ($signed(zext_ln339_fu_553_p1) + $signed(9'd385));

assign and_ln35_1_fu_525_p2 = (grp_fu_265_p2 & and_ln35_fu_519_p2);

assign and_ln35_fu_519_p2 = (or_ln35_fu_495_p2 & or_ln35_1_fu_513_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_state16_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((icmp_ln44_reg_843 == 1'd0) & (output_V_data_1_ack_in == 1'b0));
end

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = ((icmp_ln44_reg_843_pp1_iter1_reg == 1'd0) & (output_V_data_1_ack_in == 1'b0));
end

assign ap_block_state18_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19 = ((output_V_last_V_1_state == 2'd1) | (output_V_data_1_state == 2'd1) | ((output_V_last_V_1_state == 2'd3) & (output_r_TREADY == 1'b0)) | ((output_V_data_1_state == 2'd3) & (output_r_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln19_fu_301_p2 == 1'd0) & (input_V_data_0_vld_out == 1'b0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_i_0_phi_fu_211_p4 = i_0_reg_207;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln35_1_fu_466_p1 = result_load_1_reg_816;

assign i_2_fu_307_p2 = (i_0_reg_207 + 4'd1);

assign i_4_fu_421_p2 = (i2_0_reg_229 + 4'd1);

assign i_5_fu_660_p2 = (ap_phi_mux_i_1_phi_fu_253_p4 + 4'd1);

assign i_fu_373_p2 = (i1_0_reg_218 + 4'd1);

assign icmp_ln19_fu_301_p2 = ((i_0_reg_207 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_367_p2 = ((i1_0_reg_218 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_415_p2 = ((i2_0_reg_229 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_438_p2 = ((j_0_in_reg_240 == 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_489_p2 = ((tmp_V_1_fu_462_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_2_fu_501_p2 = ((tmp_6_fu_469_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_3_fu_507_p2 = ((trunc_ln35_1_fu_479_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_483_p2 = ((tmp_V_fu_452_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_654_p2 = ((ap_phi_mux_i_1_phi_fu_253_p4 == 4'd10) ? 1'b1 : 1'b0);

assign input_V_data_0_ack_in = input_V_data_0_state[1'd1];

assign input_V_data_0_load_A = (input_V_data_0_state_cmp_full & ~input_V_data_0_sel_wr);

assign input_V_data_0_load_B = (input_V_data_0_state_cmp_full & input_V_data_0_sel_wr);

assign input_V_data_0_sel = input_V_data_0_sel_rd;

assign input_V_data_0_state_cmp_full = ((input_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_V_data_0_vld_in = input_r_TVALID;

assign input_V_data_0_vld_out = input_V_data_0_state[1'd0];

assign input_V_last_V_0_vld_in = input_r_TVALID;

assign input_r_TREADY = input_V_last_V_0_state[1'd1];

assign isNeg_fu_563_p3 = add_ln339_fu_557_p2[32'd8];

assign j_fu_432_p2 = (j_0_in_reg_240 + 32'd1);

assign mantissa_V_fu_539_p4 = {{{{1'd1}, {tmp_V_1_fu_462_p1}}}, {1'd0}};

assign or_ln35_1_fu_513_p2 = (icmp_ln35_3_fu_507_p2 | icmp_ln35_2_fu_501_p2);

assign or_ln35_fu_495_p2 = (icmp_ln35_fu_483_p2 | icmp_ln35_1_fu_489_p2);

assign output_V_data_1_ack_in = output_V_data_1_state[1'd1];

assign output_V_data_1_ack_out = output_r_TREADY;

assign output_V_data_1_load_A = (output_V_data_1_state_cmp_full & ~output_V_data_1_sel_wr);

assign output_V_data_1_load_B = (output_V_data_1_state_cmp_full & output_V_data_1_sel_wr);

assign output_V_data_1_sel = output_V_data_1_sel_rd;

assign output_V_data_1_state_cmp_full = ((output_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_V_data_1_vld_out = output_V_data_1_state[1'd0];

assign output_V_last_V_1_ack_in = output_V_last_V_1_state[1'd1];

assign output_V_last_V_1_ack_out = output_r_TREADY;

assign output_V_last_V_1_load_A = (output_V_last_V_1_state_cmp_full & ~output_V_last_V_1_sel_wr);

assign output_V_last_V_1_load_B = (output_V_last_V_1_state_cmp_full & output_V_last_V_1_sel_wr);

assign output_V_last_V_1_sel = output_V_last_V_1_sel_rd;

assign output_V_last_V_1_state_cmp_full = ((output_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_V_last_V_1_vld_out = output_V_last_V_1_state[1'd0];

assign output_r_TDATA = output_V_data_1_data_out;

assign output_r_TLAST = output_V_last_V_1_data_out;

assign output_r_TVALID = output_V_last_V_1_state[1'd0];

assign p_Val2_5_fu_635_p3 = ((isNeg_fu_563_p3[0:0] === 1'b1) ? zext_ln662_fu_621_p1 : tmp_5_fu_625_p4);

assign p_Val2_6_fu_648_p3 = ((p_Result_s_reg_827[0:0] === 1'b1) ? result_V_1_fu_643_p2 : p_Val2_5_reg_832);

assign p_Val2_s_fu_449_p1 = result_load_reg_810;

assign r_V_1_fu_607_p2 = zext_ln682_fu_549_p1 << zext_ln1287_fu_597_p1;

assign r_V_fu_601_p2 = mantissa_V_fu_539_p4 >> sext_ln1311_2_fu_593_p1;

assign result_V_1_fu_643_p2 = (32'd0 - p_Val2_5_reg_832);

assign sext_ln1311_1_fu_589_p1 = ush_fu_581_p3;

assign sext_ln1311_2_fu_593_p1 = ush_fu_581_p3;

assign sext_ln1311_fu_577_p1 = $signed(sub_ln1311_fu_571_p2);

assign sext_ln35_fu_444_p1 = j_fu_432_p2;

assign sub_ln1311_fu_571_p2 = (8'd127 - tmp_V_fu_452_p4);

assign tmp_5_fu_625_p4 = {{r_V_1_fu_607_p2[55:24]}};

assign tmp_6_fu_469_p4 = {{bitcast_ln35_1_fu_466_p1[30:23]}};

assign tmp_9_fu_613_p3 = r_V_fu_601_p2[32'd24];

assign tmp_V_1_fu_462_p1 = p_Val2_s_fu_449_p1[22:0];

assign tmp_V_fu_452_p4 = {{p_Val2_s_fu_449_p1[30:23]}};

assign tmp_last_V_fu_693_p2 = ((i_1_reg_249 == 4'd9) ? 1'b1 : 1'b0);

assign trunc_ln35_1_fu_479_p1 = bitcast_ln35_1_fu_466_p1[22:0];

assign ush_fu_581_p3 = ((isNeg_fu_563_p3[0:0] === 1'b1) ? sext_ln1311_fu_577_p1 : add_ln339_fu_557_p2);

assign zext_ln1287_fu_597_p1 = $unsigned(sext_ln1311_1_fu_589_p1);

assign zext_ln30_fu_379_p1 = i1_0_reg_218;

assign zext_ln339_fu_553_p1 = tmp_V_fu_452_p4;

assign zext_ln33_fu_411_p1 = i2_0_reg_229;

assign zext_ln35_fu_427_p1 = i2_0_reg_229;

assign zext_ln662_fu_621_p1 = tmp_9_fu_613_p3;

assign zext_ln682_fu_549_p1 = mantissa_V_fu_539_p4;

endmodule //s_sort_hw

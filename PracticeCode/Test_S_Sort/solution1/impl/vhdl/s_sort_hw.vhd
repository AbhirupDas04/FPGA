-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity s_sort_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of s_sort_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "s_sort_hw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.735000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1118,HLS_SYN_LUT=1948,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal input_V_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal input_V_data_0_vld_in : STD_LOGIC;
    signal input_V_data_0_vld_out : STD_LOGIC;
    signal input_V_data_0_ack_in : STD_LOGIC;
    signal input_V_data_0_ack_out : STD_LOGIC;
    signal input_V_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal input_V_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal input_V_data_0_sel_rd : STD_LOGIC := '0';
    signal input_V_data_0_sel_wr : STD_LOGIC := '0';
    signal input_V_data_0_sel : STD_LOGIC;
    signal input_V_data_0_load_A : STD_LOGIC;
    signal input_V_data_0_load_B : STD_LOGIC;
    signal input_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_V_data_0_state_cmp_full : STD_LOGIC;
    signal input_V_last_V_0_vld_in : STD_LOGIC;
    signal input_V_last_V_0_ack_out : STD_LOGIC;
    signal input_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_V_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V_data_1_vld_in : STD_LOGIC;
    signal output_V_data_1_vld_out : STD_LOGIC;
    signal output_V_data_1_ack_in : STD_LOGIC;
    signal output_V_data_1_ack_out : STD_LOGIC;
    signal output_V_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V_data_1_sel_rd : STD_LOGIC := '0';
    signal output_V_data_1_sel_wr : STD_LOGIC := '0';
    signal output_V_data_1_sel : STD_LOGIC;
    signal output_V_data_1_load_A : STD_LOGIC;
    signal output_V_data_1_load_B : STD_LOGIC;
    signal output_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_V_data_1_state_cmp_full : STD_LOGIC;
    signal output_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_last_V_1_vld_in : STD_LOGIC;
    signal output_V_last_V_1_vld_out : STD_LOGIC;
    signal output_V_last_V_1_ack_in : STD_LOGIC;
    signal output_V_last_V_1_ack_out : STD_LOGIC;
    signal output_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal output_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal output_V_last_V_1_sel : STD_LOGIC;
    signal output_V_last_V_1_load_A : STD_LOGIC;
    signal output_V_last_V_1_load_B : STD_LOGIC;
    signal output_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln19_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln44_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal icmp_ln44_reg_843_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_249 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_fu_307_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_fu_373_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln33_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln33_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_785 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_addr_1_reg_790 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal result_addr_2_reg_804 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln34_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal result_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_1_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_1_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_1_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_Result_s_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_635_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_648_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln44_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state16_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_io : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_5_fu_660_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_847 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_data_2_fu_666_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state16 : STD_LOGIC;
    signal result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_ce1 : STD_LOGIC;
    signal result_we1 : STD_LOGIC;
    signal ap_phi_mux_i_0_phi_fu_211_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_207 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i1_0_reg_218 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln29_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i2_0_reg_229 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_in_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_phi_mux_i_1_phi_fu_253_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln30_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_data_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_1_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_3_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_4_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_5_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_6_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_7_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_8_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_9_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_10_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_1_fu_384_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_s_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln35_1_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_452_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_462_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_1_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_469_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_1_fu_479_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_3_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_2_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_1_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mantissa_V_fu_539_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln339_fu_553_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_557_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_571_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_577_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_581_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_593_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_549_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_597_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_601_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_9_fu_613_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_607_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_625_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_state19 : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component s_sort_hw_sitofp_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component s_sort_hw_fcmp_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component s_sort_hw_mux_104dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component s_sort_hw_result IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    result_U : component s_sort_hw_result
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => result_d0,
        q0 => result_q0,
        address1 => result_address1,
        ce1 => result_ce1,
        we1 => result_we1,
        d1 => result_load_1_reg_816,
        q1 => result_q1);

    s_sort_hw_sitofp_bkb_U1 : component s_sort_hw_sitofp_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_Val2_6_reg_838,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p1);

    s_sort_hw_fcmp_32cud_U2 : component s_sort_hw_fcmp_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => result_q0,
        din1 => result_q1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_265_p2);

    s_sort_hw_mux_104dEe_U3 : component s_sort_hw_mux_104dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_data_fu_116,
        din1 => tmp_data_1_fu_120,
        din2 => tmp_data_3_fu_124,
        din3 => tmp_data_4_fu_128,
        din4 => tmp_data_5_fu_132,
        din5 => tmp_data_6_fu_136,
        din6 => tmp_data_7_fu_140,
        din7 => tmp_data_8_fu_144,
        din8 => tmp_data_9_fu_148,
        din9 => tmp_data_10_fu_152,
        din10 => i1_0_reg_218,
        dout => tmp_1_fu_384_p12);

    s_sort_hw_mux_104dEe_U4 : component s_sort_hw_mux_104dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_data_fu_116,
        din1 => tmp_data_1_fu_120,
        din2 => tmp_data_3_fu_124,
        din3 => tmp_data_4_fu_128,
        din4 => tmp_data_5_fu_132,
        din5 => tmp_data_6_fu_136,
        din6 => tmp_data_7_fu_140,
        din7 => tmp_data_8_fu_144,
        din8 => tmp_data_9_fu_148,
        din9 => tmp_data_10_fu_152,
        din10 => i_1_reg_249,
        dout => tmp_data_2_fu_666_p12);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln33_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((icmp_ln33_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    input_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_V_data_0_ack_out = ap_const_logic_1) and (input_V_data_0_vld_out = ap_const_logic_1))) then 
                                        input_V_data_0_sel_rd <= not(input_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_V_data_0_ack_in = ap_const_logic_1) and (input_V_data_0_vld_in = ap_const_logic_1))) then 
                                        input_V_data_0_sel_wr <= not(input_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((input_V_data_0_state = ap_const_lv2_2) and (input_V_data_0_vld_in = ap_const_logic_0)) or ((input_V_data_0_state = ap_const_lv2_3) and (input_V_data_0_vld_in = ap_const_logic_0) and (input_V_data_0_ack_out = ap_const_logic_1)))) then 
                    input_V_data_0_state <= ap_const_lv2_2;
                elsif ((((input_V_data_0_state = ap_const_lv2_1) and (input_V_data_0_ack_out = ap_const_logic_0)) or ((input_V_data_0_state = ap_const_lv2_3) and (input_V_data_0_ack_out = ap_const_logic_0) and (input_V_data_0_vld_in = ap_const_logic_1)))) then 
                    input_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((input_V_data_0_vld_in = ap_const_logic_0) and (input_V_data_0_ack_out = ap_const_logic_1))) and not(((input_V_data_0_ack_out = ap_const_logic_0) and (input_V_data_0_vld_in = ap_const_logic_1))) and (input_V_data_0_state = ap_const_lv2_3)) or ((input_V_data_0_state = ap_const_lv2_1) and (input_V_data_0_ack_out = ap_const_logic_1)) or ((input_V_data_0_state = ap_const_lv2_2) and (input_V_data_0_vld_in = ap_const_logic_1)))) then 
                    input_V_data_0_state <= ap_const_lv2_3;
                else 
                    input_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_V_last_V_0_state = ap_const_lv2_2) and (input_V_last_V_0_vld_in = ap_const_logic_0)) or ((input_V_last_V_0_state = ap_const_lv2_3) and (input_V_last_V_0_vld_in = ap_const_logic_0) and (input_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    input_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((input_V_last_V_0_state = ap_const_lv2_1) and (input_V_last_V_0_ack_out = ap_const_logic_0)) or ((input_V_last_V_0_state = ap_const_lv2_3) and (input_V_last_V_0_ack_out = ap_const_logic_0) and (input_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_V_last_V_0_vld_in = ap_const_logic_0) and (input_V_last_V_0_ack_out = ap_const_logic_1))) and not(((input_V_last_V_0_ack_out = ap_const_logic_0) and (input_V_last_V_0_vld_in = ap_const_logic_1))) and (input_V_last_V_0_state = ap_const_lv2_3)) or ((input_V_last_V_0_state = ap_const_lv2_1) and (input_V_last_V_0_ack_out = ap_const_logic_1)) or ((input_V_last_V_0_state = ap_const_lv2_2) and (input_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    input_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_V_data_1_ack_out = ap_const_logic_1) and (output_V_data_1_vld_out = ap_const_logic_1))) then 
                                        output_V_data_1_sel_rd <= not(output_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_V_data_1_ack_in = ap_const_logic_1) and (output_V_data_1_vld_in = ap_const_logic_1))) then 
                                        output_V_data_1_sel_wr <= not(output_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((output_V_data_1_state = ap_const_lv2_2) and (output_V_data_1_vld_in = ap_const_logic_0)) or ((output_V_data_1_state = ap_const_lv2_3) and (output_V_data_1_vld_in = ap_const_logic_0) and (output_V_data_1_ack_out = ap_const_logic_1)))) then 
                    output_V_data_1_state <= ap_const_lv2_2;
                elsif ((((output_V_data_1_state = ap_const_lv2_1) and (output_r_TREADY = ap_const_logic_0)) or ((output_V_data_1_state = ap_const_lv2_3) and (output_r_TREADY = ap_const_logic_0) and (output_V_data_1_vld_in = ap_const_logic_1)))) then 
                    output_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((output_V_data_1_vld_in = ap_const_logic_0) and (output_V_data_1_ack_out = ap_const_logic_1))) and not(((output_r_TREADY = ap_const_logic_0) and (output_V_data_1_vld_in = ap_const_logic_1))) and (output_V_data_1_state = ap_const_lv2_3)) or ((output_V_data_1_state = ap_const_lv2_1) and (output_V_data_1_ack_out = ap_const_logic_1)) or ((output_V_data_1_state = ap_const_lv2_2) and (output_V_data_1_vld_in = ap_const_logic_1)))) then 
                    output_V_data_1_state <= ap_const_lv2_3;
                else 
                    output_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_V_last_V_1_ack_out = ap_const_logic_1) and (output_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        output_V_last_V_1_sel_rd <= not(output_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_V_last_V_1_ack_in = ap_const_logic_1) and (output_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        output_V_last_V_1_sel_wr <= not(output_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_V_last_V_1_state = ap_const_lv2_2) and (output_V_last_V_1_vld_in = ap_const_logic_0)) or ((output_V_last_V_1_state = ap_const_lv2_3) and (output_V_last_V_1_vld_in = ap_const_logic_0) and (output_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    output_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((output_V_last_V_1_state = ap_const_lv2_1) and (output_r_TREADY = ap_const_logic_0)) or ((output_V_last_V_1_state = ap_const_lv2_3) and (output_r_TREADY = ap_const_logic_0) and (output_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_V_last_V_1_vld_in = ap_const_logic_0) and (output_V_last_V_1_ack_out = ap_const_logic_1))) and not(((output_r_TREADY = ap_const_logic_0) and (output_V_last_V_1_vld_in = ap_const_logic_1))) and (output_V_last_V_1_state = ap_const_lv2_3)) or ((output_V_last_V_1_state = ap_const_lv2_1) and (output_V_last_V_1_ack_out = ap_const_logic_1)) or ((output_V_last_V_1_state = ap_const_lv2_2) and (output_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    output_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i1_0_reg_218 <= ap_const_lv4_0;
            elsif (((icmp_ln29_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i1_0_reg_218 <= i_fu_373_p2;
            end if; 
        end if;
    end process;

    i2_0_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_367_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_0_reg_229 <= ap_const_lv4_0;
            elsif (((icmp_ln34_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i2_0_reg_229 <= i_4_reg_785;
            end if; 
        end if;
    end process;

    i_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_207 <= i_2_fu_307_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_0_reg_207 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_249 <= ap_const_lv4_0;
            elsif (((icmp_ln44_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_1_reg_249 <= i_5_reg_847;
            end if; 
        end if;
    end process;

    j_0_in_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_0_in_reg_240 <= zext_ln33_fu_411_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_0_in_reg_240 <= j_reg_796;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                and_ln35_1_reg_823 <= and_ln35_1_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_4_reg_785 <= i_4_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i_5_reg_847 <= i_5_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln44_reg_843 <= icmp_ln44_fu_654_p2;
                icmp_ln44_reg_843_pp1_iter1_reg <= icmp_ln44_reg_843;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_data_0_load_A = ap_const_logic_1)) then
                input_V_data_0_payload_A <= input_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_data_0_load_B = ap_const_logic_1)) then
                input_V_data_0_payload_B <= input_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_reg_796 <= j_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_data_1_load_A = ap_const_logic_1)) then
                output_V_data_1_payload_A <= tmp_data_2_fu_666_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_data_1_load_B = ap_const_logic_1)) then
                output_V_data_1_payload_B <= tmp_data_2_fu_666_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_last_V_1_load_A = ap_const_logic_1)) then
                output_V_last_V_1_payload_A <= tmp_last_V_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_last_V_1_load_B = ap_const_logic_1)) then
                output_V_last_V_1_payload_B <= tmp_last_V_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln35_1_fu_525_p2) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                p_Result_s_reg_827 <= p_Val2_s_fu_449_p1(31 downto 31);
                p_Val2_5_reg_832 <= p_Val2_5_fu_635_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_6_reg_838 <= p_Val2_6_fu_648_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                result_addr_1_reg_790 <= zext_ln35_fu_427_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                result_addr_2_reg_804 <= sext_ln35_fu_444_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                result_load_1_reg_816 <= result_q1;
                result_load_reg_810 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_8)) and not((ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_7)) and not((ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_6)) and not((ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_5)) and not((ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_4)) and not((ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_3)) and not((ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_2)) and not((ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_1)) and not((ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_0)) and not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_10_fu_152 <= input_V_data_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_1_fu_120 <= input_V_data_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_3_fu_124 <= input_V_data_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_4_fu_128 <= input_V_data_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_5_fu_132 <= input_V_data_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_6_fu_136 <= input_V_data_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_7_fu_140 <= input_V_data_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_8_fu_144 <= input_V_data_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_8) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_9_fu_148 <= input_V_data_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_fu_116 <= input_V_data_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (input_V_data_0_vld_out, output_r_TREADY, output_V_data_1_state, output_V_last_V_1_state, ap_CS_fsm, ap_CS_fsm_state2, icmp_ln19_fu_301_p2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln33_fu_415_p2, ap_CS_fsm_state6, icmp_ln34_fu_438_p2, and_ln35_1_fu_525_p2, ap_CS_fsm_state8, icmp_ln44_fu_654_p2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, icmp_ln29_fu_367_p2, ap_CS_fsm_state19)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln29_fu_367_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln33_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln34_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_lv1_0 = and_ln35_1_fu_525_p2) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln44_fu_654_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln44_fu_654_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                if ((not(((output_V_last_V_1_state = ap_const_lv2_1) or (output_V_data_1_state = ap_const_lv2_1) or ((output_V_last_V_1_state = ap_const_lv2_3) and (output_r_TREADY = ap_const_logic_0)) or ((output_V_data_1_state = ap_const_lv2_3) and (output_r_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln339_fu_557_p2 <= std_logic_vector(unsigned(zext_ln339_fu_553_p1) + unsigned(ap_const_lv9_181));
    and_ln35_1_fu_525_p2 <= (grp_fu_265_p2 and and_ln35_fu_519_p2);
    and_ln35_fu_519_p2 <= (or_ln35_fu_495_p2 and or_ln35_1_fu_513_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state17_io, ap_block_state18_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state17_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state17_io, ap_block_state18_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state17_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state16_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_io_assign_proc : process(output_V_data_1_ack_in, icmp_ln44_reg_843)
    begin
                ap_block_state17_io <= ((icmp_ln44_reg_843 = ap_const_lv1_0) and (output_V_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(output_V_data_1_ack_in, icmp_ln44_reg_843_pp1_iter1_reg)
    begin
                ap_block_state18_io <= ((icmp_ln44_reg_843_pp1_iter1_reg = ap_const_lv1_0) and (output_V_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state18_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_assign_proc : process(output_r_TREADY, output_V_data_1_state, output_V_last_V_1_state)
    begin
                ap_block_state19 <= ((output_V_last_V_1_state = ap_const_lv2_1) or (output_V_data_1_state = ap_const_lv2_1) or ((output_V_last_V_1_state = ap_const_lv2_3) and (output_r_TREADY = ap_const_logic_0)) or ((output_V_data_1_state = ap_const_lv2_3) and (output_r_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state2_assign_proc : process(input_V_data_0_vld_out, icmp_ln19_fu_301_p2)
    begin
                ap_block_state2 <= ((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0));
    end process;


    ap_condition_pp1_exit_iter0_state16_assign_proc : process(icmp_ln44_fu_654_p2)
    begin
        if ((icmp_ln44_fu_654_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_phi_fu_211_p4 <= i_0_reg_207;

    ap_phi_mux_i_1_phi_fu_253_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln44_reg_843, i_1_reg_249, i_5_reg_847)
    begin
        if (((icmp_ln44_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_1_phi_fu_253_p4 <= i_5_reg_847;
        else 
            ap_phi_mux_i_1_phi_fu_253_p4 <= i_1_reg_249;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln35_1_fu_466_p1 <= result_load_1_reg_816;
    i_2_fu_307_p2 <= std_logic_vector(unsigned(i_0_reg_207) + unsigned(ap_const_lv4_1));
    i_4_fu_421_p2 <= std_logic_vector(unsigned(i2_0_reg_229) + unsigned(ap_const_lv4_1));
    i_5_fu_660_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_253_p4) + unsigned(ap_const_lv4_1));
    i_fu_373_p2 <= std_logic_vector(unsigned(i1_0_reg_218) + unsigned(ap_const_lv4_1));
    icmp_ln19_fu_301_p2 <= "1" when (i_0_reg_207 = ap_const_lv4_A) else "0";
    icmp_ln29_fu_367_p2 <= "1" when (i1_0_reg_218 = ap_const_lv4_A) else "0";
    icmp_ln33_fu_415_p2 <= "1" when (i2_0_reg_229 = ap_const_lv4_A) else "0";
    icmp_ln34_fu_438_p2 <= "1" when (j_0_in_reg_240 = ap_const_lv32_9) else "0";
    icmp_ln35_1_fu_489_p2 <= "1" when (tmp_V_1_fu_462_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_2_fu_501_p2 <= "0" when (tmp_6_fu_469_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_3_fu_507_p2 <= "1" when (trunc_ln35_1_fu_479_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_fu_483_p2 <= "0" when (tmp_V_fu_452_p4 = ap_const_lv8_FF) else "1";
    icmp_ln44_fu_654_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_253_p4 = ap_const_lv4_A) else "0";
    input_V_data_0_ack_in <= input_V_data_0_state(1);

    input_V_data_0_ack_out_assign_proc : process(input_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln19_fu_301_p2)
    begin
        if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_V_data_0_ack_out <= ap_const_logic_1;
        else 
            input_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_V_data_0_data_out_assign_proc : process(input_V_data_0_payload_A, input_V_data_0_payload_B, input_V_data_0_sel)
    begin
        if ((input_V_data_0_sel = ap_const_logic_1)) then 
            input_V_data_0_data_out <= input_V_data_0_payload_B;
        else 
            input_V_data_0_data_out <= input_V_data_0_payload_A;
        end if; 
    end process;

    input_V_data_0_load_A <= (input_V_data_0_state_cmp_full and not(input_V_data_0_sel_wr));
    input_V_data_0_load_B <= (input_V_data_0_state_cmp_full and input_V_data_0_sel_wr);
    input_V_data_0_sel <= input_V_data_0_sel_rd;
    input_V_data_0_state_cmp_full <= '0' when (input_V_data_0_state = ap_const_lv2_1) else '1';
    input_V_data_0_vld_in <= input_r_TVALID;
    input_V_data_0_vld_out <= input_V_data_0_state(0);

    input_V_last_V_0_ack_out_assign_proc : process(input_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln19_fu_301_p2)
    begin
        if ((not(((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (input_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            input_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    input_V_last_V_0_vld_in <= input_r_TVALID;

    input_r_TDATA_blk_n_assign_proc : process(input_V_data_0_state, ap_CS_fsm_state2, icmp_ln19_fu_301_p2)
    begin
        if (((icmp_ln19_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_TDATA_blk_n <= input_V_data_0_state(0);
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_r_TREADY <= input_V_last_V_0_state(1);
    isNeg_fu_563_p3 <= add_ln339_fu_557_p2(8 downto 8);
    j_fu_432_p2 <= std_logic_vector(unsigned(j_0_in_reg_240) + unsigned(ap_const_lv32_1));
    mantissa_V_fu_539_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_462_p1) & ap_const_lv1_0);
    or_ln35_1_fu_513_p2 <= (icmp_ln35_3_fu_507_p2 or icmp_ln35_2_fu_501_p2);
    or_ln35_fu_495_p2 <= (icmp_ln35_fu_483_p2 or icmp_ln35_1_fu_489_p2);
    output_V_data_1_ack_in <= output_V_data_1_state(1);
    output_V_data_1_ack_out <= output_r_TREADY;

    output_V_data_1_data_out_assign_proc : process(output_V_data_1_payload_A, output_V_data_1_payload_B, output_V_data_1_sel)
    begin
        if ((output_V_data_1_sel = ap_const_logic_1)) then 
            output_V_data_1_data_out <= output_V_data_1_payload_B;
        else 
            output_V_data_1_data_out <= output_V_data_1_payload_A;
        end if; 
    end process;

    output_V_data_1_load_A <= (output_V_data_1_state_cmp_full and not(output_V_data_1_sel_wr));
    output_V_data_1_load_B <= (output_V_data_1_state_cmp_full and output_V_data_1_sel_wr);
    output_V_data_1_sel <= output_V_data_1_sel_rd;
    output_V_data_1_state_cmp_full <= '0' when (output_V_data_1_state = ap_const_lv2_1) else '1';

    output_V_data_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln44_reg_843, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln44_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_V_data_1_vld_in <= ap_const_logic_1;
        else 
            output_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_V_data_1_vld_out <= output_V_data_1_state(0);
    output_V_last_V_1_ack_in <= output_V_last_V_1_state(1);
    output_V_last_V_1_ack_out <= output_r_TREADY;

    output_V_last_V_1_data_out_assign_proc : process(output_V_last_V_1_payload_A, output_V_last_V_1_payload_B, output_V_last_V_1_sel)
    begin
        if ((output_V_last_V_1_sel = ap_const_logic_1)) then 
            output_V_last_V_1_data_out <= output_V_last_V_1_payload_B;
        else 
            output_V_last_V_1_data_out <= output_V_last_V_1_payload_A;
        end if; 
    end process;

    output_V_last_V_1_load_A <= (output_V_last_V_1_state_cmp_full and not(output_V_last_V_1_sel_wr));
    output_V_last_V_1_load_B <= (output_V_last_V_1_state_cmp_full and output_V_last_V_1_sel_wr);
    output_V_last_V_1_sel <= output_V_last_V_1_sel_rd;
    output_V_last_V_1_state_cmp_full <= '0' when (output_V_last_V_1_state = ap_const_lv2_1) else '1';

    output_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln44_reg_843, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln44_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            output_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_V_last_V_1_vld_out <= output_V_last_V_1_state(0);
    output_r_TDATA <= output_V_data_1_data_out;

    output_r_TDATA_blk_n_assign_proc : process(output_V_data_1_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln44_reg_843, ap_enable_reg_pp1_iter2, icmp_ln44_reg_843_pp1_iter1_reg)
    begin
        if ((((icmp_ln44_reg_843_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((icmp_ln44_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            output_r_TDATA_blk_n <= output_V_data_1_state(1);
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TLAST <= output_V_last_V_1_data_out;
    output_r_TVALID <= output_V_last_V_1_state(0);
    p_Val2_5_fu_635_p3 <= 
        zext_ln662_fu_621_p1 when (isNeg_fu_563_p3(0) = '1') else 
        tmp_5_fu_625_p4;
    p_Val2_6_fu_648_p3 <= 
        result_V_1_fu_643_p2 when (p_Result_s_reg_827(0) = '1') else 
        p_Val2_5_reg_832;
    p_Val2_s_fu_449_p1 <= result_load_reg_810;
    r_V_1_fu_607_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_549_p1),to_integer(unsigned('0' & zext_ln1287_fu_597_p1(31-1 downto 0)))));
    r_V_fu_601_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_539_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_593_p1(25-1 downto 0)))));
    result_V_1_fu_643_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_832));

    result_address0_assign_proc : process(ap_CS_fsm_state4, result_addr_1_reg_790, ap_CS_fsm_state6, result_addr_2_reg_804, ap_CS_fsm_state15, zext_ln30_fu_379_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            result_address0 <= result_addr_2_reg_804;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            result_address0 <= result_addr_1_reg_790;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            result_address0 <= zext_ln30_fu_379_p1(4 - 1 downto 0);
        else 
            result_address0 <= "XXXX";
        end if; 
    end process;


    result_address1_assign_proc : process(result_addr_1_reg_790, ap_CS_fsm_state6, ap_CS_fsm_state8, sext_ln35_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            result_address1 <= result_addr_1_reg_790;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            result_address1 <= sext_ln35_fu_444_p1(4 - 1 downto 0);
        else 
            result_address1 <= "XXXX";
        end if; 
    end process;


    result_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            result_ce1 <= ap_const_logic_1;
        else 
            result_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    result_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state15, tmp_1_fu_384_p12, grp_fu_261_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            result_d0 <= grp_fu_261_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            result_d0 <= tmp_1_fu_384_p12;
        else 
            result_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_we0_assign_proc : process(ap_CS_fsm_state4, and_ln35_1_reg_823, icmp_ln29_fu_367_p2, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = and_ln35_1_reg_823) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((icmp_ln29_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we1_assign_proc : process(and_ln35_1_fu_525_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = and_ln35_1_fu_525_p2) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            result_we1 <= ap_const_logic_1;
        else 
            result_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1311_1_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_581_p3),32));

        sext_ln1311_2_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_581_p3),25));

        sext_ln1311_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_571_p2),9));

        sext_ln35_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_fu_432_p2),64));

    sub_ln1311_fu_571_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_452_p4));
    tmp_5_fu_625_p4 <= r_V_1_fu_607_p2(55 downto 24);
    tmp_6_fu_469_p4 <= bitcast_ln35_1_fu_466_p1(30 downto 23);
    tmp_9_fu_613_p3 <= r_V_fu_601_p2(24 downto 24);
    tmp_V_1_fu_462_p1 <= p_Val2_s_fu_449_p1(23 - 1 downto 0);
    tmp_V_fu_452_p4 <= p_Val2_s_fu_449_p1(30 downto 23);
    tmp_last_V_fu_693_p2 <= "1" when (i_1_reg_249 = ap_const_lv4_9) else "0";
    trunc_ln35_1_fu_479_p1 <= bitcast_ln35_1_fu_466_p1(23 - 1 downto 0);
    ush_fu_581_p3 <= 
        sext_ln1311_fu_577_p1 when (isNeg_fu_563_p3(0) = '1') else 
        add_ln339_fu_557_p2;
    zext_ln1287_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_589_p1),79));
    zext_ln30_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_218),64));
    zext_ln339_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_452_p4),9));
    zext_ln33_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_229),32));
    zext_ln35_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_229),64));
    zext_ln662_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_613_p3),32));
    zext_ln682_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_539_p4),79));
end behav;

/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdint.h>
#include "platform.h"
#include "xil_printf.h"
#include "xtime_l.h"
#include "xparameters.h"
#include "xaxidma.h"

#define LEN 254

void split_2(uint32_t state_matrix[4][4],uint32_t key_stream[][16],uint32_t start,uint32_t remain,uint32_t mode){
    uint32_t temp1;
    uint32_t temp2;
    uint32_t temp3;
    uint32_t temp4;

    uint32_t remain2 = remain % 8;

    for(uint32_t i = 0; i < 4; i++){
        for(uint32_t j = 0; j < 4; j++){
            if(mode == 1 && (remain / 8 == 4*i + j) && remain!=0){
                if(remain2 == 0){
                    return;
                }

                temp1 = state_matrix[i][j] << 24;
                if(remain2 == 2){
                    key_stream[start][4*i+j] = temp1;
                    return;
                }

                temp2 = state_matrix[i][j] << 16;
                temp2 = temp2 >> 24;
                temp2 = temp2 << 16;

                if(remain2 == 4){
                    key_stream[start][4*i+j] = temp1 + temp2;
                    return;
                }

                temp3 = state_matrix[i][j] << 8;
                temp3 = temp3 >> 24;
                temp3 = temp3 << 8;

                if(remain2 == 6){
                    key_stream[start][4*i+j] = temp1 + temp2 + temp3;
                    return;
                }
            }

            temp1 = state_matrix[i][j] << 24;

            temp2 = state_matrix[i][j] << 16;
            temp2 = temp2 >> 24;
            temp2 = temp2 << 16;

            temp3 = state_matrix[i][j] << 8;
            temp3 = temp3 >> 24;
            temp3 = temp3 << 8;

            temp4 = state_matrix[i][j] >> 24;

            key_stream[start][4*i+j] = temp1 + temp2 + temp3 + temp4;
        }
    }
}

void quarterround(uint32_t state_matrix[4][4], uint32_t ind1, uint32_t ind2, uint32_t ind3, uint32_t ind4){
    state_matrix[ind1/4][ind1%4] += state_matrix[ind2/4][ind2%4];
    state_matrix[ind4/4][ind4%4] ^= state_matrix[ind1/4][ind1%4];
    state_matrix[ind4/4][ind4%4] = state_matrix[ind4/4][ind4%4] << 16 | state_matrix[ind4/4][ind4%4] >> 16;

    state_matrix[ind3/4][ind3%4] += state_matrix[ind4/4][ind4%4];
    state_matrix[ind2/4][ind2%4] ^= state_matrix[ind3/4][ind3%4];
    state_matrix[ind2/4][ind2%4] = state_matrix[ind2/4][ind2%4] << 12 | state_matrix[ind2/4][ind2%4] >> 20;

    state_matrix[ind1/4][ind1%4] += state_matrix[ind2/4][ind2%4];
    state_matrix[ind4/4][ind4%4] ^= state_matrix[ind1/4][ind1%4];
    state_matrix[ind4/4][ind4%4] = state_matrix[ind4/4][ind4%4] << 8 | state_matrix[ind4/4][ind4%4] >> 24;

    state_matrix[ind3/4][ind3%4] += state_matrix[ind4/4][ind4%4];
    state_matrix[ind2/4][ind2%4] ^= state_matrix[ind3/4][ind3%4];
    state_matrix[ind2/4][ind2%4] = state_matrix[ind2/4][ind2%4] << 7 | state_matrix[ind2/4][ind2%4] >> 25;
}

void chacha(uint32_t plaintext[][16],uint32_t key[8],uint32_t nonce[3],uint32_t counter,uint32_t cipher[][16]){
    uint32_t len = LEN;
    uint32_t n_blocks = len / 128;
    uint32_t remain = len % 128;

    if(remain != 0){
        n_blocks += 1;
    }

    uint32_t act_state_matrix[4][4] = {{0x61707865,0x3320646e,0x79622d32,0x6b206574},{},{},{0,0,0,0}};
    uint32_t state_matrix[4][4], copy_state_matrix[4][4];

    uint32_t temp1;
    uint32_t temp2;
    uint32_t temp3;

    for(uint32_t j = 1; j < 3; j++){
        for(uint32_t i = 0; i < 4; i++){
            temp1 = key[4*(j-1)+i] << 24;

            temp2 = key[4*(j-1)+i] << 16;
            temp2 = temp2 >> 24;
            temp2 = temp2 << 16;

            temp3 = key[4*(j-1)+i] << 8;
            temp3 = temp3 >> 24;
            temp3 = temp3 << 8;

            key[4*(j-1)+i] = key[4*(j-1)+i] >> 24;

            act_state_matrix[j][i] = key[4*(j-1)+i] + temp1 + temp2 + temp3;
        }
    }

    for(uint32_t i = 1; i < 4; i++){
        temp1 = nonce[i-1] << 24;

        temp2 = nonce[i-1] << 16;
        temp2 = temp2 >> 24;
        temp2 = temp2 << 16;

        temp3 = nonce[i-1] << 8;
        temp3 = temp3 >> 24;
        temp3 = temp3 << 8;

        nonce[i-1] = nonce[i-1] >> 24;

        act_state_matrix[3][i] = nonce[i-1] + temp1 + temp2 + temp3;
    }

    for(uint32_t a = 0; a < n_blocks; a++){
        act_state_matrix[3][0] = counter;

        for(uint32_t i = 0; i < 4; i++){
            for(uint32_t j = 0; j < 4; j++){
                state_matrix[i][j] = act_state_matrix[i][j];
                copy_state_matrix[i][j] = act_state_matrix[i][j];
            }
        }

        for(uint32_t i = 0; i < 10; i++){
            quarterround(state_matrix,0,4,8,12);
            quarterround(state_matrix,1,5,9,13);
            quarterround(state_matrix,2,6,10,14);
            quarterround(state_matrix,3,7,11,15);
            quarterround(state_matrix,0,5,10,15);
            quarterround(state_matrix,1,6,11,12);
            quarterround(state_matrix,2,7,8,13);
            quarterround(state_matrix,3,4,9,14);
        }

        for(uint32_t i = 0; i < 4; i++){
            for(uint32_t j = 0; j < 4; j++){
                state_matrix[i][j] += copy_state_matrix[i][j];
            }
        }

        if(a!=n_blocks-1){
            split_2(state_matrix,cipher,a,remain,0);
        }
        else{
            split_2(state_matrix,cipher,a,remain,1);
        }

        counter++;

    }

    uint32_t flag = 0;

    for(uint32_t i = 0; i < n_blocks; i++){
        for(uint32_t j = 0; j < 16; j++){
            cipher[i][j] = cipher[i][j] ^ plaintext[i][j];

            if(128*i + 8*j <= len && (128*i + 8*(j+1)) > len){
                if(remain%8 == 2){
                    cipher[i][j] = cipher[i][j] >> 24;
                }
                if(remain%8 == 4){
                    cipher[i][j] = cipher[i][j] >> 16;
                }
                if(remain%8 == 6){
                    cipher[i][j] = cipher[i][j] >> 8;
                }
                flag = 1;
                break;
            }
        }

        if(flag == 1){
            break;
        }
    }
}


int main()
{
    init_platform();

    //---------------------

    float sum_processor_PL_0 = 0;
    float sum_processor_PS_0 = 0;

    uint32_t intermediate[8+3+1+32];

	XTime seed_value;
	XTime_GetTime(&seed_value);
	srand(seed_value);

    uint32_t key[8] = {0x1c9240a5,0xeb55d38a,0xf3338886,0x04f6b5f0,0x473917c1,0x402b8009,0x9dca5cbc,0x207075c0};
	uint32_t nonce[3]= {0x00000000,0x00000000,0x00000002};
	uint32_t counter_val = 42;
	uint32_t plaintext[][16]={{0x27547761,0x73206272,0x696c6c69,0x672c2061,0x6e642074,0x68652073,0x6c697468,0x7920746f,0x7665730a,0x44696420,0x67797265,0x20616e64,0x2067696d,0x626c6520,0x696e2074,0x68652077},{0x6162653a,0x0a416c6c,0x206d696d,0x73792077,0x65726520,0x74686520,0x626f726f,0x676f7665,0x732c0a41,0x6e642074,0x6865206d,0x6f6d6520,0x72617468,0x73206f75,0x74677261,0x62652e00}};

	uint32_t len = 254;

	//---------------------

	uint32_t n_blocks = len / 128;
	uint32_t remain = len % 128;

	if(remain != 0){
		n_blocks += 1;
	}

	uint32_t cipher[n_blocks][16], cipher_hw[n_blocks][16];

	//----------------------------

	XTime time_PS_start, time_PS_end;
	XTime_SetTime(0);
	XTime_GetTime(&time_PS_start);

	chacha(plaintext,key,nonce,counter_val,cipher);

	XTime_GetTime(&time_PS_end);

	//----------------------------

	int flag = 0;
	int index = 0;

	for(int i = 0; i < n_blocks; i++){
		for(int j = 0; j < 16; j++){
			intermediate[index] = plaintext[i][j];
			index++;

			if(128*i + 8*j < len && 128*i + 8*(j+1) >= len){
				flag = 1;
				break;
			}
		}

		if(flag == 1){
			break;
		}
	}

	for(int i = 0; i < 8; i++){
		intermediate[index] = key[i];
		index++;
	}

	for(int i = 0; i < 3; i++){
		intermediate[index] = nonce[i];
		index++;
	}

	intermediate[index] = counter_val;

	//------------------------------

    XAxiDma_Config *DMA_confptr;
    XAxiDma DMAACP_instance;

    DMA_confptr = XAxiDma_LookupConfig(XPAR_AXI_DMA_0_DEVICE_ID);

    int status;

    status = XAxiDma_CfgInitialize(&DMAACP_instance, DMA_confptr);
    if (status != XST_SUCCESS)
    {
        printf("Failure of  DMA \n");
        return 1;
    }

    XTime DMA_ACP_start, DMA_ACP_end;

    XTime_SetTime(0);
    XTime_GetTime(&DMA_ACP_start);

    status = XAxiDma_SimpleTransfer(&DMAACP_instance, (UINTPTR)cipher_hw, 32 * sizeof(uint32_t), XAXIDMA_DEVICE_TO_DMA); // uses axi lite
    if (status != XST_SUCCESS)
    {
        return 1;
    }

    status = XAxiDma_SimpleTransfer(&DMAACP_instance, (UINTPTR)intermediate, (8+3+1+32) * sizeof(uint32_t), XAXIDMA_DMA_TO_DEVICE); // uses axi lite
    if (status != XST_SUCCESS)
    {
        return 1;
    }

    status = XAxiDma_ReadReg(XPAR_AXI_DMA_0_BASEADDR, 0x04) & 0x00000002;
    while (status != 0x00000002)
    {
        status = XAxiDma_ReadReg(XPAR_AXI_DMA_0_BASEADDR, 0x04) & 0x00000002;
    }

    status = XAxiDma_ReadReg(XPAR_AXI_DMA_0_BASEADDR, 0x34) & 0x00000002;
    while (status != 0x00000002)
    {
        status = XAxiDma_ReadReg(XPAR_AXI_DMA_0_BASEADDR, 0x34) & 0x00000002;
    }

    XTime_GetTime(&DMA_ACP_end);

    //---------------------------

    flag = 0;

	for(int i = 0; i < n_blocks; i++){
		for(int j = 0; j < 16; j++){
			if(cipher[i][j] != cipher_hw[i][j]){
				printf("Error\n");
			}
			index++;

			if(128*i + 8*j < len && 128*i + 8*(j+1) >= len){
				flag = 1;
				break;
			}
		}

		if(flag == 1){
			break;
		}
	}

	printf("No Error\n");


    cleanup_platform();
    return 0;
}

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module split_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_matrix_0_0_r,
        state_matrix_0_1_r,
        state_matrix_0_2_r,
        state_matrix_0_3_r,
        state_matrix_1_0_r,
        state_matrix_1_1_r,
        state_matrix_1_2_r,
        state_matrix_1_3_r,
        state_matrix_2_0_r,
        state_matrix_2_1_r,
        state_matrix_2_2_r,
        state_matrix_2_3_r,
        state_matrix_3_0_r,
        state_matrix_3_1_r,
        state_matrix_3_2_r,
        state_matrix_3_3_r,
        key_stream_address0,
        key_stream_ce0,
        key_stream_we0,
        key_stream_d0,
        start,
        mode
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] state_matrix_0_0_r;
input  [31:0] state_matrix_0_1_r;
input  [31:0] state_matrix_0_2_r;
input  [31:0] state_matrix_0_3_r;
input  [31:0] state_matrix_1_0_r;
input  [31:0] state_matrix_1_1_r;
input  [31:0] state_matrix_1_2_r;
input  [31:0] state_matrix_1_3_r;
input  [31:0] state_matrix_2_0_r;
input  [31:0] state_matrix_2_1_r;
input  [31:0] state_matrix_2_2_r;
input  [31:0] state_matrix_2_3_r;
input  [31:0] state_matrix_3_0_r;
input  [31:0] state_matrix_3_1_r;
input  [31:0] state_matrix_3_2_r;
input  [31:0] state_matrix_3_3_r;
output  [4:0] key_stream_address0;
output   key_stream_ce0;
output   key_stream_we0;
output  [31:0] key_stream_d0;
input  [0:0] start;
input  [0:0] mode;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] key_stream_address0;
reg key_stream_ce0;
reg key_stream_we0;
reg[31:0] key_stream_d0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] mode_read_read_fu_116_p2;
reg   [4:0] key_stream_addr_1_reg_673;
wire   [1:0] trunc_ln44_fu_301_p1;
reg   [1:0] trunc_ln44_reg_678;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln11_fu_305_p2;
reg   [0:0] icmp_ln11_reg_683;
wire   [4:0] add_ln11_fu_311_p2;
wire   [2:0] select_ln11_1_fu_337_p3;
wire   [2:0] j_fu_488_p2;
wire   [0:0] icmp_ln14_fu_379_p2;
reg   [4:0] indvar_flatten_reg_244;
reg   [2:0] i_0_reg_255;
reg   [2:0] j_0_reg_266;
wire   [63:0] tmp_8_fu_292_p3;
wire   [63:0] zext_ln56_fu_483_p1;
wire   [31:0] tmp_3_fu_457_p5;
wire    ap_CS_fsm_state3;
wire   [31:0] or_ln39_1_fu_555_p5;
wire   [4:0] tmp_7_fu_278_p3;
wire   [4:0] or_ln39_fu_286_p2;
wire   [0:0] icmp_ln12_fu_323_p2;
wire   [2:0] i_fu_317_p2;
wire   [1:0] trunc_ln11_fu_345_p1;
wire   [1:0] trunc_ln44_1_fu_357_p1;
wire   [2:0] select_ln11_fu_329_p3;
wire   [3:0] zext_ln12_fu_369_p1;
wire   [3:0] shl_ln14_mid2_fu_349_p3;
wire   [3:0] add_ln14_fu_373_p2;
wire   [1:0] select_ln11_2_fu_361_p3;
wire   [1:0] trunc_ln44_2_fu_385_p1;
wire   [3:0] tmp_4_fu_389_p3;
wire   [4:0] tmp_1_fu_401_p17;
wire   [31:0] tmp_1_fu_401_p18;
wire   [7:0] empty_fu_423_p1;
wire   [7:0] p_1_fu_437_p4;
wire   [7:0] p_2_fu_447_p4;
wire   [7:0] p_3_fu_427_p4;
wire   [3:0] add_ln56_fu_470_p2;
wire   [4:0] tmp_s_fu_476_p3;
wire   [1:0] trunc_ln19_fu_494_p1;
wire   [3:0] tmp_5_fu_498_p3;
wire   [4:0] tmp_2_fu_509_p17;
wire   [31:0] tmp_2_fu_509_p18;
wire   [7:0] trunc_ln39_fu_551_p1;
wire   [7:0] tmp_6_fu_531_p4;
wire   [7:0] tmp_9_fu_541_p4;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

chacha_hw_mux_165bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
chacha_hw_mux_165bkb_U88(
    .din0(state_matrix_0_0_r),
    .din1(state_matrix_0_1_r),
    .din2(state_matrix_0_2_r),
    .din3(state_matrix_0_3_r),
    .din4(state_matrix_1_0_r),
    .din5(state_matrix_1_1_r),
    .din6(state_matrix_1_2_r),
    .din7(state_matrix_1_3_r),
    .din8(state_matrix_2_0_r),
    .din9(state_matrix_2_1_r),
    .din10(state_matrix_2_2_r),
    .din11(state_matrix_2_3_r),
    .din12(state_matrix_3_0_r),
    .din13(state_matrix_3_1_r),
    .din14(state_matrix_3_2_r),
    .din15(state_matrix_3_3_r),
    .din16(tmp_1_fu_401_p17),
    .dout(tmp_1_fu_401_p18)
);

chacha_hw_mux_165bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
chacha_hw_mux_165bkb_U89(
    .din0(state_matrix_0_0_r),
    .din1(state_matrix_0_1_r),
    .din2(state_matrix_0_2_r),
    .din3(state_matrix_0_3_r),
    .din4(state_matrix_1_0_r),
    .din5(state_matrix_1_1_r),
    .din6(state_matrix_1_2_r),
    .din7(state_matrix_1_3_r),
    .din8(state_matrix_2_0_r),
    .din9(state_matrix_2_1_r),
    .din10(state_matrix_2_2_r),
    .din11(state_matrix_2_3_r),
    .din12(state_matrix_3_0_r),
    .din13(state_matrix_3_1_r),
    .din14(state_matrix_3_2_r),
    .din15(state_matrix_3_3_r),
    .din16(tmp_2_fu_509_p17),
    .dout(tmp_2_fu_509_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln11_fu_305_p2 == 1'd0) & (mode_read_read_fu_116_p2 == 1'd0)) | ((icmp_ln11_fu_305_p2 == 1'd0) & (icmp_ln14_fu_379_p2 == 1'd0))))) begin
        i_0_reg_255 <= select_ln11_1_fu_337_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_255 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln11_fu_305_p2 == 1'd0) & (mode_read_read_fu_116_p2 == 1'd0)) | ((icmp_ln11_fu_305_p2 == 1'd0) & (icmp_ln14_fu_379_p2 == 1'd0))))) begin
        indvar_flatten_reg_244 <= add_ln11_fu_311_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_244 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln11_fu_305_p2 == 1'd0) & (mode_read_read_fu_116_p2 == 1'd0)) | ((icmp_ln11_fu_305_p2 == 1'd0) & (icmp_ln14_fu_379_p2 == 1'd0))))) begin
        j_0_reg_266 <= j_fu_488_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_266 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln11_reg_683 <= icmp_ln11_fu_305_p2;
        trunc_ln44_reg_678 <= trunc_ln44_fu_301_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        key_stream_addr_1_reg_673[4] <= tmp_8_fu_292_p3[4];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        key_stream_address0 = key_stream_addr_1_reg_673;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_stream_address0 = zext_ln56_fu_483_p1;
    end else begin
        key_stream_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        key_stream_ce0 = 1'b1;
    end else begin
        key_stream_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        key_stream_d0 = or_ln39_1_fu_555_p5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_stream_d0 = tmp_3_fu_457_p5;
    end else begin
        key_stream_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (((icmp_ln11_fu_305_p2 == 1'd0) & (mode_read_read_fu_116_p2 == 1'd0)) | ((icmp_ln11_fu_305_p2 == 1'd0) & (icmp_ln14_fu_379_p2 == 1'd0)))) | ((icmp_ln11_reg_683 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        key_stream_we0 = 1'b1;
    end else begin
        key_stream_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln11_fu_305_p2 == 1'd0) & (mode_read_read_fu_116_p2 == 1'd0)) | ((icmp_ln11_fu_305_p2 == 1'd0) & (icmp_ln14_fu_379_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_311_p2 = (5'd1 + indvar_flatten_reg_244);

assign add_ln14_fu_373_p2 = (zext_ln12_fu_369_p1 + shl_ln14_mid2_fu_349_p3);

assign add_ln56_fu_470_p2 = (shl_ln14_mid2_fu_349_p3 + zext_ln12_fu_369_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign empty_fu_423_p1 = tmp_1_fu_401_p18[7:0];

assign i_fu_317_p2 = (3'd1 + i_0_reg_255);

assign icmp_ln11_fu_305_p2 = ((indvar_flatten_reg_244 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_323_p2 = ((j_0_reg_266 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_379_p2 = ((add_ln14_fu_373_p2 == 4'd15) ? 1'b1 : 1'b0);

assign j_fu_488_p2 = (3'd1 + select_ln11_fu_329_p3);

assign mode_read_read_fu_116_p2 = mode;

assign or_ln39_1_fu_555_p5 = {{{{trunc_ln39_fu_551_p1}, {tmp_6_fu_531_p4}}, {tmp_9_fu_541_p4}}, {8'd0}};

assign or_ln39_fu_286_p2 = (tmp_7_fu_278_p3 | 5'd15);

assign p_1_fu_437_p4 = {{tmp_1_fu_401_p18[15:8]}};

assign p_2_fu_447_p4 = {{tmp_1_fu_401_p18[23:16]}};

assign p_3_fu_427_p4 = {{tmp_1_fu_401_p18[31:24]}};

assign select_ln11_1_fu_337_p3 = ((icmp_ln12_fu_323_p2[0:0] === 1'b1) ? i_fu_317_p2 : i_0_reg_255);

assign select_ln11_2_fu_361_p3 = ((icmp_ln12_fu_323_p2[0:0] === 1'b1) ? trunc_ln44_1_fu_357_p1 : trunc_ln44_fu_301_p1);

assign select_ln11_fu_329_p3 = ((icmp_ln12_fu_323_p2[0:0] === 1'b1) ? 3'd0 : j_0_reg_266);

assign shl_ln14_mid2_fu_349_p3 = {{trunc_ln11_fu_345_p1}, {2'd0}};

assign tmp_1_fu_401_p17 = tmp_4_fu_389_p3;

assign tmp_2_fu_509_p17 = tmp_5_fu_498_p3;

assign tmp_3_fu_457_p5 = {{{{empty_fu_423_p1}, {p_1_fu_437_p4}}, {p_2_fu_447_p4}}, {p_3_fu_427_p4}};

assign tmp_4_fu_389_p3 = {{select_ln11_2_fu_361_p3}, {trunc_ln44_2_fu_385_p1}};

assign tmp_5_fu_498_p3 = {{trunc_ln44_reg_678}, {trunc_ln19_fu_494_p1}};

assign tmp_6_fu_531_p4 = {{tmp_2_fu_509_p18[15:8]}};

assign tmp_7_fu_278_p3 = {{start}, {4'd0}};

assign tmp_8_fu_292_p3 = {{59'd0}, {or_ln39_fu_286_p2}};

assign tmp_9_fu_541_p4 = {{tmp_2_fu_509_p18[23:16]}};

assign tmp_s_fu_476_p3 = {{start}, {add_ln56_fu_470_p2}};

assign trunc_ln11_fu_345_p1 = select_ln11_1_fu_337_p3[1:0];

assign trunc_ln19_fu_494_p1 = j_0_reg_266[1:0];

assign trunc_ln39_fu_551_p1 = tmp_2_fu_509_p18[7:0];

assign trunc_ln44_1_fu_357_p1 = i_fu_317_p2[1:0];

assign trunc_ln44_2_fu_385_p1 = select_ln11_fu_329_p3[1:0];

assign trunc_ln44_fu_301_p1 = i_0_reg_255[1:0];

assign zext_ln12_fu_369_p1 = select_ln11_fu_329_p3;

assign zext_ln56_fu_483_p1 = tmp_s_fu_476_p3;

always @ (posedge ap_clk) begin
    key_stream_addr_1_reg_673[3:0] <= 4'b1111;
end

endmodule //split_hw
